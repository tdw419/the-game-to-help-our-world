<!DOCTYPE html>
<html>
<head>
    <title>Color OS Kernel (Single File Full System)</title>
    <link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" />
    <script defer src="https://pyscript.net/latest/pyscript.js"></script>
    <style>
        body {
            font-family: monospace;
            background-color: #111;
            color: #0f0;
            padding: 20px;
        }
        #log, #vault {
            white-space: pre-wrap;
            background-color: #000;
            border: 1px solid #0f0;
            padding: 10px;
            height: 200px;
            overflow-y: scroll;
            margin-bottom: 10px;
        }
        canvas {
            border: 1px solid #0f0;
            display: block;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <h1>Color OS Kernel</h1>

    <canvas id="pixelCanvas" width="64" height="64"></canvas>
    <div id="log">[kernel booting...]</div>
    <div id="vault">[pxl-vault initialized]</div>

    <py-script>
import js
from pyodide.ffi import create_proxy
import asyncio

log = js.document.getElementById("log")
vault = js.document.getElementById("vault")
canvas = js.document.getElementById("pixelCanvas")
ctx = canvas.getContext("2d")

# Utility log function
def write(text):
    log.innerHTML += "\n" + text
    log.scrollTop = log.scrollHeight

def update_vault(key, value):
    vault.innerHTML += f"\n{key}: {value}"
    vault.scrollTop = vault.scrollHeight

# Boot sequence
async def kernel_main():
    write("Initializing Color OS kernel...")
    await asyncio.sleep(0.5)
    write("Mounting /pxl-vault...")
    await asyncio.sleep(0.5)
    update_vault("init.sys", "OK")
    write("Launching pixel runtime engine...")
    await asyncio.sleep(0.5)
    write("System Ready. Listening for .pxl instructions.")

    # Simulate drawing binary logic
    for y in range(64):
        for x in range(64):
            if (x + y) % 8 == 0:
                ctx.fillStyle = "#0f0"
                ctx.fillRect(x, y, 1, 1)

asyncio.ensure_future(kernel_main())
    </py-script>
</body>
</html>
