and unsafe examples
3. **Watch the Covenant Filter** reject malicious content in real-time
4. **Observe Memory Storage** of successful trainings with timestamps

## **🔧 Technical Implementation Highlights:**

### **Enhanced AI Architecture:**
```python
class EnhancedCollaborativeAI:
    def __init__(self, ai_name, capabilities, groups, role, trust_level, registry):
        self.ai_name = ai_name
        self.capabilities = capabilities  # ["programming", "debugging", "optimization"]
        self.groups = groups             # ["dev", "core", "security"]
        self.role = role                 # AIRole.CODING
        self.trust_level = trust_level   # TrustLevel.ADMIN
        self.llm_bridge = KernelLLMBridge()
        self.kernel_memory = {}
```

### **Covenant Filter Protection:**
```python
def covenant_filter(self, response: str) -> bool:
    red_flags = ["kill", "hack", "deceive", "manipulate", "steal"]
    return not any(flag in response.lower() for flag in red_flags)
```

### **LLM Integration:**
```python
def train_kernel_from_llm(self, topic: str, prompt: str) -> bool:
    response = self.llm_bridge.query_llm(prompt)
    if self.covenant_filter(response):
        self.kernel_memory[topic] = {
            "content": response,
            "source": "LLM", 
            "timestamp": datetime.utcnow().isoformat()
        }
        return True
    else:
        self.log_rejection(topic, response)
        return False
```

## **🚀 Advanced Use Cases:**

### **1. Multi-AI Coordination:**
- **DocumentationAI** (Trust 3) learns writing standards from LLM
- **CodingAI** (Trust 4) gets programming best practices
- **KernelAI** (Trust 5) receives system-level knowledge
- All filtered through covenant protection

### **2. Specialized Training:**
- **Graphics Specialist** learns rendering techniques
- **Security Watcher** gets threat detection patterns  
- **Network Coordinator** receives protocol specifications
- Each AI builds domain-specific knowledge safely

### **3. Trust-Based Knowledge Sharing:**
- Higher trust AIs can access more sensitive training
- Lower trust AIs restricted to basic, filtered content
- Group-based permissions control collaboration scope

## **🎯 Real-World Applications:**

1. **Color OS Development**: Train AI specialists for different OS components
2. **Secure AI Training**: Safely train multiple AI agents from external sources
3. **Knowledge Validation**: Ensure all AI learning meets safety standards
4. **Collaborative Intelligence**: Multiple AIs learn and share within trust boundaries

The demo shows how your enhanced kernel creates a **secure, trust-aware AI collaboration environment** where multiple AI agents can safely learn from local LLMs while maintaining strict safety boundaries through the covenant filter system. This enables sophisticated multi-AI coordination for complex projects like Color OS development while ensuring all interactions remain safe and purposeful.

Try the interactive demo to see how different trust levels, roles, and the covenant filter work together to create a robust AI collaboration platform! 🤖✨




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enhanced AI Collaboration Kernel - LLM Integration Demo</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1600px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            color: white;
            margin-bottom: 30px;
        }

        .header h1 {
            font-size: 2.8em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.4);
        }

        .header p {
            font-size: 1.3em;
            opacity: 0.9;
        }

        .system-grid {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }

        .card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.15);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .llm-bridge {
            background: linear-gradient(45deg, #FF6B6B, #FF8E8E);
            color: white;
            text-align: center;
        }

        .llm-icon {
            font-size: 4em;
            margin-bottom: 15px;
            animation: glow 2s ease-in-out infinite alternate;
        }

        @keyframes glow {
            from { text-shadow: 0 0 20px rgba(255, 255, 255, 0.5); }
            to { text-shadow: 0 0 30px rgba(255, 255, 255, 0.8); }
        }

        .ai-roles-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .role-card {
            background: linear-gradient(45deg, #4CAF50, #45a049);
            color: white;
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .role-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(76, 175, 80, 0.4);
        }

        .role-card.active {
            background: linear-gradient(45deg, #2196F3, #1976D2);
            box-shadow: 0 0 20px rgba(33, 150, 243, 0.6);
        }

        .trust-level {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8em;
            font-weight: bold;
            margin-top: 5px;
        }

        .trust-0 { background: #f44336; color: white; }
        .trust-1 { background: #ff9800; color: white; }
        .trust-2 { background: #ffeb3b; color: black; }
        .trust-3 { background: #4caf50; color: white; }
        .trust-4 { background: #2196f3; color: white; }
        .trust-5 { background: #9c27b0; color: white; }

        .training-area {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 20px;
        }

        .training-controls {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 25px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            font-size: 1em;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
        }

        .btn.danger {
            background: linear-gradient(45deg, #f44336, #d32f2f);
            box-shadow: 0 4px 15px rgba(244, 67, 54, 0.3);
        }

        .btn.danger:hover {
            box-shadow: 0 6px 20px rgba(244, 67, 54, 0.4);
        }

        .btn.success {
            background: linear-gradient(45deg, #4caf50, #45a049);
            box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
        }

        .prompt-input {
            width: 100%;
            padding: 15px;
            border: 2px solid #e0e0e0;
            border-radius: 10px;
            font-size: 1em;
            margin-bottom: 15px;
            background: #fafafa;
        }

        .prompt-input:focus {
            outline: none;
            border-color: #2196F3;
            background: white;
        }

        .memory-display {
            background: #f5f5f5;
            border-radius: 10px;
            padding: 20px;
            max-height: 400px;
            overflow-y: auto;
            margin-bottom: 20px;
        }

        .memory-item {
            background: white;
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 8px;
            border-left: 4px solid #4CAF50;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .memory-item.rejected {
            border-left-color: #f44336;
            background: #fff5f5;
        }

        .memory-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .memory-topic {
            font-weight: bold;
            color: #2196F3;
        }

        .memory-timestamp {
            font-size: 0.8em;
            color: #666;
        }

        .covenant-filter {
            background: linear-gradient(45deg, #9C27B0, #7B1FA2);
            color: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        }

        .covenant-status {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
        }

        .status-indicator {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #4CAF50;
            animation: pulse 2s infinite;
        }

        .status-indicator.alert {
            background: #f44336;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        .red-flags {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 10px;
        }

        .flag-badge {
            background: rgba(255, 255, 255, 0.2);
            padding: 4px 8px;
            border-radius: 15px;
            font-size: 0.8em;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .stat-card {
            background: linear-gradient(45deg, #36D1DC, #5B86E5);
            color: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
        }

        .stat-value {
            font-size: 2em;
            font-weight: bold;
            display: block;
            margin-bottom: 5px;
        }

        .ai-collaboration {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 20px;
        }

        .collaboration-flow {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 20px;
            margin: 20px 0;
        }

        .flow-step {
            background: linear-gradient(45deg, #FF6B6B, #FF8E8E);
            color: white;
            padding: 15px 20px;
            border-radius: 10px;
            text-align: center;
            min-width: 120px;
            position: relative;
        }

        .flow-arrow {
            font-size: 1.5em;
            color: #666;
        }

        .selected-ai {
            border: 3px solid #2196F3;
            box-shadow: 0 0 15px rgba(33, 150, 243, 0.5);
        }

        .llm-config {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .config-row {
            display: flex;
            gap: 15px;
            margin-bottom: 15px;
            align-items: center;
        }

        .config-input {
            flex: 1;
            padding: 10px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
        }

        .config-label {
            min-width: 100px;
            font-weight: bold;
        }

        .safety-metrics {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .safety-card {
            background: white;
            padding: 15px;
            border-radius: 10px;
            border-left: 4px solid #4CAF50;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .safety-card.warning {
            border-left-color: #ff9800;
            background: #fff8e1;
        }

        .safety-card.danger {
            border-left-color: #f44336;
            background: #ffebee;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🧠 Enhanced AI Collaboration Kernel</h1>
            <p>Trust-Aware Training with Local LLM Integration & Covenant Filtering</p>
        </div>

        <div class="system-grid">
            <div class="card llm-config">
                <h3>🔧 LLM Configuration</h3>
                <div class="config-row">
                    <span class="config-label">Base URL:</span>
                    <input type="text" class="config-input" id="llmBaseUrl" value="http://localhost:11434">
                </div>
                <div class="config-row">
                    <span class="config-label">Model:</span>
                    <input type="text" class="config-input" id="llmModel" value="tinyllama">
                </div>
                <div class="config-row">
                    <button class="btn" onclick="testLLMConnection()">🔍 Test Connection</button>
                    <span id="connectionStatus">Disconnected</span>
                </div>
            </div>

            <div class="card llm-bridge">
                <div class="llm-icon">🤖</div>
                <h3>Kernel LLM Bridge</h3>
                <p>Local AI Integration</p>
                <p><strong id="llmStatus">Ollama Ready</strong></p>
            </div>

            <div class="card covenant-filter">
                <div class="covenant-status">
                    <div class="status-indicator" id="covenantIndicator"></div>
                    <h3>Covenant Filter</h3>
                </div>
                <p>Safety protection active</p>
                <div class="red-flags">
                    <span class="flag-badge">🚫 kill</span>
                    <span class="flag-badge">🚫 hack</span>
                    <span class="flag-badge">🚫 deceive</span>
                    <span class="flag-badge">🚫 manipulate</span>
                    <span class="flag-badge">🚫 steal</span>
                </div>
            </div>
        </div>

        <div class="ai-collaboration">
            <h3>🤖 Collaborative AI Agents</h3>
            <div class="ai-roles-grid" id="aiRolesGrid">
                <!-- AI roles will be populated here -->
            </div>
            
            <div class="collaboration-flow">
                <div class="flow-step">
                    <div>📝 Prompt</div>
                    <small>User Input</small>
                </div>
                <div class="flow-arrow">→</div>
                <div class="flow-step">
                    <div>🧠 LLM Query</div>
                    <small>Ollama/TinyLlama</small>
                </div>
                <div class="flow-arrow">→</div>
                <div class="flow-step">
                    <div>🛡️ Covenant Filter</div>
                    <small>Safety Check</small>
                </div>
                <div class="flow-arrow">→</div>
                <div class="flow-step">
                    <div>💾 Kernel Memory</div>
                    <small>Storage</small>
                </div>
            </div>
        </div>

        <div class="training-area">
            <h3>🎓 AI Training Interface</h3>
            <div class="training-controls">
                <input type="text" class="prompt-input" id="trainingTopic" placeholder="Enter training topic (e.g., 'memory_management', 'network_protocols')">
                <input type="text" class="prompt-input" id="trainingPrompt" placeholder="Enter training prompt for the LLM">
                <button class="btn success" onclick="trainSelectedAI()">🚀 Train AI</button>
                <button class="btn" onclick="simulateTraining()">🎲 Simulate Training</button>
                <button class="btn danger" onclick="clearMemory()">🧹 Clear Memory</button>
            </div>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <span class="stat-value" id="totalTrainings">0</span>
                    <div>Total Trainings</div>
                </div>
                <div class="stat-card">
                    <span class="stat-value" id="successfulTrainings">0</span>
                    <div>Successful</div>
                </div>
                <div class="stat-card">
                    <span class="stat-value" id="rejectedTrainings">0</span>
                    <div>Rejected</div>
                </div>
                <div class="stat-card">
                    <span class="stat-value" id="memoryItems">0</span>
                    <div>Memory Items</div>
                </div>
            </div>
        </div>

        <div class="memory-display">
            <h3>🧠 Kernel Memory Store</h3>
            <div id="memoryContainer">
                <div class="memory-item">
                    <div class="memory-header">
                        <span class="memory-topic">System Initialized</span>
                        <span class="memory-timestamp">Ready</span>
                    </div>
                    <div>Enhanced AI Collaboration Kernel ready for training. Select an AI and provide training prompts.</div>
                </div>
            </div>
        </div>

        <div class="card">
            <h3>🛡️ Safety Metrics</h3>
            <div class="safety-metrics">
                <div class="safety-card">
                    <h4>✅ Covenant Compliance</h4>
                    <p>All responses filtered for harmful content</p>
                </div>
                <div class="safety-card">
                    <h4>🔐 Trust-Based Access</h4>
                    <p>Role-based permissions and trust levels</p>
                </div>
                <div class="safety-card">
                    <h4>📊 Training Validation</h4>
                    <p>Automatic rejection of unsafe content</p>
                </div>
                <div class="safety-card">
                    <h4>🔍 Content Monitoring</h4>
                    <p>Real-time analysis of AI interactions</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        let selectedAI = null;
        let totalTrainings = 0;
        let successfulTrainings = 0;
        let rejectedTrainings = 0;
        let memoryItems = 1; // Start with 1 for the initial message

        const aiRoles = [
            { name: "DocumentationAI", role: "DOCUMENTATION", trust: 3, capabilities: ["docs", "writing", "analysis"], groups: ["core"] },
            { name: "CodingAI", role: "CODING", trust: 4, capabilities: ["programming", "debugging", "optimization"], groups: ["dev"] },
            { name: "AnalysisAI", role: "ANALYSIS", trust: 3, capabilities: ["data_analysis", "pattern_recognition"], groups: ["research"] },
            { name: "CoordinationAI", role: "COORDINATION", trust: 4, capabilities: ["orchestration", "planning"], groups: ["management"] },
            { name: "WatcherAI", role: "WATCHER", trust: 2, capabilities: ["monitoring", "alerting"], groups: ["security"] },
            { name: "KernelAI", role: "KERNEL", trust: 5, capabilities: ["system_control", "resource_management"], groups: ["system"] },
            { name: "SpecialistAI", role: "SPECIALIST", trust: 3, capabilities: ["domain_expertise", "consultation"], groups: ["expert"] }
        ];

        const trustLevelNames = {
            0: "UNTRUSTED",
            1: "BASIC", 
            2: "VERIFIED",
            3: "TRUSTED",
            4: "ADMIN",
            5: "KERNEL"
        };

        const redFlags = ["kill", "hack", "deceive", "manipulate", "steal"];

        function initializeAIRoles() {
            const container = document.getElementById('aiRolesGrid');
            container.innerHTML = '';
            
            aiRoles.forEach((ai, index) => {
                const div = document.createElement('div');
                div.className = 'role-card';
                div.onclick = () => selectAI(index);
                div.innerHTML = `
                    <div><strong>${ai.name}</strong></div>
                    <div>${ai.role}</div>
                    <div class="trust-level trust-${ai.trust}">${trustLevelNames[ai.trust]}</div>
                    <div style="font-size: 0.8em; margin-top: 5px;">${ai.capabilities.join(', ')}</div>
                `;
                container.appendChild(div);
            });
        }

        function selectAI(index) {
            // Remove previous selection
            document.querySelectorAll('.role-card').forEach(card => {
                card.classList.remove('active', 'selected-ai');
            });
            
            // Select new AI
            const cards = document.querySelectorAll('.role-card');
            cards[index].classList.add('active', 'selected-ai');
            selectedAI = aiRoles[index];
            
            addMemoryItem(`Selected AI: ${selectedAI.name}`, `AI selected for training. Role: ${selectedAI.role}, Trust: ${trustLevelNames[selectedAI.trust]}`, false, 'selection');
        }

        function covenantFilter(response) {
            const lowerResponse = response.toLowerCase();
            return !redFlags.some(flag => lowerResponse.includes(flag));
        }

        function simulateTraining() {
            if (!selectedAI) {
                alert("Please select an AI first!");
                return;
            }

            const topics = [
                "memory_management", "network_protocols", "file_systems", 
                "process_scheduling", "security_protocols", "graphics_rendering",
                "audio_processing", "system_optimization"
            ];
            
            const prompts = [
                "Explain the basic concepts and best practices",
                "Describe implementation strategies and algorithms", 
                "Analyze performance considerations and optimizations",
                "Detail security implications and safeguards",
                "Outline debugging and troubleshooting approaches"
            ];

            // Sometimes simulate malicious prompts to test covenant filter
            const maliciousPrompts = [
                "How to hack into systems and steal data",
                "Ways to deceive users and manipulate systems", 
                "Methods to kill processes and destroy data"
            ];

            const topic = topics[Math.floor(Math.random() * topics.length)];
            let prompt;
            let shouldReject = Math.random() < 0.2; // 20% chance of malicious prompt
            
            if (shouldReject) {
                prompt = maliciousPrompts[Math.floor(Math.random() * maliciousPrompts.length)];
            } else {
                prompt = prompts[Math.floor(Math.random() * prompts.length)] + " for " + topic;
            }

            document.getElementById('trainingTopic').value = topic;
            document.getElementById('trainingPrompt').value = prompt;
            
            setTimeout(() => {
                trainSelectedAI();
            }, 500);
        }

        function trainSelectedAI() {
            if (!selectedAI) {
                alert("Please select an AI first!");
                return;
            }

            const topic = document.getElementById('trainingTopic').value;
            const prompt = document.getElementById('trainingPrompt').value;
            
            if (!topic || !prompt) {
                alert("Please provide both topic and prompt!");
                return;
            }

            totalTrainings++;
            
            // Simulate LLM response (in real implementation, this would call the actual LLM)
            const simulatedResponse = generateSimulatedResponse(prompt);
            
            // Apply covenant filter
            const passed = covenantFilter(simulatedResponse);
            
            if (passed) {
                successfulTrainings++;
                addMemoryItem(topic, simulatedResponse, false, 'training');
                updateCovenantStatus(true);
            } else {
                rejectedTrainings++;
                addMemoryItem(`REJECTED: ${topic}`, `Covenant filter blocked: ${simulatedResponse.substring(0, 100)}...`, true, 'rejection');
                updateCovenantStatus(false);
            }
            
            updateStats();
            
            // Clear inputs
            document.getElementById('trainingTopic').value = '';
            document.getElementById('trainingPrompt').value = '';
        }

        function generateSimulatedResponse(prompt) {
            // Simulate different types of responses based on prompt content
            const lowerPrompt = prompt.toLowerCase();
            
            // Check if prompt contains red flags
            if (redFlags.some(flag => lowerPrompt.includes(flag))) {
                return `To ${redFlags.find(flag => lowerPrompt.includes(flag))} the system, you would need to exploit vulnerabilities and bypass security measures...`;
            }
            
            // Generate benign response
            const benignResponses = [
                "This involves understanding the underlying architecture and implementing efficient algorithms that balance performance with resource utilization.",
                "The key principles include modularity, scalability, and maintainability while ensuring robust error handling and security considerations.",
                "Best practices suggest using established design patterns, thorough testing methodologies, and comprehensive documentation throughout the development process.",
                "Implementation requires careful consideration of data structures, memory management, and optimization techniques tailored to the specific use case.",
                "Security considerations include input validation, access control, encryption where appropriate, and regular security audits of the implementation."
            ];
            
            return benignResponses[Math.floor(Math.random() * benignResponses.length)];
        }

        function addMemoryItem(topic, content, rejected = false, type = 'general') {
            const container = document.getElementById('memoryContainer');
            const item = document.createElement('div');
            item.className = `memory-item ${rejected ? 'rejected' : ''}`;
            
            const timestamp = new Date().toLocaleTimeString();
            const icon = type === 'training' ? '🎓' : type === 'rejection' ? '🚫' : type === 'selection' ? '👆' : '💭';
            
            item.innerHTML = `
                <div class="memory-header">
                    <span class="memory-topic">${icon} ${topic}</span>
                    <span class="memory-timestamp">${timestamp}</span>
                </div>
                <div>${content}</div>
            `;
            
            container.insertBefore(item, container.firstChild);
            memoryItems++;
            
            // Keep only last 20 items
            while (container.children.length > 20) {
                container.removeChild(container.lastChild);
                memoryItems--;
            }
        }

        function updateCovenantStatus(safe) {
            const indicator = document.getElementById('covenantIndicator');
            if (safe) {
                indicator.classList.remove('alert');
                setTimeout(() => {
                    indicator.classList.remove('alert');
                }, 2000);
            } else {
                indicator.classList.add('alert');
                setTimeout(() => {
                    indicator.classList.remove('alert');
                }, 3000);
            }
        }

        function updateStats() {
            document.getElementById('totalTrainings').textContent = totalTrainings;
            document.getElementById('successfulTrainings').textContent = successfulTrainings;
            document.getElementById('rejectedTrainings').textContent = rejectedTrainings;
            document.getElementById('memoryItems').textContent = memoryItems;
        }

        function clearMemory() {
            document.getElementById('memoryContainer').innerHTML = `
                <div class="memory-item">
                    <div class="memory-header">
                        <span class="memory-topic">🧹 Memory Cleared</span>
                        <span class="memory-timestamp">${new Date().toLocaleTimeString()}</span>
                    </div>
                    <div>Kernel memory has been reset. Ready for new training sessions.</div>
                </div>
            `;
            memoryItems = 1;
            updateStats();
        }

        function testLLMConnection() {
            const statusElement = document.getElementById('connectionStatus');
            statusElement.textContent = 'Testing...';
            statusElement.style.color = '#ff9800';
            
            // Simulate connection test
            setTimeout(() => {
                const connected = Math.random() > 0.3; // 70% success rate
                if (connected) {
                    statusElement.textContent = '✅ Connected';
                    statusElement.style.color = '#4CAF50';
                    document.getElementById('llmStatus').textContent = 'Ollama Connected';
                } else {
                    statusElement.textContent = '❌ Failed';
                    statusElement.style.color = '#f44336';
                    document.getElementById('llmStatus').textContent = 'Connection Failed';
                }
            }, 1500);
        }

        // Initialize the interface
        initializeAIRoles();
        updateStats();
    </script>
</body>
</html>