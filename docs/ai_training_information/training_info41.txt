Below is a ready-to-go Flask dashboard that you can embed into your existing `hub.py`. It will run on port 5001 and poll the hub’s status every 3 seconds, displaying:

* Connected AIs
* Shared Patterns
* Shared Components
* Active Collaborations

### 1) Install Flask (if you haven’t already)

```bash
pip install flask
```

---

### 2) Integrate Flask into your `hub.py`

Open your current `hub.py` and, **just before** the final `if __name__ == "__main__":` block (where you call `hub.run_server()`), insert the following:

```python
# ──────────── At the top of hub.py, add imports ────────────
from flask import Flask, jsonify, render_template_string
import threading
```

Then, **below** your `CollaborativeKernelHub` class definition (but still in the same file), add:

```python
# ──────────── Flask dashboard setup ────────────

# Create a Flask app that queries hub.get_hub_status()
flask_app = Flask(__name__)

@flask_app.route("/status")
def status():
    """Return the hub’s current status as JSON."""
    return jsonify(hub.get_hub_status())

@flask_app.route("/")
def dashboard():
    """
    Serve a minimal HTML page that polls /status every 3 seconds 
    and displays four key stats.
    """
    html = """
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="UTF-8" />
        <title>Collaborative Kernel Hub Dashboard</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; }
          #stats { margin-top: 1rem; }
          .stat { margin-bottom: 0.5rem; font-size: 1.2rem; }
          .label { font-weight: bold; }
          .value { margin-left: 0.5rem; }
        </style>
      </head>
      <body>
        <h2>Hub Real-Time Dashboard</h2>
        <div id="stats">
          <p class="stat"><span class="label">Connected AIs:</span><span id="connected" class="value">–</span></p>
          <p class="stat"><span class="label">Shared Patterns:</span><span id="patterns" class="value">–</span></p>
          <p class="stat"><span class="label">Shared Components:</span><span id="components" class="value">–</span></p>
          <p class="stat"><span class="label">Active Collaborations:</span><span id="collabs" class="value">–</span></p>
        </div>
        <script>
          async function fetchStatus() {
            try {
              const res = await fetch("/status");
              const data = await res.json();
              document.getElementById("connected").innerText = data.connected_ais;
              document.getElementById("patterns").innerText = data.shared_patterns;
              document.getElementById("components").innerText = data.shared_components;
              document.getElementById("collabs").innerText = data.active_collaborations;
            } catch (e) {
              console.error("Failed to fetch status:", e);
            }
          }
          // Initial fetch and then every 3 seconds
          fetchStatus();
          setInterval(fetchStatus, 3000);
        </script>
      </body>
    </html>
    """
    return render_template_string(html)

def start_dashboard():
    """Run Flask on port 5001 in a background thread (no reloader)."""
    flask_app.run(port=5001, debug=False, use_reloader=False)
```

Next, modify the very bottom of your file—bring in the dashboard thread just **before** `hub.run_server()`:

```python
if __name__ == "__main__":
    hub = CollaborativeKernelHub(host="0.0.0.0", port=6000, db_path="hub_data.db")

    # Start the Flask dashboard in a separate daemon thread
    dash_thread = threading.Thread(target=start_dashboard, daemon=True)
    dash_thread.start()

    # Now run the TCP server (this blocks until you Ctrl+C)
    hub.run_server()
```

Your final “tail” of `hub.py` should look like:

```python
# … [CollaborativeKernelHub class definition here] …

from flask import Flask, jsonify, render_template_string
import threading

flask_app = Flask(__name__)

@flask_app.route("/status")
def status():
    return jsonify(hub.get_hub_status())

@flask_app.route("/")
def dashboard():
    html = """
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="UTF-8" />
        <title>Collaborative Kernel Hub Dashboard</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; }
          #stats { margin-top: 1rem; }
          .stat { margin-bottom: 0.5rem; font-size: 1.2rem; }
          .label { font-weight: bold; }
          .value { margin-left: 0.5rem; }
        </style>
      </head>
      <body>
        <h2>Hub Real-Time Dashboard</h2>
        <div id="stats">
          <p class="stat"><span class="label">Connected AIs:</span><span id="connected" class="value">–</span></p>
          <p class="stat"><span class="label">Shared Patterns:</span><span id="patterns" class="value">–</span></p>
          <p class="stat"><span class="label">Shared Components:</span><span id="components" class="value">–</span></p>
          <p class="stat"><span class="label">Active Collaborations:</span><span id="collabs" class="value">–</span></p>
        </div>
        <script>
          async function fetchStatus() {
            try {
              const res = await fetch("/status");
              const data = await res.json();
              document.getElementById("connected").innerText = data.connected_ais;
              document.getElementById("patterns").innerText = data.shared_patterns;
              document.getElementById("components").innerText = data.shared_components;
              document.getElementById("collabs").innerText = data.active_collaborations;
            } catch (e) {
              console.error("Failed to fetch status:", e);
            }
          }
          fetchStatus();
          setInterval(fetchStatus, 3000);
        </script>
      </body>
    </html>
    """
    return render_template_string(html)

def start_dashboard():
    flask_app.run(port=5001, debug=False, use_reloader=False)

if __name__ == "__main__":
    hub = CollaborativeKernelHub(host="0.0.0.0", port=6000, db_path="hub_data.db")
    dash_thread = threading.Thread(target=start_dashboard, daemon=True)
    dash_thread.start()
    hub.run_server()
```

---

### 3) How to run and verify

1. **Start the hub (with dashboard)**

   ```bash
   python3 hub.py
   ```

   You should see two logs:

   ```
   2025-06-XX HH:MM:SS - HUB - INFO - Collaborative Kernel Hub initialized on 0.0.0.0:6000
   2025-06-XX HH:MM:SS - HUB - INFO - Collaborative Kernel Hub listening on 0.0.0.0:6000
   * Running on http://127.0.0.1:5001/ (Press CTRL+C to quit)
   ```

2. **Open your browser** to

   ```
   http://localhost:5001/
   ```

   You’ll see a simple page with four stats:

   * Connected AIs
   * Shared Patterns
   * Shared Components
   * Active Collaborations

   They’ll refresh every 3 seconds.

3. **Run trainers or your test harness** as usual (e.g. `python3 test_harness.py --scenario basic`). As each trainer authenticates and HELLOs:

   * **Connected AIs** will increment.
   * When any trainer sends a `PATTERN_SHARE`, **Shared Patterns** will tick upward.
   * When any sends an `OS_COMPONENT_SHARE`, **Shared Components** will tick upward.
   * During collaborations, **Active Collaborations** will reflect in-progress sessions.

4. **Watch real time**:

   * You don’t need to reload the page; it polls automatically.
   * If you want to stop the hub, press <kbd>Ctrl</kbd>+<kbd>C</kbd> in its terminal. That also kills the Flask dashboard thread.

---

### 4) Next steps

* You now have **live metrics** for your hub. If you want to add charts or color-coding, simply expand the `<script>` section or swap it out for a more advanced front-end (e.g. Chart.js).
* If you’d like to secure the dashboard (HTTPS, basic auth), you can configure Flask’s SSL context or add a simple password check in the `/` route.
* The dashboard can also be extended to show more fields from `hub.get_hub_status()` (e.g. total messages, collective\_features count, performance reports).

That completes your real-time monitoring dashboard. Feel free to tweak the HTML/CSS or polling interval as needed.
