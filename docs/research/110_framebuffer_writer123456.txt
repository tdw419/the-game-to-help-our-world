#!/bin/bash
# Complete HTML ‚Üí Framebuffer Setup

set -e

echo "üñ•Ô∏è  HTML ‚Üí Framebuffer Pipeline Setup"
echo "======================================"

# Check dependencies
echo "üìã Checking dependencies..."

# Check Node.js
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js not found. Installing..."
    if command -v apt-get &> /dev/null; then
        sudo apt-get update && sudo apt-get install -y nodejs npm
    else
        echo "Please install Node.js manually"
        exit 1
    fi
fi

# Check ImageMagick
if ! command -v convert &> /dev/null; then
    echo "‚ùå ImageMagick not found. Installing..."
    if command -v apt-get &> /dev/null; then
        sudo apt-get install -y imagemagick
    else
        echo "Please install ImageMagick manually"
        exit 1
    fi
fi

# Check framebuffer
if [ ! -e /dev/fb0 ]; then
    echo "‚ö†Ô∏è  Framebuffer /dev/fb0 not found"
    echo "üí° Try: sudo modprobe vfb vfb_enable=1"
    echo "üí° Or boot into console mode"
fi

echo "‚úÖ Dependencies checked"

# Create package.json
echo "üì¶ Setting up Node.js environment..."
cat > package.json << 'EOF'
{
  "name": "html-framebuffer-renderer",
  "version": "1.0.0",
  "dependencies": {
    "puppeteer": "^21.0.0"
  }
}
EOF

# Install dependencies
npm install

echo "‚úÖ Setup complete!"
echo ""
echo "üìã Usage:"
echo "  node html_to_framebuffer.js your_file.html"
echo ""
echo "üìù Example HTML files you can test:"
echo "  echo '<h1 style=\"color:white;background:black;margin:0;padding:50px;font-size:72px;\">Hello Framebuffer!</h1>' > test.html"
echo "  node html_to_framebuffer.js test.html"




















// html_to_framebuffer.js - Minimal HTML ‚Üí Framebuffer Pipeline
const puppeteer = require('puppeteer');
const fs = require('fs');
const { spawn } = require('child_process');

class HTMLFramebufferRenderer {
    constructor() {
        this.browser = null;
        this.page = null;
        this.fbWidth = 1024;
        this.fbHeight = 768;
    }

    async initialize() {
        console.log('üñ•Ô∏è  Initializing HTML ‚Üí Framebuffer renderer...');
        
        // Launch headless browser
        this.browser = await puppeteer.launch({
            headless: 'new',
            args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-web-security'
            ]
        });

        this.page = await this.browser.newPage();
        
        // Set viewport to framebuffer resolution
        await this.page.setViewport({
            width: this.fbWidth,
            height: this.fbHeight,
            deviceScaleFactor: 1
        });

        console.log(`‚úÖ Browser ready - ${this.fbWidth}x${this.fbHeight}`);
    }

    async renderHTMLToFramebuffer(htmlFile) {
        console.log(`üé® Rendering ${htmlFile} to framebuffer...`);
        
        // Load HTML file
        const htmlPath = `file://${process.cwd()}/${htmlFile}`;
        await this.page.goto(htmlPath, { waitUntil: 'networkidle0' });
        
        // Screenshot to PNG
        const pngBuffer = await this.page.screenshot({
            type: 'png',
            fullPage: false,
            clip: {
                x: 0,
                y: 0,
                width: this.fbWidth,
                height: this.fbHeight
            }
        });

        // Save PNG temporarily
        fs.writeFileSync('/tmp/framebuffer_output.png', pngBuffer);
        
        // Convert PNG to raw RGB
        await this.convertPNGToRaw('/tmp/framebuffer_output.png', '/tmp/framebuffer_output.raw');
        
        // Write to framebuffer
        await this.writeRawToFramebuffer('/tmp/framebuffer_output.raw');
        
        console.log('‚úÖ HTML rendered to framebuffer!');
    }

    convertPNGToRaw(pngFile, rawFile) {
        return new Promise((resolve, reject) => {
            const convert = spawn('convert', [
                pngFile,
                '-depth', '8',
                '-resize', `${this.fbWidth}x${this.fbHeight}!`,
                `rgb:${rawFile}`
            ]);

            convert.on('close', (code) => {
                if (code === 0) {
                    console.log('üîÑ PNG converted to raw RGB');
                    resolve();
                } else {
                    reject(new Error(`ImageMagick convert failed with code ${code}`));
                }
            });

            convert.on('error', (err) => {
                reject(new Error(`ImageMagick not found: ${err.message}`));
            });
        });
    }

    writeRawToFramebuffer(rawFile) {
        return new Promise((resolve, reject) => {
            const dd = spawn('sudo', [
                'dd',
                `if=${rawFile}`,
                'of=/dev/fb0',
                'bs=1M'
            ]);

            dd.on('close', (code) => {
                if (code === 0) {
                    console.log('üì∫ Raw image written to framebuffer');
                    resolve();
                } else {
                    reject(new Error(`dd command failed with code ${code}`));
                }
            });

            dd.on('error', (err) => {
                reject(new Error(`dd command failed: ${err.message}`));
            });
        });
    }

    async cleanup() {
        if (this.browser) {
            await this.browser.close();
        }
        
        // Clean up temp files
        try {
            fs.unlinkSync('/tmp/framebuffer_output.png');
            fs.unlinkSync('/tmp/framebuffer_output.raw');
        } catch (e) {
            // Ignore cleanup errors
        }
    }
}

// Main execution
async function main() {
    const htmlFile = process.argv[2];
    
    if (!htmlFile) {
        console.log('Usage: node html_to_framebuffer.js <html_file>');
        console.log('Example: node html_to_framebuffer.js pxdigest_lab.html');
        process.exit(1);
    }

    if (!fs.existsSync(htmlFile)) {
        console.error(`‚ùå HTML file not found: ${htmlFile}`);
        process.exit(1);
    }

    const renderer = new HTMLFramebufferRenderer();
    
    try {
        await renderer.initialize();
        await renderer.renderHTMLToFramebuffer(htmlFile);
        console.log('üéØ Success! HTML is now displayed on framebuffer');
    } catch (error) {
        console.error(`üí• Error: ${error.message}`);
    } finally {
        await renderer.cleanup();
    }
}

if (require.main === module) {
    main();
}





















<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Framebuffer Test</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            width: 100vw;
            height: 100vh;
            background: linear-gradient(45deg, #000, #003300, #006600, #00ff00);
            color: white;
            font-family: monospace;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
        }
        
        .title {
            font-size: 48px;
            font-weight: bold;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.8);
        }
        
        .subtitle {
            font-size: 24px;
            margin-bottom: 40px;
            opacity: 0.8;
        }
        
        .pixels {
            display: grid;
            grid-template-columns: repeat(10, 20px);
            gap: 2px;
            margin: 20px 0;
        }
        
        .pixel {
            width: 20px;
            height: 20px;
            background: #00ff00;
            border: 1px solid #ffffff;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.3; }
        }
        
        .info {
            font-size: 16px;
            max-width: 600px;
            line-height: 1.5;
            opacity: 0.9;
        }
    </style>
</head>
<body>
    <div class="title">üñ•Ô∏è FRAMEBUFFER SUCCESS!</div>
    <div class="subtitle">HTML ‚Üí Native Display Pipeline Active</div>
    
    <div class="pixels">
        <div class="pixel"></div>
        <div class="pixel"></div>
        <div class="pixel"></div>
        <div class="pixel"></div>
        <div class="pixel"></div>
        <div class="pixel"></div>
        <div class="pixel"></div>
        <div class="pixel"></div>
        <div class="pixel"></div>
        <div class="pixel"></div>
    </div>
    
    <div class="info">
        This HTML page is being rendered directly to the Linux framebuffer (/dev/fb0) 
        without any window manager, desktop environment, or browser window. 
        Pure pixel control achieved!
    </div>
    
    <script>
        // Add some dynamic behavior
        document.addEventListener('DOMContentLoaded', function() {
            const pixels = document.querySelectorAll('.pixel');
            pixels.forEach((pixel, index) => {
                pixel.style.animationDelay = `${index * 0.2}s`;
            });
        });
    </script>
</body>
</html>