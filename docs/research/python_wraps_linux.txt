# Using the Python Wrapper (`execute_code.py`) to Run Linux‑Style Applications

This guide explains how to use the `execute_code.py` Python wrapper to unpack, initialize, and run applications (e.g., a minimal Ubuntu rootfs) in a user‑space Linux environment. It covers prerequisites, initialization, running commands, and cleanup.

---

## Table of Contents

1. [Prerequisites](#prerequisites)
2. [Embedding the Compressed Rootfs](#embedding-the-compressed-rootfs)
3. [Initializing the Guest Environment](#initializing-the-guest-environment)

   * `init_guest()`
4. [Running Commands Inside the Guest](#running-commands-inside-the-guest)

   * `run_in_guest(cmd: List[str])`
5. [Shutting Down the Guest](#shutting-down-the-guest)

   * `shutdown_guest()`
6. [Example Workflow](#example-workflow)
7. [Tips & Troubleshooting](#tips--troubleshooting)

---

## 1. Prerequisites

* **Host Requirements**:

  * A Linux host (any modern distribution) with Python 3.x installed.
  * Support for Linux user namespaces (unprivileged namespaces) or a non‑root user with `CAP_SYS_ADMIN` to create namespaces.
  * Standard Python modules only (no external dependencies beyond `lzma`, `gzip`, `os`, `subprocess`, etc.).
  * Sufficient RAM/disk space to unpack a small Ubuntu rootfs (≥200 MB free).

* **File System**:

  * A compressed, pruned Ubuntu rootfs (e.g., tar.xz) or a minimal rootfs embedded as a byte literal in `execute_code.py`.
  * The wrapper script will write this to a temporary location (e.g., `/dev/shm/ubuntu_rootfs.tar.xz`) and unpack it.

* **Network (Optional)**:

  * If network access from inside the guest is desired, ensure the host permits namespace network creation or port forwarding.

* **Permissions**:

  * The user running `execute_code.py` must have permission to create unprivileged namespaces or run `chroot` via `sudo`.

---

## 2. Embedding the Compressed Rootfs

Inside `execute_code.py`, the compressed rootfs payload is included as a Python byte literal. Typically, it looks like this near the top of the file:

```python
# ----------------------------------------------------------
# Embedded rootfs: pruned Ubuntu 22.04, compressed with XZ
# Size (compressed): ~5.2 MB
# ----------------------------------------------------------
import lzma
import base64

# Base64‑encoded XZ payload (truncated for brevity)
EMBEDDED_ROOTFS = b"""
/VQMAH//8AAAAUAGIqAAAAxEAB/.... (very long base64 string)....==
"""

# Function to decode & write payload to disk:
def _write_rootfs_to_disk(target_path: str):
    compressed_data = base64.b64decode(EMBEDDED_ROOTFS)
    with open(target_path, "wb") as f:
        f.write(compressed_data)

# ----------------------------------------------------------
```

* **Details**:

  * The script uses `base64` to embed arbitrary binary data inside a UTF‑8 string.
  * At runtime, it decodes into raw XZ bytes, writes to a temporary file (e.g., `/dev/shm/ubuntu_rootfs.tar.xz`).
  * Then it calls `lzma` to decompress or `subprocess` to run `tar -xJf`.

> **Note:** You may also embed a gzipped tarball (`.tar.gz`) and use `gzip` or Python’s `tarfile` module. XZ generally yields better compression ratios.

---

## 3. Initializing the Guest Environment

### `init_guest()`

**Purpose:**
Unpack the embedded rootfs into a temporary directory and set up a sandboxed environment using Linux namespaces (or `proot`). After this call, the guest filesystem is mounted and ready to run commands.

**Implementation Outline:**

```python
import os
import subprocess
import tempfile
import shutil

# Globals for paths and PIDs
_guest_rootfs_dir = None
_guest_process = None


def init_guest():
    """
    1. Create a temporary directory.
    2. Decode and decompress the embedded rootfs into that directory.
    3. Use user namespaces (unshare) or proot to pivot_root or chroot into guest.
    4. Keep track of the namespace or proot process for cleanup.
    """
    global _guest_rootfs_dir, _guest_process

    # 1. Make a temp directory (e.g., in /dev/shm for speed)
    _guest_rootfs_dir = tempfile.mkdtemp(prefix="ubuntu_guest_")

    # 2. Write and decompress embedded rootfs
    rootfs_archive_path = os.path.join(_guest_rootfs_dir, "rootfs.tar.xz")
    _write_rootfs_to_disk(rootfs_archive_path)
    subprocess.run(["tar", "-xJf", rootfs_archive_path, "-C", _guest_rootfs_dir], check=True)

    # 3. Set up a user namespace and pivot_root into the new rootfs
    #    Using `unshare --mount --uts --ipc --pid --fork --mount-proc` to isolate
    cmd = [
        "unshare",
        "--fork",
        "--pid",
        "--mount",
        "--uts",
        "--ipc",
        "--mount-proc",
        "--","    # End of unshare flags
        "/bin/bash",  # Launch a shell in the new namespaces
        "-c",         # Immediately pivot_root and sleep forever (daemonize)
        f"mount --bind { _guest_rootfs_dir } /mnt && \
         cd /mnt && \
         pivot_root . oldroot && \
         mount -t proc proc /proc && \
         exec sleep infinity"
    ]

    _guest_process = subprocess.Popen(cmd)
    # Wait a moment to ensure pivot_root has completed
    # (in production, check readiness more robustly)
    import time; time.sleep(1)

    print("[init_guest] Guest environment ready at", _guest_rootfs_dir)
```

* **Details:**

  * `tempfile.mkdtemp()` creates an isolated directory for unpacked files.
  * `unshare` with `--mount` and `--pid` creates a separate mount and PID namespace. Inside that, we bind‑mount the guest rootfs over `/mnt`, pivot\_root into it, and mount a fresh `/proc`.
  * We then `exec sleep infinity` to keep the namespace alive; the PID of this sleeper is stored in `_guest_process` for future cleanup.

> **Alternative:** If `unshare` or `pivot_root` isn’t available to unprivileged users, use `proot`:
>
> ```bash
> proot --root-id -0 -r /path/to/guest_rootfs /usr/bin/env -i /bin/bash -c 'sleep infinity'
> ```
>
> Replace the `cmd` list accordingly.

---

## 4. Running Commands Inside the Guest

### `run_in_guest(cmd: List[str]) -> (exit_code, stdout, stderr)`

**Purpose:**
Execute an arbitrary command inside the running guest environment and capture its output.

**Implementation Outline:**

```python
import subprocess
import os

def run_in_guest(cmd):
    """
    Run a command inside the guest namespace using `nsenter` or by communicating with the pivoted root.

    Args:
      cmd: List of strings representing the command and its arguments.
    Returns:
      (exit_code, stdout_str, stderr_str)
    """
    global _guest_process, _guest_rootfs_dir

    if _guest_process is None:
        raise RuntimeError("Guest not initialized. Call init_guest() first.")

    # Determine the PID of our sleeper process (the namespace leader)
    ns_pid = _guest_process.pid

    # Build the `nsenter` command to enter mount/pid/uts/ipc namespaces
    full_cmd = [
        "nsenter",
        f"--target={ns_pid}",
        "--mount", "--pid", "--uts", "--ipc", "--proc",  # Enter all relevant namespaces
        "--",
        *cmd
    ]

    # Launch and capture output
    proc = subprocess.Popen(full_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = proc.communicate()
    exit_code = proc.returncode

    return exit_code, out.decode("utf-8", errors="ignore"), err.decode("utf-8", errors="ignore")
```

* **Details:**

  * We use `nsenter` to re-enter the same namespaces as the sleeper process (`_guest_process.pid`).
  * The command (`cmd`) runs inside the guest root; e.g., `run_in_guest(["/bin/ls", "/"])` lists rootfs contents.
  * We capture `stdout` and `stderr` as UTF‑8 strings.

> **Note:** If using `proot` instead of namespaces, you can run:
>
> ```python
> full_cmd = ["proot", "-0", "-r", _guest_rootfs_dir, *cmd]
> ```
>
> and omit `nsenter` entirely.

---

## 5. Shutting Down the Guest

### `shutdown_guest()`

**Purpose:**
Clean up the guest environment: terminate the namespace process, unmount any bind mounts, and delete the temporary directory.

**Implementation Outline:**

```python
import signal
import shutil

def shutdown_guest():
    """
    1. Kill the guest sleeper process (namespace leader).
    2. Unmount any bind mounts (if still present).
    3. Remove the temporary rootfs directory.
    """
    global _guest_process, _guest_rootfs_dir

    if _guest_process:
        _guest_process.send_signal(signal.SIGTERM)
        _guest_process.wait(timeout=5)
        _guest_process = None

    # Attempt to unmount oldroot and proc if they exist
    try:
        subprocess.run(["umount", os.path.join(_guest_rootfs_dir, "oldroot/proc")], check=False)
        subprocess.run(["umount", _guest_rootfs_dir], check=False)
    except Exception:
        pass

    # Delete the temporary directory
    if _guest_rootfs_dir and os.path.isdir(_guest_rootfs_dir):
        shutil.rmtree(_guest_rootfs_dir)
        _guest_rootfs_dir = None

    print("[shutdown_guest] Guest environment cleaned up.")
```

* **Details:**

  * We send `SIGTERM` to the sleeper process to destroy the namespace.
  * We attempt to unmount any lingering bind mounts (`oldroot`, `/proc`). On many systems, unmounting the top-level mount will auto‑clean submounts.
  * Finally, `shutil.rmtree()` removes all extracted files.

---

## 6. Example Workflow

Below is a step‑by‑step example showing how a user of `execute_code.py` would invoke the API to run a simple “Hello” command inside Ubuntu.

```python
# 1. Import the wrapper
import execute_code

# 2. Initialize the guest
execute_code.init_guest()

# 3. Run a basic command
exit_code, stdout, stderr = execute_code.run_in_guest(["bash", "-c", "echo Hello from Ubuntu"])
print("Exit code:", exit_code)
print("STDOUT:", stdout)
print("STDERR:", stderr)
# Expected output:
# Exit code: 0
# STDOUT: Hello from Ubuntu
# STDERR: (empty)

# 4. Run another command (e.g., list /bin)
exit_code, out, err = execute_code.run_in_guest(["/bin/ls", "/bin"])
print(out)

# 5. Once done, clean up\execute_code.shutdown_guest()
```

* **Notes:**

  * If you plan to run multiple commands, you can call `run_in_guest(...)` repeatedly before shutting down.
  * For interactive use, you could spawn a login shell:

    ```python
    exit_code, out, err = execute_code.run_in_guest(["bash"])
    ```

    but capturing interactive I/O is more complex; use a PTY or SSH‑like interface if needed.

---

## 7. Tips & Troubleshooting

* **Namespace Errors (`unshare` fails)**

  * Ensure your Linux kernel allows unprivileged namespaces. Check:

    ```bash
    sysctl kernel.unprivileged_userns_clone
    ```
  * If it’s `0`, temporarily enable:

    ```bash
    sudo sysctl -w kernel.unprivileged_userns_clone=1
    ```
  * If root privileges are required, either run as `sudo` or switch to `proot`.

* **`nsenter` Not Found**

  * Install `util-linux` (which provides `nsenter`) or adjust your PATH.
  * Alternatively, use a direct `chroot` if you have `CAP_SYS_CHROOT`.

* **Mount/Unmount Failures**

  * If `pivot_root` or unmounting fails, double‑check you are in the correct mount namespace. Use `mount | grep <guest_dir>` to list mounts.
  * You can also force‑unmount with `umount -l <path>`.

* **Performance Considerations**

  * Extracting a full rootfs into `/dev/shm` is memory‑intensive. If insufficient RAM, use a disk‑based temp dir (e.g., `/tmp`).
  * Running a full Ubuntu in user space may be slower than native. For lightweight testing, use a minimal BusyBox rootfs.

* **Debugging Inside the Guest**

  * To inspect the guest filesystem directly, open another terminal and use:

    ```bash
    ls /proc/<guest_pid>/root
    ```
  * You can also spawn a temporary shell:

    ```bash
    run_in_guest(["bash", "-c", "apt update; apt install -y nano"])
    ```

* **Security**

  * The guest has limited privileges by default, but never drop below the minimum host‑controlled resources.
  * Restrict memory and CPU with cgroups (if available). Example:

    ```bash
    cgcreate -g memory,cpu:guestgroup
    cgset -r memory.limit_in_bytes=512M guestgroup
    cgexec -g memory,cpu:guestgroup python execute_code.py
    ```

---

With this document, you should have everything needed to leverage `execute_code.py` as a Python‑only wrapper for booting and running Linux‑style applications. You can adapt the rootfs, namespace strategy, and command API to fit your environment and security requirements.

Happy hacking!
