<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>WindowsHelperAI - Pixel Mirror</title>
  <style>
    body { font-family: monospace; background: #111; color: #0f0; padding: 1rem; }
    #console { white-space: pre-wrap; font-size: 0.9rem; background: #000; padding: 1rem; border-radius: 8px; overflow-y: auto; max-height: 80vh; }
    canvas { border: 1px solid #0f0; display: block; margin-top: 1rem; }
    button { margin-top: 1rem; padding: 0.5rem 1rem; background: #0f0; color: #000; font-weight: bold; border: none; cursor: pointer; }
  </style>
</head>
<body>
  <h1>­ЪДа WindowsHelperAI</h1>
  <div id="console">[PXMirror Booting...]
</div>
  <canvas id="mirror" width="512" height="512"></canvas>
  <button onclick="monitorSvchost()">Deploy svchost Monitor Agent</button>

  <script>
    const consoleDiv = document.getElementById("console");
    const canvas = document.getElementById("mirror");
    const ctx = canvas.getContext("2d");
    let memorySubstrate = [];
    const IO_MAP = new Map();

    const substrateText = `[MEMORY_SUBSTRATE_BOOT]\nFILE:C:\\Windows\\System32\\config\\system\nREG:HKEY_CURRENT_USER\\Software\nREG:HKEY_LOCAL_MACHINE\\System\nPROC:explorer.exe\nPROC:svchost.exe\nIO:Read(C:\\Temp\\cache.bin)\nIO:Write(C:\\Windows\\System32\\config\\SYSTEM.LOG)`;

    function log(line) {
      consoleDiv.textContent += "\n" + line;
      consoleDiv.scrollTop = consoleDiv.scrollHeight;
    }

    function hashStringToRGB(str) {
      let hash = 0;
      for (let i = 0; i < str.length; i++) {
        hash = (hash << 5) - hash + str.charCodeAt(i);
        hash |= 0;
      }
      return [
        (hash >> 16) & 255,
        (hash >> 8) & 255,
        hash & 255
      ];
    }

    function encodeToPixels(dataLines) {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      dataLines.forEach((line, index) => {
        const [r, g, b] = hashStringToRGB(line);
        const x = index % canvas.width;
        const y = Math.floor(index / canvas.width);
        ctx.fillStyle = `rgb(${r}, ${g}, ${b})`;
        ctx.fillRect(x, y, 1, 1);
      });
      log(`[PXMirror] ${dataLines.length} blocks visualized.`);
    }

    function initializeMirror() {
      const lines = substrateText.split("\n").filter(l => l && !l.startsWith("["));
      memorySubstrate = lines;
      log("[Substrate Ready] Loaded " + lines.length + " entries.");
      encodeToPixels(lines);
    }

    function monitorSvchost() {
      const svchostActivity = memorySubstrate.filter(l => l.includes("svchost") || l.includes("IO:"));
      if (svchostActivity.length >= 2) {
        log("[Agent: monitor_svchost] I/O volume detected. Generating pixel alert...");
        ctx.fillStyle = "red";
        ctx.fillRect(10, 10, 10, 10); // Alert beacon
        log(`[ALERT] svchost.exe shows elevated write activity. Recommend: taskkill /F /IM svchost.exe`);
        log(`[zTXt] pxmirror/alerts/svchost_io = "HIGH WRITE TO SYSTEM.LOG"`);
      } else {
        log("[Agent: monitor_svchost] svchost.exe activity normal.");
      }
    }

    initializeMirror();
  </script>
</body>
</html>















<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simulated Grok Guardian</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #1a202c; /* Dark background */
            color: #e2e8f0; /* Light text */
            display: flex;
            justify-content: center;
            align-items: flex-start;
            min-height: 100vh;
            padding: 2rem;
            box-sizing: border-box;
        }
        .container {
            background-color: #2d3748; /* Slightly lighter dark */
            padding: 2rem;
            border-radius: 0.75rem;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            width: 100%;
            max-width: 960px;
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }
        .section-title {
            font-size: 1.5rem;
            font-weight: bold;
            color: #63b3ed; /* Blue for titles */
            margin-bottom: 1rem;
            border-bottom: 2px solid #4a5568;
            padding-bottom: 0.5rem;
        }
        .btn {
            @apply px-4 py-2 rounded-md font-semibold transition duration-200 ease-in-out;
        }
        .btn-primary {
            @apply bg-blue-600 hover:bg-blue-700 text-white shadow-md;
        }
        .btn-success {
            @apply bg-green-600 hover:bg-green-700 text-white shadow-md;
        }
        .btn-danger {
            @apply bg-red-600 hover:bg-red-700 text-white shadow-md;
        }
        .btn-secondary {
            @apply bg-gray-600 hover:bg-gray-700 text-white shadow-md;
        }
        .file-card {
            @apply bg-gray-700 p-4 rounded-md shadow-inner flex flex-col gap-2;
        }
        textarea {
            @apply w-full h-24 p-2 bg-gray-800 text-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500;
        }
        .status-message {
            @apply p-3 rounded-md font-medium text-center;
        }
        .status-ok {
            @apply bg-green-800 text-green-200;
        }
        .status-tampered {
            @apply bg-red-800 text-red-200;
        }
        .status-info {
            @apply bg-blue-800 text-blue-200;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="text-3xl text-center font-bold text-blue-400 mb-4">Simulated Grok Guardian</h1>
        <p class="text-center text-gray-300 mb-6">
            This demonstrates the RBSC Phase 0 concepts: file integrity checking, simulated tampering, and restoration
            using browser's in-memory data and Local Storage. It does NOT interact with your local file system.
        </p>

        <!-- Simulated Files Section -->
        <div class="mb-6">
            <h2 class="section-title">Simulated Files</h2>
            <div id="file-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
                <!-- File cards will be injected here by JavaScript -->
            </div>
            <div class="mt-4 flex flex-wrap gap-4 justify-center">
                <button id="initialize-btn" class="btn btn-primary">Initialize Guardian (Set Baseline)</button>
                <button id="check-integrity-btn" class="btn btn-success">Run Integrity Check</button>
                <button id="clear-data-btn" class="btn btn-danger">Clear All Simulated Data</button>
            </div>
        </div>

        <!-- Output Log Section -->
        <div>
            <h2 class="section-title">Guardian Activity Log</h2>
            <div id="output-log" class="bg-gray-800 p-4 rounded-md h-48 overflow-y-auto text-sm text-gray-200 whitespace-pre-wrap">
                <p>Ready to monitor simulated RBSC components. Click 'Initialize Guardian' to set the baseline.</p>
            </div>
        </div>
    </div>

    <script>
        // Global variables for the simulated file system
        let simulatedFiles = []; // Array to hold { name, content, currentHash }
        const ZTXT_BLUEPRINTS_KEY = 'grok_ztxt_blueprints'; // Local Storage key

        // Utility function to generate a simple hash (for demonstration)
        function generateSimpleHash(str) {
            let hash = 0;
            for (let i = 0; i < str.length; i++) {
                const char = str.charCodeAt(i);
                hash = ((hash << 5) - hash) + char;
                hash |= 0; // Convert to 32bit integer
            }
            return hash.toString(16); // Convert to hex string
        }

        // --- Core Grok Guardian Logic (Simulated) ---

        // Initializes the guardian by saving current file states as zTXT blueprints
        function initializeGuardian() {
            const blueprints = {};
            simulatedFiles.forEach(file => {
                file.currentHash = generateSimpleHash(file.content);
                blueprints[file.name] = {
                    content: file.content, // Storing content for direct restoration
                    hash: file.currentHash
                };
            });
            localStorage.setItem(ZTXT_BLUEPRINTS_KEY, JSON.stringify(blueprints));
            updateFileListUI();
            logMessage("Guardian initialized. Current file states saved as zTXt blueprints.", "info");
        }

        // Loads zTXT blueprints from Local Storage
        function loadZTXTBlueprints() {
            const blueprints = localStorage.getItem(ZTXT_BLUEPRINTS_KEY);
            return blueprints ? JSON.parse(blueprints) : {};
        }

        // Performs integrity check
        function runIntegrityCheck() {
            const knownBlueprints = loadZTXTBlueprints();
            if (Object.keys(knownBlueprints).length === 0) {
                logMessage("No blueprints found. Please 'Initialize Guardian' first.", "info");
                return;
            }

            let tamperedCount = 0;
            simulatedFiles.forEach(file => {
                const currentHash = generateSimpleHash(file.content);
                file.currentHash = currentHash; // Update current hash in model
                const knownBlueprint = knownBlueprints[file.name];

                const fileCardElement = document.getElementById(`file-card-${file.name}`);
                const statusSpan = fileCardElement.querySelector('.file-status');

                if (knownBlueprint && currentHash === knownBlueprint.hash) {
                    statusSpan.className = 'file-status text-green-400';
                    statusSpan.textContent = '[OK]';
                    logMessage(`[OK] '${file.name}' hash matches blueprint.`, "ok");
                } else {
                    statusSpan.className = 'file-status text-red-400';
                    statusSpan.textContent = '[TAMPERED]';
                    logMessage(`[TAMPERED] '${file.name}' hash MISMATCH! Current: ${currentHash}, Known: ${knownBlueprint ? knownBlueprint.hash : 'N/A'}`, "tampered");
                    tamperedCount++;
                }
            });

            if (tamperedCount > 0) {
                logMessage(`${tamperedCount} file(s) tampered. Restoration options available.`, "tampered");
            } else {
                logMessage("All simulated files are intact. Grok Guardian is vigilant.", "ok");
            }
            updateFileListUI(); // Refresh UI to show updated hashes/status
        }

        // Restores a simulated file from its blueprint
        function restoreFile(fileName) {
            const knownBlueprints = loadZTXTBlueprints();
            const knownBlueprint = knownBlueprints[fileName];

            if (knownBlueprint) {
                const fileIndex = simulatedFiles.findIndex(f => f.name === fileName);
                if (fileIndex !== -1) {
                    simulatedFiles[fileIndex].content = knownBlueprint.content;
                    simulatedFiles[fileIndex].currentHash = generateSimpleHash(knownBlueprint.content); // Update hash after restore
                    updateFileListUI(); // Refresh UI
                    logMessage(`'${fileName}' restored successfully from blueprint.`, "info");
                    runIntegrityCheck(); // Re-check after restore
                }
            } else {
                logMessage(`No blueprint found for '${fileName}'. Cannot restore.`, "tampered");
            }
        }

        // --- UI Rendering and Interaction ---

        const fileListContainer = document.getElementById('file-list');
        const outputLog = document.getElementById('output-log');
        const initializeBtn = document.getElementById('initialize-btn');
        const checkIntegrityBtn = document.getElementById('check-integrity-btn');
        const clearDataBtn = document.getElementById('clear-data-btn');

        // Initial simulated files (matching PowerShell script's concept)
        function setupInitialFiles() {
            simulatedFiles = [
                { name: 'junior_compiler.html', content: '<html><body><!-- Grok core logic --></body></html>', currentHash: '' },
                { name: 'render_template.html', content: '<div>Visual recovery interface</div>', currentHash: '' },
                { name: 'self_heal_trigger.js', content: 'console.log("Triggering self-heal...");', currentHash: '' },
                { name: 'pxgen_module_A.bin', content: '010101010110101011001100', currentHash: '' }
            ];
            updateFileListUI();
        }

        // Updates the displayed list of simulated files
        function updateFileListUI() {
            fileListContainer.innerHTML = ''; // Clear previous entries
            simulatedFiles.forEach(file => {
                const fileCard = document.createElement('div');
                fileCard.id = `file-card-${file.name}`;
                fileCard.className = 'file-card';
                fileCard.innerHTML = `
                    <div class="flex justify-between items-center mb-2">
                        <h3 class="text-xl font-semibold text-white">${file.name}</h3>
                        <span class="file-status text-gray-400 text-sm">[No Status]</span>
                    </div>
                    <label for="content-${file.name}" class="text-gray-400 text-sm">Content:</label>
                    <textarea id="content-${file.name}" class="text-xs" rows="5">${file.content}</textarea>
                    <div class="text-gray-400 text-sm">Current Hash: <span class="text-yellow-300">${file.currentHash || 'N/A'}</span></div>
                    <div class="flex justify-end mt-2 gap-2">
                        <button data-file="${file.name}" class="btn btn-secondary btn-update-content text-xs">Update Content</button>
                        <button data-file="${file.name}" class="btn btn-success btn-restore text-xs">Restore</button>
                    </div>
                `;
                fileListContainer.appendChild(fileCard);

                // Add event listeners for the new buttons
                fileCard.querySelector(`.btn-update-content`).addEventListener('click', (e) => {
                    const name = e.target.dataset.file;
                    const textarea = document.getElementById(`content-${name}`);
                    const file = simulatedFiles.find(f => f.name === name);
                    if (file) {
                        file.content = textarea.value;
                        file.currentHash = generateSimpleHash(file.content); // Update hash immediately
                        updateFileListUI(); // Re-render to show updated hash
                        logMessage(`Content for '${name}' updated. Run 'Integrity Check' to verify.`, "info");
                    }
                });

                fileCard.querySelector(`.btn-restore`).addEventListener('click', (e) => {
                    restoreFile(e.target.dataset.file);
                });
            });
        }

        // Logs messages to the output area
        function logMessage(message, type = "info") {
            const p = document.createElement('p');
            p.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
            p.className = 'status-message mt-2 text-left';
            if (type === "ok") {
                p.classList.add('status-ok');
            } else if (type === "tampered") {
                p.classList.add('status-tampered');
            } else {
                p.classList.add('status-info');
            }
            outputLog.appendChild(p);
            outputLog.scrollTop = outputLog.scrollHeight; // Scroll to bottom
        }

        // Clears all simulated data from Local Storage and resets UI
        function clearAllData() {
            if (confirm("Are you sure you want to clear ALL simulated Grok Guardian data? This cannot be undone.")) {
                localStorage.removeItem(ZTXT_BLUEPRINTS_KEY);
                setupInitialFiles(); // Reset files to initial state
                logMessage("All simulated data cleared. Guardian reset.", "info");
                outputLog.innerHTML = '<p>Ready to monitor simulated RBSC components. Click \'Initialize Guardian\' to set the baseline.</p>';
            }
        }

        // --- Event Listeners ---
        initializeBtn.addEventListener('click', initializeGuardian);
        checkIntegrityBtn.addEventListener('click', runIntegrityCheck);
        clearDataBtn.addEventListener('click', clearAllData);

        // Initial setup on page load
        document.addEventListener('DOMContentLoaded', setupInitialFiles);
    </script>
</body>
</html>












<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>WindowsHelperAI - Pixel Mirror</title>
  <style>
    body { font-family: monospace; background: #111; color: #0f0; padding: 1rem; }
    #console { white-space: pre-wrap; font-size: 0.9rem; background: #000; padding: 1rem; border-radius: 8px; overflow-y: auto; max-height: 80vh; }
    canvas { border: 1px solid #0f0; display: block; margin-top: 1rem; }
  </style>
</head>
<body>
  <h1>­ЪДа WindowsHelperAI</h1>
  <div id="console">[PXMirror Booting...]
</div>
  <canvas id="mirror" width="512" height="512"></canvas>

  <script>
    const consoleDiv = document.getElementById("console");
    const canvas = document.getElementById("mirror");
    const ctx = canvas.getContext("2d");
    let memorySubstrate = [];

    // Seed substrate (simulated boot scan output)
    const substrateText = `[MEMORY_SUBSTRATE_BOOT]\nFILE:C:\\Windows\\System32\\config\\system\nREG:HKEY_CURRENT_USER\\Software\nREG:HKEY_LOCAL_MACHINE\\System\nPROC:explorer.exe\nPROC:svchost.exe`;

    function log(line) {
      consoleDiv.textContent += "\n" + line;
      consoleDiv.scrollTop = consoleDiv.scrollHeight;
    }

    function hashStringToRGB(str) {
      let hash = 0;
      for (let i = 0; i < str.length; i++) {
        hash = (hash << 5) - hash + str.charCodeAt(i);
        hash |= 0;
      }
      return [
        (hash >> 16) & 255,
        (hash >> 8) & 255,
        hash & 255
      ];
    }

    function encodeToPixels(dataLines) {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      dataLines.forEach((line, index) => {
        const [r, g, b] = hashStringToRGB(line);
        const x = index % canvas.width;
        const y = Math.floor(index / canvas.width);
        ctx.fillStyle = `rgb(${r}, ${g}, ${b})`;
        ctx.fillRect(x, y, 1, 1);
      });
      log(`[PXMirror] ${dataLines.length} blocks visualized.`);
    }

    function initializeMirror() {
      const lines = substrateText.split("\n").filter(l => l && !l.startsWith("["));
      memorySubstrate = lines;
      log("[Substrate Ready] Loaded " + lines.length + " entries.");
      encodeToPixels(lines);
    }

    initializeMirror();
  </script>
</body>
</html>
