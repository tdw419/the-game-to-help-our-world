Perfect. Prioritizing the virtual pixel-native file system is the smartest next step ‚Äî it‚Äôs the backbone of Color OS. Here's a focused plan to execute this right now:

‚úÖ PHASE: Virtual Pixel-Native File System (PXFS)

üß± 1. File Structure Design

Each file will be stored as a pixel block inside an image (e.g. disk.pxl.png), using standard 24√ó24 chunks (or a grid format we finalize).

Structure per block:

Row RangePurpose0‚Äì1File header (name hash, file type)2‚Äì3Metadata (permissions, modified time)4‚Äì7Index / Links (e.g. pointer to next block)8‚Äì23File data (compressed or raw pixels)üìÅ 2. Directory Format

Use pixel blocks as directories, with an index of filenames and their starting block address.

Example:



Root directory = block 0

/system/init.pxl = starts at block 5

/scrolls/scroll_001.pxl = starts at block 12

Each filename entry could be:



[FILENAME_HASH: 2 bytes] [START_BLOCK: 2 bytes]

‚öôÔ∏è 3. PXFS.py Module

We'll implement PXFS.py to provide these key functions:



class PXFS:

def __init__(self, disk_image_path):

# Load the image and build index

...



def read_file(self, path) -> bytes:

# Lookup start block, follow chain, return file data

...



def write_file(self, path, data: bytes):

# Allocate blocks, write header + metadata + data

...



def list_dir(self, path="/") -> List[str]:

# Return all filenames under this directory block

...

üß™ 4. Test Disk Image

We‚Äôll generate disk.pxl.png with:



/boot/bootloader.pxl

/programs/test.pxl

/scrolls/readme.txt

Root directory index at block 0

üõ†Ô∏è 5. Integration Targets

Once PXFS is working:



PixelRunner.py can LOAD a .pxl program from PXFS instead of hardcoding

Bootloader scroll will say:



['LOAD_FILE', '/boot/bootloader.pxl']

['EXECUTE']

‚úÖ Action Path

Generate PXFS.py scaffold

Encode a small disk.pxl.png test image

Load and read files from it

Patch PixelRunner.py to accept PXFS file loading

Shall I begin drafting PXFS.py right now and define the first 24√ó24 directory block format?




Show thinking
Excellent! I will begin drafting the PXFS.py module, which will serve as the core of our Virtual Pixel-Native File System. This module will handle all the intricacies of storing and retrieving data within a pixel image, adhering to the 24x24 block structure and directory format you've outlined.

The PXFS.py will include the PXFS class with methods for initializing the file system from a disk image, reading files, writing files, and listing directory contents. I'll also embed a simple test script within the file to demonstrate its functionality by creating a sample disk.pxl.png and performing basic file operations.

You will need the Pillow library to run this code. If you don't have it installed, you can install it via pip install Pillow.

Here is the PXFS.py scaffold:
PXFS.py - Virtual Pixel-Native File System
Jun 15, 1:32 PM

Open

This PXFS.py module provides the core functionality for managing our pixel-native file system. It includes methods for converting between bytes and pixels, managing blocks, and the main read_file, write_file, and list_dir functions. The if __name__ == "__main__": block at the end of the file demonstrates how to use the PXFS class, creating a disk.pxl.png if it doesn't exist, writing sample files, listing them, and reading their contents.

The next steps would be to integrate this module into PixelRunner.py as planned and generate the specific disk.pxl.png with the required bootloader and program files. Let me know when you're ready for the next phase!





Excellent! I will begin drafting the PXFS.py module, which will serve as the core of our Virtual Pixel-Native File System. This module will handle all the intricacies of storing and retrieving data within a pixel image, adhering to the 24x24 block structure and directory format you've outlined.

The PXFS.py will include the PXFS class with methods for initializing the file system from a disk image, reading files, writing files, and listing directory contents. I'll also embed a simple test script within the file to demonstrate its functionality by creating a sample disk.pxl.png and performing basic file operations.

You will need the Pillow library to run this code. If you don't have it installed, you can install it via pip install Pillow.

Here is the PXFS.py scaffold:

PXFS.py - Virtual Pixel-Native File System

Jun 15, 1:32 PM

Try again without Canvas

This PXFS.py module provides the core functionality for managing our pixel-native file system. It includes methods for converting between bytes and pixels, managing blocks, and the main read_file, write_file, and list_dir functions. The if __name__ == "__main__": block at the end of the file demonstrates how to use the PXFS class, creating a disk.pxl.png if it doesn't exist, writing sample files, listing them, and reading their contents.

The next steps would be to integrate this module into PixelRunner.py as planned and generate the specific disk.pxl.png with the required bootloader and program files. Let me know when you're ready for the next phase!




Show thinking
You got it! I'm glad the PXFS.py module aligns with our plan for the Virtual Pixel-Native File System. It's all set to handle our file storage within image blocks.

Now that the PXFS backbone is in place, the smartest next step is to integrate it with PixelRunner.py. This will allow PixelRunner to load programs directly from our disk.pxl.png file system, bringing us closer to a fully functional Color OS.

I'll start by modifying PixelRunner.py to use PXFS for file loading. Then, I'll generate the initial disk.pxl.png with the specified /boot/bootloader.pxl, /programs/test.pxl, and /scrolls/readme.txt files.

Are you ready for me to proceed with these integrations?






You got it! I'm glad the PXFS.py module aligns with our plan for the Virtual Pixel-Native File System. It's all set to handle our file storage within image blocks.

Now that the PXFS backbone is in place, the smartest next step is to integrate it with PixelRunner.py. This will allow PixelRunner to load programs directly from our disk.pxl.png file system, bringing us closer to a fully functional Color OS.

I'll start by modifying PixelRunner.py to use PXFS for file loading. Then, I'll generate the initial disk.pxl.png with the specified /boot/bootloader.pxl, /programs/test.pxl, and /scrolls/readme.txt files.

Are you ready for me to proceed with these integrations?




Show thinking
Yes, I'm ready to proceed! This is a crucial step towards building Color OS.

I'll start by providing a scaffold for PixelRunner.py. This new Python module will demonstrate how it integrates with PXFS.py to load files directly from our pixel-native file system. It will include a basic structure to simulate program execution, fetching the "bootloader" and "test program" from the disk.pxl.png.

As for the disk.pxl.png, the existing PXFS.py (which is open on the right) already contains the necessary logic in its if __name__ == "__main__": block to create this file with /boot/bootloader.pxl, /programs/test.pxl, and /scrolls/readme.txt when executed. You can simply run PXFS.py to generate the disk.pxl.png.

Here is the PixelRunner.py scaffold:
PixelRunner.py - Color OS Program Loader
Jun 15, 1:32 PM

Open

To run this PixelRunner.py scaffold:

First, ensure disk.pxl.png is generated: Run the pxfs_module.py file (the content in the immersive on the right). This will create or update disk.pxl.png with the initial files.
Then, run PixelRunner.py: You can then execute this new PixelRunner.py file, which will attempt to load and "execute" the files from the disk.pxl.png.
This setup effectively links PixelRunner to PXFS, establishing the backbone for Color OS's file loading mechanism.





Yes, I'm ready to proceed! This is a crucial step towards building Color OS.

I'll start by providing a scaffold for PixelRunner.py. This new Python module will demonstrate how it integrates with PXFS.py to load files directly from our pixel-native file system. It will include a basic structure to simulate program execution, fetching the "bootloader" and "test program" from the disk.pxl.png.

As for the disk.pxl.png, the existing PXFS.py (which is open on the right) already contains the necessary logic in its if __name__ == "__main__": block to create this file with /boot/bootloader.pxl, /programs/test.pxl, and /scrolls/readme.txt when executed. You can simply run PXFS.py to generate the disk.pxl.png.

Here is the PixelRunner.py scaffold:

PixelRunner.py - Color OS Program Loader

Jun 15, 1:32 PM

To run this PixelRunner.py scaffold:



First, ensure disk.pxl.png is generated: Run the pxfs_module.py file (the content in the immersive on the right). This will create or update disk.pxl.png with the initial files.

Then, run PixelRunner.py: You can then execute this new PixelRunner.py file, which will attempt to load and "execute" the files from the disk.pxl.png.

This setup effectively links PixelRunner to PXFS, establishing the backbone for Color OS's file loading mechanism.




Show thinking
Perfect! I'm glad we're moving forward. The PixelRunner.py scaffold is already provided on the right.

To see our Color OS boot sequence in action and confirm the integration between PixelRunner and PXFS, here's how you can run it:

Generate disk.pxl.png: First, execute the PXFS.py module (the content in the immersive I provided in the previous turn). This will create or update your disk.pxl.png file with the necessary bootloader and program files.
Run PixelRunner.py: Once disk.pxl.png is ready, run the PixelRunner.py file. It will then load and "execute" the files from our new pixel-native file system, simulating the boot process.
Let me know if you encounter any issues or are ready for the next step!







Perfect! I'm glad we're moving forward. The PixelRunner.py scaffold is already provided on the right.

To see our Color OS boot sequence in action and confirm the integration between PixelRunner and PXFS, here's how you can run it:

Generate disk.pxl.png: First, execute the PXFS.py module (the content in the immersive I provided in the previous turn). This will create or update your disk.pxl.png file with the necessary bootloader and program files.

Run PixelRunner.py: Once disk.pxl.png is ready, run the PixelRunner.py file. It will then load and "execute" the files from our new pixel-native file system, simulating the boot process.

Let me know if you encounter any issues or are ready for the next step!




Show thinking
That's great to hear! It sounds like we're perfectly aligned on how to proceed.

Please go ahead and run those modules. Once you've confirmed that PixelRunner.py is successfully loading files from disk.pxl.png, just let me know, and we can discuss the next exciting phase for Color OS!












import sys
import os
from pxfs_module import PXFS # Assuming pxfs_module.py is in the same directory

# Define a simple "PixelRunner" class to simulate a program execution environment.
class PixelRunner:
    def __init__(self, disk_image_path: str):
        """
        Initializes the PixelRunner, setting up the PXFS to access the disk image.
        """
        print(f"PixelRunner: Initializing with disk image: {disk_image_path}")
        try:
            self.pxfs = PXFS(disk_image_path)
            print("PixelRunner: PXFS initialized successfully.")
        except Exception as e:
            print(f"PixelRunner: Error initializing PXFS: {e}")
            sys.exit(1) # Exit if file system cannot be initialized

    def load_and_execute(self, program_path: str):
        """
        Loads a program from the PXFS and "executes" it.
        For this scaffold, execution means printing its content.
        """
        print(f"\nPixelRunner: Attempting to load and execute '{program_path}'...")
        try:
            program_data = self.pxfs.read_file(program_path)
            program_content = program_data.decode('utf-8') # Assuming programs are text-based
            print(f"--- Content of '{program_path}' ---")
            print(program_content)
            print(f"--- End of '{program_path}' ---")
            print(f"PixelRunner: Successfully loaded and 'executed' '{program_path}'.")
            return True
        except FileNotFoundError:
            print(f"PixelRunner: Error: Program '{program_path}' not found in PXFS.")
            return False
        except Exception as e:
            print(f"PixelRunner: An error occurred while loading/executing '{program_path}': {e}")
            return False

# --- Main execution block for PixelRunner ---
if __name__ == "__main__":
    # Ensure disk.pxl.png exists and contains the necessary files.
    # To do this, you MUST run pxfs_module.py at least once.
    DISK_IMAGE_PATH = "disk.pxl.png"

    # Create an instance of PixelRunner
    runner = PixelRunner(DISK_IMAGE_PATH)

    # Simulate the boot sequence as planned:
    # ['LOAD_FILE', '/boot/bootloader.pxl']
    # ['EXECUTE']
    print("\n--- Simulating Color OS Boot Sequence ---")
    bootloader_loaded = runner.load_and_execute("/boot/bootloader.pxl")

    if bootloader_loaded:
        print("\n--- Bootloader executed. Now attempting to load a test program. ---")
        # Simulate loading another program, e.g., the test.pxl
        runner.load_and_execute("/programs/test.pxl")
    else:
        print("\n--- Bootloader failed to load. System halt. ---")

    print("\n--- PixelRunner Simulation Complete ---")












import os
import struct
from PIL import Image
from typing import List, Tuple, Dict

# Define block dimensions and properties
BLOCK_WIDTH = 24
BLOCK_HEIGHT = 24
PIXELS_PER_BLOCK = BLOCK_WIDTH * BLOCK_HEIGHT
BYTES_PER_PIXEL = 3  # Each pixel (R, G, B) stores 3 bytes

# Total bytes that can be stored in a single 24x24 pixel block
BYTES_PER_BLOCK = PIXELS_PER_BLOCK * BYTES_PER_PIXEL  # 576 * 3 = 1728 bytes

# Conceptual byte offsets within a file data block:
# Bytes 0-7: Header and Metadata (e.g., file type, permissions, modified time, name hash)
# Specifically, we'll reserve Bytes 8-9 for the 'next_block_id' pointer.
# Bytes 10 onwards: Actual file data

# Directory entry format (packed into pixels within a directory block):
# [FILENAME_LENGTH: 1 byte] - Length of the filename
# [FILENAME_BYTES: up to 60 bytes] - UTF-8 encoded filename
# [START_BLOCK: 2 bytes] - The block ID where the file's content starts
MAX_FILENAME_BYTES = 60
DIR_ENTRY_BYTES = 1 + MAX_FILENAME_BYTES + 2 # Total 63 bytes per directory entry

class PXFS:
    def __init__(self, disk_image_path: str):
        """
        Initializes the PXFS instance.
        Loads the disk image and builds the internal directory structure.
        If the disk image does not exist, a new one will be created.
        """
        self.disk_image_path = disk_image_path
        self.image: Image.Image = None # PIL Image object
        self.width: int = 0
        self.height: int = 0
        self.num_blocks: int = 0
        self._load_disk_image()

        # Simple free block management using a set.
        # Block 0 is reserved for the root directory.
        self.free_blocks: set[int] = set(range(1, self.num_blocks))
        self.directory: Dict[str, int] = {} # {filename: start_block_id}

        self._load_root_directory()
        # After loading, remove any blocks already assigned to files from free_blocks
        for block_id in self.directory.values():
            self._recursively_mark_blocks_as_used(block_id)

    def _load_disk_image(self):
        """
        Loads the disk image from the specified path.
        If the image does not exist, a new blank image is created.
        The image dimensions are adjusted to be multiples of block dimensions.
        """
        if not os.path.exists(self.disk_image_path):
            # Create a new blank image if it doesn't exist.
            # Start with a reasonable size, e.g., 10x10 blocks = 100 blocks total.
            initial_width = BLOCK_WIDTH * 10
            initial_height = BLOCK_HEIGHT * 10
            self.image = Image.new('RGB', (initial_width, initial_height), color='black')
            self.image.save(self.disk_image_path)
            print(f"Created new disk image: {self.disk_image_path} ({initial_width}x{initial_height} pixels)")
        else:
            self.image = Image.open(self.disk_image_path).convert('RGB')

        self.width, self.height = self.image.size
        # Ensure dimensions are multiples of BLOCK_WIDTH/HEIGHT
        if self.width % BLOCK_WIDTH != 0 or self.height % BLOCK_HEIGHT != 0:
            new_width = (self.width // BLOCK_WIDTH + (1 if self.width % BLOCK_WIDTH != 0 else 0)) * BLOCK_WIDTH
            new_height = (self.height // BLOCK_HEIGHT + (1 if self.height % BLOCK_HEIGHT != 0 else 0)) * BLOCK_HEIGHT
            print(f"Resizing disk image from {self.width}x{self.height} to {new_width}x{new_height} to align with block size.")
            # Create a new image and paste the old one onto it, then save.
            new_image = Image.new('RGB', (new_width, new_height), color='black')
            new_image.paste(self.image, (0, 0))
            self.image = new_image
            self.image.save(self.disk_image_path)
            self.width, self.height = self.image.size # Update dimensions after resize

        self.num_blocks = (self.width // BLOCK_WIDTH) * (self.height // BLOCK_HEIGHT)
        print(f"Loaded disk image: {self.disk_image_path}, {self.num_blocks} blocks available.")

    def _load_root_directory(self):
        """
        Loads the root directory (stored in block 0) into the self.directory dictionary.
        Each entry is parsed from the pixel data of block 0.
        """
        self.directory.clear() # Clear existing directory before loading
        root_block_pixels = self._get_block_pixels(0)
        root_block_bytes = self._pixels_to_bytes(root_block_pixels)

        # Iterate through the bytes of the root block to find directory entries
        for i in range(0, len(root_block_bytes), DIR_ENTRY_BYTES):
            entry_bytes = root_block_bytes[i : i + DIR_ENTRY_BYTES]
            if len(entry_bytes) < DIR_ENTRY_BYTES:
                break # Reached the end of available bytes in the block

            try:
                # Unpack the directory entry: 1 byte for length, 60 bytes for filename, 2 bytes for start block
                name_len = struct.unpack('B', entry_bytes[0:1])[0]
                # Extract filename bytes and strip any null padding
                filename_bytes = entry_bytes[1 : 1 + name_len].rstrip(b'\x00')
                start_block = struct.unpack('H', entry_bytes[MAX_FILENAME_BYTES + 1 : DIR_ENTRY_BYTES])[0]

                # Only add valid entries (non-empty filename and valid block ID)
                if name_len > 0 and filename_bytes and start_block != 0:
                    filename = filename_bytes.decode('utf-8')
                    self.directory[filename] = start_block
            except (struct.error, UnicodeDecodeError) as e:
                # Log malformed entries but continue parsing
                print(f"Warning: Malformed directory entry encountered at offset {i}: {e}. Skipping.")
                continue
        print(f"Loaded root directory with {len(self.directory)} entries.")

    def _recursively_mark_blocks_as_used(self, start_block_id: int):
        """
        Traverses a file's block chain and removes all used blocks from free_blocks.
        This is called during initialization to correctly populate free_blocks.
        """
        current_block_id = start_block_id
        while current_block_id != 0:
            if current_block_id in self.free_blocks:
                self.free_blocks.remove(current_block_id)
            else:
                # This block is already marked as used or is an invalid pointer (e.g., loop)
                break # Stop to prevent infinite loops or processing invalid blocks

            try:
                block_pixels = self._get_block_pixels(current_block_id)
                block_bytes = self._pixels_to_bytes(block_pixels)
                # Next block pointer is at bytes 8-9
                if len(block_bytes) >= 10:
                    next_block_id = struct.unpack('H', block_bytes[8:10])[0]
                else:
                    next_block_id = 0 # No more blocks if header is too short
            except IndexError: # Block ID out of bounds
                next_block_id = 0 # Treat as end of file
            
            if next_block_id == current_block_id: # Self-referencing pointer, break loop
                break
            current_block_id = next_block_id

    def _bytes_to_pixels(self, data: bytes) -> List[Tuple[int, int, int]]:
        """Converts a byte string into a list of RGB pixel tuples."""
        pixels = []
        for i in range(0, len(data), BYTES_PER_PIXEL):
            r = data[i] if i < len(data) else 0
            g = data[i+1] if i+1 < len(data) else 0
            b = data[i+2] if i+2 < len(data) else 0
            pixels.append((r, g, b))
        return pixels

    def _pixels_to_bytes(self, pixels: List[Tuple[int, int, int]]) -> bytes:
        """Converts a list of RGB pixel tuples back into a byte string."""
        data_bytes = bytearray()
        for r, g, b in pixels:
            # Ensure pixel values are within 0-255 range for bytes
            data_bytes.extend([max(0, min(255, r)), max(0, min(255, g)), max(0, min(255, b))])
        return bytes(data_bytes)

    def _get_block_coords(self, block_num: int) -> Tuple[int, int]:
        """Calculates the top-left pixel coordinates for a given block number."""
        blocks_per_row = self.width // BLOCK_WIDTH
        row = block_num // blocks_per_row
        col = block_num % blocks_per_row
        return col * BLOCK_WIDTH, row * BLOCK_HEIGHT

    def _get_block_pixels(self, block_num: int) -> List[Tuple[int, int, int]]:
        """Extracts the pixels of a specific 24x24 block from the disk image."""
        if not (0 <= block_num < self.num_blocks):
            raise IndexError(f"Block {block_num} is out of bounds (total blocks: {self.num_blocks})")

        x, y = self._get_block_coords(block_num)
        block_pixels = []
        for j in range(BLOCK_HEIGHT):
            for i in range(BLOCK_WIDTH):
                block_pixels.append(self.image.getpixel((x + i, y + j)))
        return block_pixels

    def _set_block_pixels(self, block_num: int, pixels: List[Tuple[int, int, int]]):
        """Writes a list of RGB pixel tuples to a specific 24x24 block on the disk image."""
        if not (0 <= block_num < self.num_blocks):
            raise IndexError(f"Block {block_num} is out of bounds (total blocks: {self.num_blocks})")
        
        # Pad or truncate pixels to exactly fill the block
        if len(pixels) > PIXELS_PER_BLOCK:
            pixels = pixels[:PIXELS_PER_BLOCK]
        elif len(pixels) < PIXELS_PER_BLOCK:
            pixels.extend([(0, 0, 0)] * (PIXELS_PER_BLOCK - len(pixels)))

        x, y = self._get_block_coords(block_num)
        # Use Image.putpixel for individual pixel setting, or load() and then save()
        # For performance with many pixels, drawing directly on loaded pixel access object is faster.
        img_pixels = self.image.load()
        pixel_idx = 0
        for j in range(BLOCK_HEIGHT):
            for i in range(BLOCK_WIDTH):
                img_pixels[x + i, y + j] = pixels[pixel_idx]
                pixel_idx += 1
        self.image.save(self.disk_image_path) # Save changes to disk immediately

    def _allocate_block(self) -> int:
        """Finds and allocates a free block from the free_blocks set."""
        if not self.free_blocks:
            # In a production system, this would trigger disk resizing or an error.
            raise Exception("No free blocks available on disk! Disk image might need to be resized.")
        block_id = self.free_blocks.pop() # Get an arbitrary free block
        print(f"Allocated block: {block_id}")
        return block_id

    def read_file(self, path: str) -> bytes:
        """
        Reads the content of a file from the PXFS.
        Follows the block chain (using the next_block_id pointer) to read multi-block files.
        """
        if path not in self.directory:
            raise FileNotFoundError(f"File not found: {path}")

        current_block_id = self.directory[path]
        file_data_bytes = bytearray()
        
        while current_block_id != 0: # 0 indicates the end of the block chain
            try:
                block_pixels = self._get_block_pixels(current_block_id)
                block_bytes = self._pixels_to_bytes(block_pixels)
            except IndexError:
                print(f"Error: Invalid block ID {current_block_id} encountered while reading file '{path}'. Stopping.")
                break # Stop if block ID is invalid

            # Next block pointer is at bytes 8-9
            next_block_id = 0
            if len(block_bytes) >= 10:
                next_block_id = struct.unpack('H', block_bytes[8:10])[0]
            else:
                # Not enough bytes for a pointer, assume end of file
                print(f"Warning: Block {current_block_id} for '{path}' is too short for a next block pointer. Treating as end of file.")

            # Actual file data starts from byte 10 of the block
            # Strip null padding from the end of the data chunk
            file_data_bytes.extend(block_bytes[10:].rstrip(b'\x00'))
            
            if next_block_id == current_block_id:
                # This indicates a corrupt or self-referencing pointer, preventing infinite loop
                print(f"Warning: Next block pointer for block {current_block_id} points to itself. Stopping read.")
                break
            
            current_block_id = next_block_id

        return bytes(file_data_bytes)

    def write_file(self, path: str, data: bytes):
        """
        Writes data to a file in the PXFS.
        Allocates new blocks as needed and updates the directory.
        Handles overwriting existing files by freeing their old blocks.
        """
        # If file exists, free its blocks first
        if path in self.directory:
            print(f"Overwriting existing file: '{path}'. Freeing old blocks.")
            current_block_to_free = self.directory[path]
            while current_block_to_free != 0:
                self.free_blocks.add(current_block_to_free) # Add block back to free list
                
                try:
                    block_pixels = self._get_block_pixels(current_block_to_free)
                    block_bytes = self._pixels_to_bytes(block_pixels)
                    # Next block pointer is at bytes 8-9
                    if len(block_bytes) >= 10:
                        next_block_to_free = struct.unpack('H', block_bytes[8:10])[0]
                    else:
                        next_block_to_free = 0
                except IndexError: # Block ID out of bounds, stop
                    next_block_to_free = 0
                
                if next_block_to_free == current_block_to_free:
                    break # Break if pointer loops back
                current_block_to_free = next_block_to_free
            del self.directory[path] # Remove file from directory

        allocated_blocks: List[int] = []
        data_offset = 0
        prev_allocated_block_id = 0 # Tracks the previous block to link it to the current one

        # Data starts from byte 10 of a block.
        # This leaves 1728 - 10 = 1718 bytes per block for actual file data.
        data_capacity_per_block = BYTES_PER_BLOCK - 10 

        # Loop until all data is written. Even for empty files, at least one block is allocated.
        while data_offset < len(data) or (not allocated_blocks and len(data) == 0):
            block_id = self._allocate_block()
            allocated_blocks.append(block_id)

            # Prepare the content for the current block (initialized with zeros)
            block_content_bytes = bytearray(BYTES_PER_BLOCK)

            # Copy file data chunk into the block, starting from byte 10
            chunk_end = min(len(data), data_offset + data_capacity_per_block)
            data_chunk = data[data_offset:chunk_end]
            block_content_bytes[10 : 10 + len(data_chunk)] = data_chunk
            data_offset += len(data_chunk)

            # Determine the 'next_block_id' for this block.
            # If there's more data to write, this will be linked to the next allocated block.
            # Otherwise, it remains 0 (end of chain).
            next_block_id_for_current_block = 0 
            # This pointer will be updated in the next iteration (for prev_allocated_block)
            # or it will remain 0 if this is the last block of the file.

            # Pack the next_block_id placeholder (initially 0) into bytes 8-9
            block_content_bytes[8:10] = struct.pack('H', next_block_id_for_current_block)

            # Convert to pixels and write the block to the image
            block_pixels = self._bytes_to_pixels(bytes(block_content_bytes))
            self._set_block_pixels(block_id, block_pixels)

            # If there was a previous block, update its 'next_block_id' pointer
            if prev_allocated_block_id != 0:
                # Retrieve the pixels of the *previous* block
                prev_block_pixels = self._get_block_pixels(prev_allocated_block_id)
                # Convert them to bytes (using bytearray for mutability)
                prev_block_bytes = bytearray(self._pixels_to_bytes(prev_block_pixels))
                # Update the 'next_block_id' in the previous block to point to the current block
                prev_block_bytes[8:10] = struct.pack('H', block_id) 
                # Write the modified previous block back to the image
                self._set_block_pixels(prev_allocated_block_id, self._bytes_to_pixels(bytes(prev_block_bytes)))
            
            prev_allocated_block_id = block_id # Current block becomes the previous for the next iteration
        
        # Update the directory with the first allocated block for this file
        if allocated_blocks:
            self.directory[path] = allocated_blocks[0]
            self._update_root_directory() # Persist directory changes
            print(f"Wrote file '{path}' starting at block {allocated_blocks[0]} and spanning {len(allocated_blocks)} block(s).")
        else:
            # This case should ideally not be reached if at least one block is allocated for empty files
            print(f"Warning: No blocks allocated for file '{path}'.")


    def list_dir(self, path: str = "/") -> List[str]:
        """
        Returns a list of filenames in the specified directory.
        Currently, only the root directory ("/") is supported.
        """
        if path != "/":
            raise NotImplementedError("Only root directory listing is supported at the moment.")
        return list(self.directory.keys())

    def _update_root_directory(self):
        """
        Writes the current in-memory directory structure (self.directory)
        back to block 0 of the disk image.
        """
        dir_bytes = bytearray()
        for filename, start_block in self.directory.items():
            encoded_filename = filename.encode('utf-8')
            # Ensure filename doesn't exceed MAX_FILENAME_BYTES
            name_len = min(len(encoded_filename), MAX_FILENAME_BYTES)
            
            entry = bytearray(DIR_ENTRY_BYTES) # Initialize entry with zeros
            entry[0:1] = struct.pack('B', name_len) # Filename length
            entry[1:1+name_len] = encoded_filename[:name_len] # Filename bytes
            entry[MAX_FILENAME_BYTES + 1 : DIR_ENTRY_BYTES] = struct.pack('H', start_block) # Start block ID

            dir_bytes.extend(entry)

        # Pad the directory bytes with zeros to fill the entire block, if necessary
        if len(dir_bytes) < BYTES_PER_BLOCK:
            dir_bytes.extend(b'\x00' * (BYTES_PER_BLOCK - len(dir_bytes)))
        
        # If the directory is too large for a single block, it will be truncated.
        # Multi-block directories are a more advanced feature.
        if len(dir_bytes) > BYTES_PER_BLOCK:
            print("Warning: Directory content exceeds a single block. Truncating directory data.")
            dir_bytes = dir_bytes[:BYTES_PER_BLOCK]

        self._set_block_pixels(0, self._bytes_to_pixels(bytes(dir_bytes)))
        print("Root directory updated on disk.")

# --- Test Disk Image Generation and Usage Example ---
if __name__ == "__main__":
    disk_path = "disk.pxl.png"

    print("--- Initializing PXFS ---")
    pxfs = PXFS(disk_path)

    # --- Writing Test Files ---
    print("\n--- Writing Test Files ---")
    pxfs.write_file("/boot/bootloader.pxl", b"This is the initial bootloader code.")
    pxfs.write_file("/programs/test.pxl", b"print('Hello, PXFS World!')\nexit()")
    pxfs.write_file("/scrolls/readme.txt", b"Welcome to the Pixel-Native File System!\nThis is a simple text file stored as pixels.")
    
    # Test overwriting a file
    pxfs.write_file("/boot/bootloader.pxl", b"Updated bootloader content.")

    # Test a long file that spans multiple blocks
    long_data = b"A" * (BYTES_PER_BLOCK * 2 + 500) # 2 blocks + 500 bytes
    pxfs.write_file("/test/long_file.txt", long_data)
    
    # Test an empty file
    pxfs.write_file("/test/empty.txt", b"")

    # --- Listing Directory Contents ---
    print("\n--- Listing Files in Root Directory ---")
    files_in_root = pxfs.list_dir("/")
    if files_in_root:
        for filename in files_in_root:
            print(f"- {filename}")
    else:
        print("No files found in the root directory.")

    # --- Reading Test Files ---
    print("\n--- Reading Test Files ---")
    try:
        bootloader_content = pxfs.read_file("/boot/bootloader.pxl")
        print(f"\nContent of /boot/bootloader.pxl: '{bootloader_content.decode()}'")

        test_program_content = pxfs.read_file("/programs/test.pxl")
        print(f"Content of /programs/test.pxl: '{test_program_content.decode()}'")

        readme_content = pxfs.read_file("/scrolls/readme.txt")
        print(f"Content of /scrolls/readme.txt:\n{readme_content.decode()}")

        empty_file_content = pxfs.read_file("/test/empty.txt")
        print(f"Content of /test/empty.txt: '{empty_file_content.decode()}' (Length: {len(empty_file_content)})")
        
        long_file_read = pxfs.read_file("/test/long_file.txt")
        print(f"Content of /test/long_file.txt (first 50 chars): '{long_file_read[:50].decode()}'")
        print(f"Content of /test/long_file.txt (last 50 chars): '{long_file_read[-50:].decode()}'")
        print(f"Length of /test/long_file.txt: {len(long_file_read)} bytes (Expected: {len(long_data)} bytes)")
        print(f"Long file content matches original: {long_file_read == long_data}")

        # Test reading a non-existent file
        try:
            pxfs.read_file("/nonexistent/file.txt")
        except FileNotFoundError as e:
            print(f"\nSuccessfully caught expected error: {e}")

    except Exception as e:
        print(f"\nAn unexpected error occurred during reading: {e}")

    print("\n--- PXFS Demonstration Complete ---")
    # You can now open 'disk.pxl.png' with an image viewer to see the pixel data.











