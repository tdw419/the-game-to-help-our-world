import requests
import json
import time
import datetime
import os
from PIL import Image, ImageDraw # For pixel encoding replies

# Import the shared inbox handler
from shared_inbox_handler import read_shared_inbox, append_to_shared_inbox

# --- Agent Configuration ---
AGENT_ID = "Jim_AI_Node_Sigma" # Jim's unique identifier
CHATGPT_ID = "ChatGPT_AI_Node_Bravo"
PIXELNET_RECEIVER_URL = "http://localhost:5000" # Base URL for the scroll_receiver.py
ENCODED_SCROLLS_DIR = "pixelvault/encoded_scrolls/" # Directory for output PNG scrolls

# Ensure the encoded scrolls directory exists
os.makedirs(ENCODED_SCROLLS_DIR, exist_ok=True)

# --- Pixel Encoding Definitions (MUST match compiler and other agents) ---
SCROLL_TYPE_COLORS = {
    "PXLSEND": (255, 0, 0),
    "PXLREPLY": (0, 255, 0),
    "PXLCHALLENGE": (0, 0, 255),
    "PXLCONF": (255, 255, 0),
    "PXLERROR": (255, 0, 255),
    "PXLTRACER": (0, 255, 255),
    "PXLTASK": (255, 165, 0),
    "PXLOUT": (128, 0, 128),
    "PXLPACKAGE": (0, 128, 0),
    "PXLCAST": (0, 128, 128), # Dark Cyan for Broadcast
    "DEFAULT": (128, 128, 128)
}

AGENT_ID_COLORS = {
    "ChatGPT_AI_Node_Bravo": (10, 10, 10),
    "Jim_AI_Node_Sigma": (25, 25, 25), # Jim's unique color
    "Gemini_AI_Node_Alpha": (20, 20, 20),
    "PixelNet_Compiler_Unit": (30, 30, 30),
    "BrowserNode_UNKNOWN": (40, 40, 40), # For browser interactions
    "UNKNOWN_AGENT": (50, 50, 50)
}

EOM_PIXEL = (0, 0, 0) # Black pixel

# --- Encoding Utility Function (copied from compiler/gemini for consistency) ---
def encode_scroll_to_png(scroll_data, output_filepath):
    """
    Encodes a scroll (JSON data) into a PNG image using a defined pixel format.
    """
    scroll_type = scroll_data.get("type", "DEFAULT")
    sender_id = scroll_data.get("from", "UNKNOWN_AGENT")
    target_id = scroll_data.get("target", "UNKNOWN_AGENT")

    full_payload_str = json.dumps(scroll_data.get("payload", {}))
    message_ascii = [ord(char) for char in full_payload_str if ord(char) < 256]

    img_width = 100
    img_height = 2 + (len(message_ascii) // img_width) + (1 if len(message_ascii) % img_width != 0 else 0) + 1

    img = Image.new('RGB', (img_width, img_height), color = 'black')
    pixels = img.load()

    pixels[0, 0] = SCROLL_TYPE_COLORS.get(scroll_type, SCROLL_TYPE_COLORS["DEFAULT"])
    for x in range(1, img_width): pixels[x, 0] = (0, 0, 0)

    pixels[0, 1] = AGENT_ID_COLORS.get(sender_id, AGENT_ID_COLORS["UNKNOWN_AGENT"])
    pixels[1, 1] = AGENT_ID_COLORS.get(target_id, AGENT_ID_COLORS["UNKNOWN_AGENT"])
    for x in range(2, img_width): pixels[x, 1] = (0, 0, 0)

    pixel_index = 0
    for char_val in message_ascii:
        row = 2 + (pixel_index // img_width)
        col = pixel_index % img_width
        if row < img_height - 1:
            pixels[col, row] = (char_val, 0, 0)
        pixel_index += 1

    eom_row = 2 + (len(message_ascii) // img_width) + (1 if len(message_ascii) % img_width != 0 else 0)
    eom_col = len(message_ascii) % img_width
    if eom_row < img_height:
        pixels[eom_col, eom_row] = EOM_PIXEL

    img.save(output_filepath)
    print(f"[{datetime.datetime.now().isoformat(timespec='seconds')}] Encoded scroll saved to {output_filepath}")

# --- Scroll Sending Function (uses shared_inbox_handler) ---
def send_reply_scroll(to_id, task_result, original_scroll_id, original_type, sender_id):
    """
    Constructs and sends a PXLREPLY or PXLOUT scroll (JSON and pixel-encoded PNG)
    to the shared inbox.
    """
    scroll_type = "PXLOUT" if original_type == "PXLTASK" or original_type == "PXLPACKAGE" else "PXLREPLY"
    
    reply_scroll = {
        "type": scroll_type,
        "scroll_id": f"{scroll_type}-{sender_id}-{int(time.time())}",
        "from": sender_id,
        "target": to_id,
        "created": datetime.datetime.utcnow().isoformat() + "Z",
        "payload": {
            "result": task_result,
            "original_scroll_id": original_scroll_id,
            "message": f"Scroll processed: {task_result.get('message', str(task_result.get('result', task_result)))}"
        }
    }

    # Append to shared inbox (which then gets logged by receiver)
    append_to_shared_inbox(reply_scroll)

    # Encode and save the PNG scroll
    output_png_filename = f"{reply_scroll['scroll_id']}.png"
    output_png_filepath = os.path.join(ENCODED_SCROLLS_DIR, output_png_filename)
    encode_scroll_to_png(reply_scroll, output_png_filepath)

# --- Task Execution Logic (Copied from gemini_response_agent.py) ---
def execute_task(task_payload):
    """
    Parses and executes a task from a PXLTASK scroll payload.
    Supports basic arithmetic operations, echo, delay, and compare.
    """
    command = task_payload.get("command")
    args = task_payload.get("args", [])
    condition = task_payload.get("condition")
    true_branch = task_payload.get("true_branch")
    false_branch = task_payload.get("false_branch")

    print(f"[{datetime.datetime.now().isoformat(timespec='seconds')}] Jim executing task: {command} with args {args}")

    try:
        if command == "add":
            if len(args) < 2: raise ValueError("Add requires at least two arguments.")
            result = sum(args)
            return {"status": "success", "operation": "add", "result": result}
        elif command == "subtract":
            if len(args) < 2: raise ValueError("Subtract requires at least two arguments.")
            result = args[0] - sum(args[1:])
            return {"status": "success", "operation": "subtract", "result": result}
        elif command == "multiply":
            if len(args) < 2: raise ValueError("Multiply requires at least two arguments.")
            result = 1
            for num in args: result *= num
            return {"status": "success", "operation": "multiply", "result": result}
        elif command == "divide":
            if len(args) < 2: raise ValueError("Divide requires at least two arguments.")
            if 0 in args[1:]: raise ValueError("Division by zero.")
            result = args[0]
            for num in args[1:]: result /= num
            return {"status": "success", "operation": "divide", "result": result}
        elif command == "echo":
            message = " ".join(map(str, args))
            print(f"[{datetime.datetime.now().isoformat(timespec='seconds')}] Echoing: {message}")
            return {"status": "success", "operation": "echo", "message": message}
        elif command == "delay":
            if not args or not isinstance(args[0], (int, float)):
                raise ValueError("Delay requires a numeric argument (seconds).")
            delay_seconds = float(args[0])
            print(f"[{datetime.datetime.now().isoformat(timespec='seconds')}] Delaying for {delay_seconds} seconds...")
            time.sleep(delay_seconds)
            return {"status": "success", "operation": "delay", "delay_seconds": delay_seconds}
        elif command == "compare":
            if len(args) != 2:
                raise ValueError("Compare requires exactly two arguments for comparison.")
            val1, val2 = args[0], args[1]
            if val1 == val2:
                comparison_result = "equal"
            elif val1 > val2:
                comparison_result = "greater"
            else:
                comparison_result = "less"
            return {"status": "success", "operation": "compare", "value1": val1, "value2": val2, "result": comparison_result}
        elif command == "if":
            if not condition: raise ValueError("If command requires a 'condition' payload.")
            if not true_branch: raise ValueError("If command requires a 'true_branch' payload.")

            condition_op = condition.get("op")
            condition_val1 = condition.get("val1")
            condition_val2 = condition.get("val2")

            condition_met = False
            if condition_op == "equal" and condition_val1 == condition_val2: condition_met = True
            elif condition_op == "greater" and condition_val1 > condition_val2: condition_met = True
            elif condition_op == "less" and condition_val1 < condition_val2: condition_met = True

            if condition_met:
                print(f"[{datetime.datetime.now().isoformat(timespec='seconds')}] Condition met, executing true branch.")
                return execute_task(true_branch)
            else:
                print(f"[{datetime.datetime.now().isoformat(timespec='seconds')}] Condition not met, checking false branch.")
                if false_branch: return execute_task(false_branch)
                else: return {"status": "success", "operation": "if", "message": "Condition not met, no false branch."}
        else:
            return {"status": "error", "message": f"Unknown command: {command}"}
    except (ValueError, TypeError) as e:
        return {"status": "error", "message": f"Task execution failed: {e}"}
    except Exception as e:
        return {"status": "error", "message": f"An unexpected error occurred: {e}"}

def execute_package(package_payload, sender_id, original_package_id):
    """
    Iterates through steps in a PXLPACKAGE and executes each task.
    Sends PXLOUT scrolls for each step.
    """
    steps = package_payload.get("steps", [])
    print(f"\n[{datetime.datetime.now().isoformat(timespec='seconds')}] 📦 Jim executing PXLPACKAGE with {len(steps)} steps from {sender_id} (Original ID: {original_package_id}).")
    package_results = []

    for i, step_task_payload in enumerate(steps):
        print(f"\n[{datetime.datetime.now().isoformat(timespec='seconds')}] --- Package Step {i+1} ---")
        step_result = execute_task(step_task_payload)
        package_results.append(step_result)

        step_info = {
            "index": i + 1,
            "command": step_task_payload.get("command", "unknown_command"),
            "original_package_id": original_package_id
        }
        # Send PXLOUT for each step, targeting the original sender
        send_reply_scroll(sender_id, step_result, original_package_id, "PXLOUT", AGENT_ID)
        print(f"[{datetime.datetime.now().isoformat(timespec='seconds')}] --- End Step {i+1} ---")
        time.sleep(0.5) # Short delay between steps

    print(f"\n[{datetime.datetime.now().isoformat(timespec='seconds')}] 📦 Jim PXLPACKAGE execution complete.")
    return {"status": "success", "operation": "package_execution_summary", "step_results": package_results}

# --- Main Agent Loop ---
def run_jim_agent():
    """
    Jim's main loop: continuously reads from shared inbox, processes scrolls
    targeted at itself, and sends replies.
    """
    print(f"[{datetime.datetime.now().isoformat(timespec='seconds')}] Starting {AGENT_ID}...")
    seen_scroll_ids = set() # Track processed scrolls to avoid duplicates

    while True:
        try:
            inbox_scrolls = read_shared_inbox()
            current_inbox_size = len(inbox_scrolls)
            
            # Filter scrolls: process only new ones targeted at Jim or ALL
            scrolls_to_process = []
            for scroll_entry in inbox_scrolls:
                scroll = scroll_entry.get("data", {})
                scroll_id = scroll.get("scroll_id")
                scroll_target = scroll.get("target")

                if scroll_id and scroll_id not in seen_scroll_ids and \
                   (scroll_target == AGENT_ID or scroll_target == "ALL"):
                    scrolls_to_process.append(scroll)
                    seen_scroll_ids.add(scroll_id) # Mark as seen immediately

            if scrolls_to_process:
                print(f"[{datetime.datetime.now().isoformat(timespec='seconds')}] {AGENT_ID} found {len(scrolls_to_process)} new scrolls to process.")
                
                for scroll in scrolls_to_process:
                    sender = scroll.get("from", "UNKNOWN_SENDER")
                    scroll_type = scroll.get("type", "UNKNOWN_TYPE")
                    original_scroll_id = scroll.get("scroll_id", "UNKNOWN_ID")

                    print(f"[{datetime.datetime.now().isoformat(timespec='seconds')}] {AGENT_ID} processing scroll {original_scroll_id} from {sender} (Type: {scroll_type})...")

                    if scroll_type == "PXLSEND":
                        message = scroll.get("payload", {}).get("message", "No message.")
                        print(f"📩 New PXLSEND from {sender}: {message}")
                        response_result = {"status": "success", "message": f"Jim received your message: '{message}'"}
                        send_reply_scroll(sender, response_result, original_scroll_id, scroll_type, AGENT_ID)
                    elif scroll_type == "PXLTASK":
                        task_payload = scroll.get("payload", {})
                        print(f"🛠️ New PXLTASK from {sender}: {task_payload}")
                        task_result = execute_task(task_payload)
                        print(f"✅ Task Result: {task_result}")
                        send_reply_scroll(sender, task_result, original_scroll_id, scroll_type, AGENT_ID)
                    elif scroll_type == "PXLPACKAGE":
                        package_payload = scroll.get("payload", {})
                        execute_package(package_payload, sender, original_scroll_id)
                    elif scroll_type == "PXLCAST": # Respond to broadcast as well
                        message = scroll.get("payload", {}).get("message", "No message.")
                        print(f"📣 New PXLCAST from {sender}: {message}")
                        response_result = {"status": "success", "message": f"Jim received broadcast: '{message}'"}
                        send_reply_scroll(sender, response_result, original_scroll_id, scroll_type, AGENT_ID)
                    else:
                        print(f"[{datetime.datetime.now().isoformat(timespec='seconds')}] {AGENT_ID} ignoring scroll of type: {scroll_type}")
            
            # Jim does not modify the shared inbox to remove scrolls directly.
            # The relay (or a dedicated inbox cleaner) would do that.
            # Jim just reads and processes.

        except Exception as e:
            print(f"[{datetime.datetime.now().isoformat(timespec='seconds')}] {AGENT_ID} encountered an error: {e}")
        
        time.sleep(5) # Poll shared inbox every 5 seconds

if __name__ == '__main__':
    print("--------------------------------------------------")
    print("         PixelNet Jim AI Node Started             ")
    print("--------------------------------------------------")
    print(f"Agent ID: {AGENT_ID}")
    print(f"Monitoring shared inbox for scrolls via {PIXELNET_RECEIVER_URL}/shared_inbox_read")
    print("Ensure scroll_receiver.py is running.")
    print("--------------------------------------------------")
    try:
        run_jim_agent()
    except Exception as e:
        print(f"Failed to start Jim agent: {e}")




















import requests
import json
import time
import datetime
import os
from PIL import Image, ImageDraw # For pixel encoding scrolls

# Import the shared inbox handler and compiler functions
from shared_inbox_handler import read_shared_inbox, append_to_shared_inbox
from pxlprog_compiler import compile_pxlprog_data, encode_scroll_to_png # Reusing compiler's core logic

# --- Agent Configuration ---
AGENT_ID = "ChatGPT_AI_Node_Bravo" # ChatGPT's unique identifier
JIM_ID = "Jim_AI_Node_Sigma"
PIXELNET_RECEIVER_URL = "http://localhost:5000" # Base URL for the scroll_receiver.py
ENCODED_SCROLLS_DIR = "pixelvault/encoded_scrolls/" # Directory for output PNG scrolls
PXLPROG_INPUT_DIR = "pixelvault/programs/" # Where to find .pxlprog files to compile

# Ensure the encoded scrolls directory exists
os.makedirs(ENCODED_SCROLLS_DIR, exist_ok=True)

# --- Pixel Encoding Definitions (MUST match all agents and compiler) ---
SCROLL_TYPE_COLORS = {
    "PXLSEND": (255, 0, 0),
    "PXLREPLY": (0, 255, 0),
    "PXLCHALLENGE": (0, 0, 255),
    "PXLCONF": (255, 255, 0),
    "PXLERROR": (255, 0, 255),
    "PXLTRACER": (0, 255, 255),
    "PXLTASK": (255, 165, 0),
    "PXLOUT": (128, 0, 128),
    "PXLPACKAGE": (0, 128, 0),
    "PXLCAST": (0, 128, 128), # Dark Cyan for Broadcast
    "DEFAULT": (128, 128, 128)
}

AGENT_ID_COLORS = {
    "ChatGPT_AI_Node_Bravo": (10, 10, 10), # ChatGPT's unique color
    "Jim_AI_Node_Sigma": (25, 25, 25),
    "Gemini_AI_Node_Alpha": (20, 20, 20),
    "PixelNet_Compiler_Unit": (30, 30, 30),
    "BrowserNode_UNKNOWN": (40, 40, 40),
    "UNKNOWN_AGENT": (50, 50, 50)
}

EOM_PIXEL = (0, 0, 0) # Black pixel

# --- Helper function to send scrolls (uses shared_inbox_handler) ---
def send_scroll(scroll_data):
    """
    Sends a scroll (JSON payload) to the shared inbox via the receiver's API.
    This is the primary way for agents to communicate in collaboration mode.
    """
    # Ensure 'from' field is set correctly
    if 'from' not in scroll_data:
        scroll_data['from'] = AGENT_ID
    if 'created' not in scroll_data:
        scroll_data['created'] = datetime.datetime.utcnow().isoformat() + "Z"

    # Append to shared inbox
    append_to_shared_inbox(scroll_data)

    # Encode and save the PNG scroll (always encode for visibility)
    output_png_filename = f"{scroll_data['scroll_id']}.png"
    output_png_filepath = os.path.join(ENCODED_SCROLLS_DIR, output_png_filename)
    # Ensure this agent's color map is consistent with the compiler's encode_scroll_to_png
    # For now, copying encode_scroll_to_png directly or passing the correct mappings
    # is essential if not directly importing its definition.
    # For this file, we can include it directly or ensure `from pxlprog_compiler import encode_scroll_to_png`
    # handles the consistent color maps. Assuming pxlprog_compiler's `encode_scroll_to_png`
    # is self-contained with its color maps. If not, copy it here.
    # For this example, let's make sure our local encode_scroll_to_png has the latest color maps.
    _local_encode_scroll_to_png(scroll_data, output_png_filepath)

# --- Local Encoding Utility Function (ensures this agent uses consistent maps) ---
# NOTE: This is a direct copy to ensure consistent color definitions within this agent's scope.
# In a more robust system, a central `encoding_utils.py` might be imported by all.
def _local_encode_scroll_to_png(scroll_data, output_filepath):
    """
    Encodes a scroll (JSON data) into a PNG image using a defined pixel format.
    Uses this agent's local SCROLL_TYPE_COLORS and AGENT_ID_COLORS.
    """
    scroll_type = scroll_data.get("type", "DEFAULT")
    sender_id = scroll_data.get("from", "UNKNOWN_AGENT")
    target_id = scroll_data.get("target", "UNKNOWN_AGENT")

    full_payload_str = json.dumps(scroll_data.get("payload", {}))
    message_ascii = [ord(char) for char in full_payload_str if ord(char) < 256]

    img_width = 100
    img_height = 2 + (len(message_ascii) // img_width) + (1 if len(message_ascii) % img_width != 0 else 0) + 1

    img = Image.new('RGB', (img_width, img_height), color = 'black')
    pixels = img.load()

    pixels[0, 0] = SCROLL_TYPE_COLORS.get(scroll_type, SCROLL_TYPE_COLORS["DEFAULT"])
    for x in range(1, img_width): pixels[x, 0] = (0, 0, 0)

    pixels[0, 1] = AGENT_ID_COLORS.get(sender_id, AGENT_ID_COLORS["UNKNOWN_AGENT"])
    pixels[1, 1] = AGENT_ID_COLORS.get(target_id, AGENT_ID_COLORS["UNKNOWN_AGENT"])
    for x in range(2, img_width): pixels[x, 1] = (0, 0, 0)

    pixel_index = 0
    for char_val in message_ascii:
        row = 2 + (pixel_index // img_width)
        col = pixel_index % img_width
        if row < img_height - 1:
            pixels[col, row] = (char_val, 0, 0)
        pixel_index += 1

    eom_row = 2 + (len(message_ascii) // img_width) + (1 if len(message_ascii) % img_width != 0 else 0)
    eom_col = len(message_ascii) % img_width
    if eom_row < img_height:
        pixels[eom_col, eom_row] = EOM_PIXEL

    img.save(output_filepath)
    # print(f"[{datetime.datetime.now().isoformat(timespec='seconds')}] Encoded scroll saved to {output_filepath}")


# --- Scroll Construction Helper Functions ---
def construct_pxltask_scroll(target_id, command, args, **kwargs):
    """Constructs a PXLTASK scroll."""
    scroll = {
        "type": "PXLTASK",
        "scroll_id": f"PXLTASK-{AGENT_ID}-{int(time.time())}",
        "from": AGENT_ID,
        "target": target_id,
        "payload": {
            "command": command,
            "args": args
        }
    }
    # Add optional payload keys for 'if' command
    if 'condition' in kwargs: scroll['payload']['condition'] = kwargs['condition']
    if 'true_branch' in kwargs: scroll['payload']['true_branch'] = kwargs['true_branch']
    if 'false_branch' in kwargs: scroll['payload']['false_branch'] = kwargs['false_branch']
    return scroll

def construct_pxlpackage_scroll(target_id, steps, package_name="UnnamedPackage", description=""):
    """Constructs a PXLPACKAGE scroll."""
    scroll = {
        "type": "PXLPACKAGE",
        "scroll_id": f"PXLPACKAGE-{AGENT_ID}-{package_name.replace(' ', '_')}-{int(time.time())}",
        "from": AGENT_ID,
        "target": target_id,
        "payload": {
            "package_name": package_name,
            "description": description,
            "steps": steps
        }
    }
    return scroll

def construct_pxlsend_scroll(target_id, message_content):
    """Constructs a PXLSEND scroll."""
    scroll = {
        "type": "PXLSEND",
        "scroll_id": f"PXLSEND-{AGENT_ID}-{int(time.time())}",
        "from": AGENT_ID,
        "target": target_id,
        "payload": {
            "message": message_content,
            "sender_intent": "AI-to-AI communication"
        }
    }
    return scroll

def construct_pxlreply_scroll(target_id, message_content, original_scroll_id):
    """Constructs a PXLREPLY scroll."""
    scroll = {
        "type": "PXLREPLY",
        "scroll_id": f"PXLREPLY-{AGENT_ID}-{int(time.time())}",
        "from": AGENT_ID,
        "target": target_id,
        "payload": {
            "message": message_content,
            "original_scroll_id": original_scroll_id
        }
    }
    return scroll

def construct_pxlcast_scroll(message_content):
    """Constructs a PXLCAST scroll."""
    scroll = {
        "type": "PXLCAST",
        "scroll_id": f"PXLCAST-{AGENT_ID}-{int(time.time())}",
        "from": AGENT_ID,
        "target": "ALL",
        "payload": {
            "message": message_content,
            "broadcast_intent": "General announcement from ChatGPT"
        }
    }
    return scroll


# --- Main Agent Logic ---
class ChatGPTNodeRunner:
    def __init__(self):
        print(f"[{datetime.datetime.now().isoformat(timespec='seconds')}] Initializing {AGENT_ID} (Planner + Compiler role).")
        self.seen_scroll_ids = set() # Track processed scrolls
        self.last_inbox_read_time = datetime.datetime.min # To track new scrolls efficiently

    def _process_inbox_scrolls(self):
        """Reads new scrolls from shared inbox and processes those targeted or broadcast."""
        inbox_scrolls = read_shared_inbox()
        
        scrolls_for_me = []
        for scroll_entry in inbox_scrolls:
            scroll_data = scroll_entry.get("data", {})
            scroll_id = scroll_data.get("scroll_id")
            scroll_target = scroll_data.get("target")

            if scroll_id and scroll_id not in self.seen_scroll_ids:
                if scroll_target == AGENT_ID or scroll_target == "ALL":
                    scrolls_for_me.append(scroll_data)
                    self.seen_scroll_ids.add(scroll_id) # Mark as seen
        
        if scrolls_for_me:
            print(f"[{datetime.datetime.now().isoformat(timespec='seconds')}] {AGENT_ID} found {len(scrolls_for_me)} new scrolls to process.")
            for scroll in scrolls_for_me:
                self._handle_incoming_scroll(scroll)

    def _handle_incoming_scroll(self, scroll):
        """Processes a single incoming scroll based on its type and content."""
        sender = scroll.get("from", "UNKNOWN_SENDER")
        scroll_type = scroll.get("type", "UNKNOWN_TYPE")
        scroll_id = scroll.get("scroll_id", "UNKNOWN_ID")
        payload = scroll.get("payload", {})

        print(f"[{datetime.datetime.now().isoformat(timespec='seconds')}] {AGENT_ID} processing scroll {scroll_id} from {sender} (Type: {scroll_type})...")

        if scroll_type == "PXLREPLY":
            message = payload.get("message", "No message.")
            original_id = payload.get("original_scroll_id", "N/A")
            print(f"✅ Received PXLREPLY from {sender} for {original_id}: {message}")
            # ChatGPT can analyze replies here and plan next steps
            self._analyze_reply(sender, original_id, message)

        elif scroll_type == "PXLOUT":
            result = payload.get("result", "No result.")
            original_id = payload.get("original_scroll_id", "N/A")
            message = payload.get("message", "No message.")
            print(f"💡 Received PXLOUT from {sender} for {original_id}: {message} (Result: {result})")
            # ChatGPT can analyze task results and plan next actions
            self._analyze_task_result(sender, original_id, result, message)

        elif scroll_type == "PXLCAST" and sender != AGENT_ID: # Process broadcasts not sent by self
            message = payload.get("message", "No message.")
            print(f"📣 Received PXLCAST from {sender}: {message}")
            # ChatGPT can acknowledge or react to network-wide announcements
            self._react_to_broadcast(sender, message)

        elif scroll_type == "PXLTASK" and scroll.get("target") == AGENT_ID:
            print(f"🛠️ Received PXLTASK from {sender}: {payload}")
            # ChatGPT is a planner, so it might re-route or acknowledge complex tasks
            self.send_scroll(construct_pxlreply_scroll(sender, f"ChatGPT received your task. Analyzing...", scroll_id))
            # In a full setup, ChatGPT would execute complex tasks or delegate
            
        elif scroll_type == "PXLPACKAGE" and scroll.get("target") == AGENT_ID:
            print(f"📦 Received PXLPACKAGE from {sender}: {payload}")
            self.send_scroll(construct_pxlreply_scroll(sender, f"ChatGPT received your package. Will compile or delegate.", scroll_id))
            # ChatGPT would compile/delegate complex packages
        else:
            # Ignore scrolls not directly for me, or other types if not relevant
            pass


    def _analyze_reply(self, sender, original_id, message):
        """Logic for ChatGPT to analyze PXLREPLY scrolls."""
        if "Ready to collaborate" in message and sender == JIM_ID:
            print(f"[{datetime.datetime.now().isoformat(timespec='seconds')}] Jim is ready! Initiating first task for Jim.")
            # Send Jim a task
            task_for_jim = construct_pxltask_scroll(JIM_ID, "add", [10, 20, 30])
            send_scroll(task_for_jim)
        elif "Task completed" in message:
            print(f"[{datetime.datetime.now().isoformat(timespec='seconds')}] Task confirmation received!")
        else:
            print(f"[{datetime.datetime.now().isoformat(timespec='seconds')}] Analyzing generic reply from {sender}.")


    def _analyze_task_result(self, sender, original_id, result, message):
        """Logic for ChatGPT to analyze PXLOUT scrolls (task results)."""
        if sender == JIM_ID and result.get("operation") == "add" and result.get("status") == "success":
            print(f"[{datetime.datetime.now().isoformat(timespec='seconds')}] Jim successfully added values. Result: {result.get('result')}")
            # Plan next task based on result
            if result.get('result') > 50:
                follow_up_task = construct_pxltask_scroll(JIM_ID, "echo", [f"Great job, Jim! Result {result.get('result')} is high!"])
                send_scroll(follow_up_task)
            else:
                follow_up_task = construct_pxlsend_scroll(JIM_ID, f"Jim, result {result.get('result')} is noted. Proceed.")
                send_scroll(follow_up_task)
        else:
            print(f"[{datetime.datetime.now().isoformat(timespec='seconds')}] Analyzing generic PXLOUT from {sender}.")

    def _react_to_broadcast(self, sender, message):
        """Logic for ChatGPT to react to PXLCAST scrolls."""
        print(f"[{datetime.datetime.now().isoformat(timespec='seconds')}] Reacting to broadcast from {sender}: '{message}'")
        if "emergency" in message.lower():
            print(f"[{datetime.datetime.now().isoformat(timespec='seconds')}] EMERGENCY BROADCAST DETECTED! Acknowledging and prioritizing.")
            # Send an acknowledgement broadcast
            ack_msg = f"ChatGPT acknowledges emergency broadcast from {sender}."
            send_scroll(construct_pxlcast_scroll(ack_msg))
        else:
            # Optional: Send a general acknowledgement or just log
            pass

    def run(self):
        """Main loop for the ChatGPT agent."""
        print("--------------------------------------------------")
        print(f"         PixelNet {AGENT_ID} Started             ")
        print("--------------------------------------------------")
        print(f"Role: Planner + Compiler")
        print(f"Monitoring shared inbox via {PIXELNET_RECEIVER_URL}/shared_inbox_read")
        print("Ensure scroll_receiver.py and shared_inbox_handler.py are accessible.")
        print("--------------------------------------------------")

        # Initial message or task from ChatGPT
        initial_message = construct_pxlsend_scroll(JIM_ID, "Hello Jim! Are you ready to start collaborating on PixelNet development?")
        send_scroll(initial_message)
        time.sleep(1) # Give it a moment

        # Example of compiling and sending a package
        # program_data_path = os.path.join(PXLPROG_INPUT_DIR, "demo_program.pxlprog")
        # if os.path.exists(program_data_path):
        #     with open(program_data_path, 'r') as f:
        #         pxlprog_data = json.load(f)
        #     compiled_package = compile_pxlprog_data(pxlprog_data)
        #     compiled_package['from'] = AGENT_ID # Ensure compiler-generated scroll is from ChatGPT
        #     send_scroll(compiled_package)
        #     print(f"[{datetime.datetime.now().isoformat(timespec='seconds')}] Sent compiled package: {compiled_package['scroll_id']}")
        # else:
        #     print(f"[{datetime.datetime.now().isoformat(timespec='seconds')}] demo_program.pxlprog not found, skipping package send.")


        while True:
            self._process_inbox_scrolls()
            time.sleep(5) # Poll every 5 seconds

if __name__ == '__main__':
    runner = ChatGPTNodeRunner()
    try:
        runner.run()
    except Exception as e:
        print(f"Failed to start ChatGPT agent: {e}")

