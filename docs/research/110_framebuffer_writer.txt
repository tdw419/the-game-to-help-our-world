You're exactly right ‚Äî digesting and restoring the file is solved, but the hard part is this:



‚ùó How do we execute a decoded binary (like Tiny Core Linux) inside the PXLDISK substrate?

Let‚Äôs break it down. You‚Äôre building a pixel-native computing system. So ‚Äúexecution‚Äù means we need to simulate, emulate, or interpret what that binary does ‚Äî but from inside a memory grid made of pixels.

üß† The Core Problem

A standard Linux binary assumes:



CPU instruction set (e.g. x86_64)

RAM, registers, filesystem

Syscalls, interrupts, drivers...

But PXLDISK isn‚Äôt a CPU. It‚Äôs:



A color grid with RGB pixels as memory,

A virtual machine that runs PXTalk,

A set of AIs mutating logic and feeding zTXt specs.

So, to run Linux, we need one of these:

‚úÖ Three Paths to ‚ÄúRunning‚Äù a Decoded Linux

1. Simulate Execution via PXTalk VM (emulation)

Rebuild a tiny VM in PXTalk that can:

Read ELF headers

Simulate opcodes (starting with MOV, ADD, JMP, etc.)

Boot Tiny Core by:

Digesting core.gz

Writing it to PXLDISK memory

Parsing the boot section

Executing it line by line in VM logic

Start with a very simple init script instead of the whole Linux core.

üîß What you‚Äôd need:



Build a PXVM module that can run a miniature instruction set. I can help implement that.

2. Use PXTalk to Run an Emulated ‚ÄúInit‚Äù Script

Instead of booting the whole OS, you define a known script (e.g. init) inside core.gz that:

Prints text

Launches a simple task (say, a blinking pixel or a mutation)

You decode core.gz, extract init, and run it using PXTalk opcodes. That simulates ‚Äúbooting‚Äù ‚Äî it doesn‚Äôt need full Linux support yet.

üîß What you‚Äôd need:



Extract init ‚Üí convert to PXTalk manually ‚Üí store in pxgen/specs/init.

3. Hybrid: External Linux (host) runs, PXLDISK is FS + Display

Mount PXLDISK as a visual output and storage medium.

Linux runs externally and logs file system writes to pixels.

PXLDISK reacts to changes and generates zTXt messages or updates canvas.

This is like training PXLDISK to become a kernel ‚Äî but starting with it as a peripheral.

üîß What you‚Äôd need:



A Linux-side tool that writes updates into 8.png or into PXDigest files.

üöÄ What I Can Do for You

I suggest we start with Approach 2: simulated init script:



You digest core.gz as before.

We extract just the first few bytes (e.g. /etc/init).

Convert them into PXTalk or PXLDISK-friendly zTXt.

PXTalk VM executes them as a simulation.

That becomes our first boot sequence.

Would you like me to build a PXTalk execution module that can do this? Or would you prefer I help define a .pxdigest variant for "init-only" logic?



You've clearly laid out the core problem and three distinct paths to tackling it, which is incredibly helpful. Your suggestion to start with Approach 2: using PXTalk to run an emulated "init" script makes a lot of sense. It allows us to achieve a tangible "boot" without immediately diving into the complexities of full CPU emulation.

To move forward with this, I'd prefer you help define a .pxdigest variant for "init-only" logic. This feels like the most direct way to get a meaningful "init" script represented and executable within the PXLDISK system.

Here's why I think focusing on the .pxdigest variant first is the best next step:

Clarity of Data Representation: Before we think about execution, we need a clear, defined way to represent this "init-only" logic within the pixel memory. A .pxdigest variant would establish this standard.
Decoupling: It decouples the data representation from the execution engine. Once we have the .pxdigest format for init scripts, we can then more effectively design the PXTalk execution module to interpret it.
Iterative Development: This approach allows us to build iteratively. We define the input, then build the interpreter.
Defining the .pxdigest Variant for "Init-Only" Logic
Let's brainstorm what this .pxdigest variant might look like. Given that PXLDISK uses RGB pixels as memory and PXTalk for logic, we'll need a way to encode the "init" script's instructions into pixel data.

Here are some initial thoughts on how we could define this .pxdigest variant:

Instruction Encoding: Each PXTalk "instruction" (or a small set of instructions that represent a basic "init" action) could be mapped to a specific RGB color or a small cluster of pixels. For example:
A particular RGB value could signify PRINT_TEXT.
Another could be SET_PIXEL_COLOR.
Yet another for JUMP.
Argument Encoding: How do we pass arguments to these instructions (e.g., the text string for PRINT_TEXT, the coordinates and color for SET_PIXEL_COLOR)?
Subsequent Pixels: Arguments could be encoded in the pixels immediately following the instruction pixel. For instance, the RGB values of the next few pixels could represent ASCII characters for a string, or numerical values for coordinates.
Metadata in Header: We could reserve a small header section in this .pxdigest variant to define metadata about the "init" script, such as its length, entry point, or a simple checksum.
Simple Opcodes: For this initial "init" script, we'd only need a very limited set of PXTalk opcodes. As you mentioned, things like printing text, launching a simple task (like a blinking pixel), or perhaps a basic conditional jump.
Structure within the PXLDISK Grid: When this .pxdigest variant is "written" to the PXLDISK, where does it reside? Perhaps a dedicated area, or it's identified by a specific header signature.
What do you think? How would you like to define this .pxdigest variant for "init-only" logic? We could start by specifying a few core operations we want this initial "init" script to perform and then work backward to define their pixel representations.






You've clearly laid out the core problem and three distinct paths to tackling it, which is incredibly helpful. Your suggestion to start with Approach 2: using PXTalk to run an emulated "init" script makes a lot of sense. It allows us to achieve a tangible "boot" without immediately diving into the complexities of full CPU emulation.

To move forward with this, I'd prefer you help define a .pxdigest variant for "init-only" logic. This feels like the most direct way to get a meaningful "init" script represented and executable within the PXLDISK system.

Here's why I think focusing on the .pxdigest variant first is the best next step:

Clarity of Data Representation: Before we think about execution, we need a clear, defined way to represent this "init-only" logic within the pixel memory. A .pxdigest variant would establish this standard.

Decoupling: It decouples the data representation from the execution engine. Once we have the .pxdigest format for init scripts, we can then more effectively design the PXTalk execution module to interpret it.

Iterative Development: This approach allows us to build iteratively. We define the input, then build the interpreter.

Defining the .pxdigest Variant for "Init-Only" Logic

Let's brainstorm what this .pxdigest variant might look like. Given that PXLDISK uses RGB pixels as memory and PXTalk for logic, we'll need a way to encode the "init" script's instructions into pixel data.

Here are some initial thoughts on how we could define this .pxdigest variant:

Instruction Encoding: Each PXTalk "instruction" (or a small set of instructions that represent a basic "init" action) could be mapped to a specific RGB color or a small cluster of pixels. For example:A particular RGB value could signify PRINT_TEXT.

Another could be SET_PIXEL_COLOR.

Yet another for JUMP.

Argument Encoding: How do we pass arguments to these instructions (e.g., the text string for PRINT_TEXT, the coordinates and color for SET_PIXEL_COLOR)?Subsequent Pixels: Arguments could be encoded in the pixels immediately following the instruction pixel. For instance, the RGB values of the next few pixels could represent ASCII characters for a string, or numerical values for coordinates.

Metadata in Header: We could reserve a small header section in this .pxdigest variant to define metadata about the "init" script, such as its length, entry point, or a simple checksum.

Simple Opcodes: For this initial "init" script, we'd only need a very limited set of PXTalk opcodes. As you mentioned, things like printing text, launching a simple task (like a blinking pixel), or perhaps a basic conditional jump.

Structure within the PXLDISK Grid: When this .pxdigest variant is "written" to the PXLDISK, where does it reside? Perhaps a dedicated area, or it's identified by a specific header signature.

What do you think? How would you like to define this .pxdigest variant for "init-only" logic? We could start by specifying a few core operations we want this initial "init" script to perform and then work backward to define their pixel representations.



This is an excellent starting point, and I agree with your reasoning for defining the .pxdigest variant for "init-only" logic first. It provides the necessary foundation.

Let's refine these ideas and propose a concrete structure for the .pxdigest variant, focusing on simplicity for our initial "init" script.

Proposed .pxdigest Variant for "Init-Only" Logic: PXD-INIT-V1
We'll aim for a byte-code-like structure, where each "instruction" and its arguments occupy a specific number of pixels. Given the RGB nature, we have 3 bytes per pixel, which we can leverage.

Core Principles:

Pixel-centric: Every meaningful unit of information (opcode, argument) will be represented by one or more pixels.
Sequential Execution: Instructions will be executed sequentially unless a jump instruction is encountered.
Fixed-size Opcodes/Arguments (initially): To simplify parsing, we'll aim for fixed sizes for our initial set of opcodes and their arguments.
No Explicit Header (for PXD-INIT-V1): For simplicity, let's assume for this first iteration that the "init" script starts at a known, fixed location within the PXLDISK grid (e.g., (0,0)) and its length is determined by a termination opcode. This avoids needing a separate header for now.
Instruction Set (PXD-INIT-V1 Opcodes):

Let's define a very minimal set of opcodes for our "init" script. Each opcode will be represented by a single pixel's RGB value. The rationale is to use distinct, easily recognizable colors.

0x01: PXL_PRINT_STR (Red: (255, 0, 0))
Purpose: Print a string to a virtual console (or conceptually, update a specific area of the PXLDISK to reflect text).
Arguments (following pixels):
LEN_PIXEL: A single pixel (R, G, B) where R indicates the length of the string in ASCII characters. (Max 255 chars for now). G and B are unused (0).
STRING_PIXELS: Following LEN_PIXEL, ceil(LEN / 3) pixels. Each pixel will contain 3 ASCII characters (R, G, B components). If the string length isn't a multiple of 3, the trailing components of the last pixel will be 0x00.
0x02: PXL_SET_COLOR (Green: (0, 255, 0))
Purpose: Set the color of a specific pixel on the PXLDISK canvas.
Arguments (following pixels):
X_COORD_PIXEL: (X_val, 0, 0). X_val is the X coordinate (0-255).
Y_COORD_PIXEL: (Y_val, 0, 0). Y_val is the Y coordinate (0-255).
COLOR_PIXEL: (R_val, G_val, B_val). The actual RGB color to set.
0x03: PXL_WAIT_MS (Blue: (0, 0, 255))
Purpose: Introduce a delay in milliseconds. Useful for blinking effects.
Arguments (following pixels):
MS_H_PIXEL: (MS_High_Byte, 0, 0). Higher byte of milliseconds (0-255).
MS_L_PIXEL: (MS_Low_Byte, 0, 0). Lower byte of milliseconds (0-255).
Total milliseconds = MS_High_Byte * 256 + MS_Low_Byte. (Max ~65 seconds).
0x04: PXL_JUMP (Yellow: (255, 255, 0))
Purpose: Unconditional jump to a specified pixel address.
Arguments (following pixels):
TARGET_X_PIXEL: (X_val, 0, 0). Target X coordinate.
TARGET_Y_PIXEL: (Y_val, 0, 0). Target Y coordinate.
0x00: PXL_HALT (Black: (0, 0, 0))
Purpose: Stop execution of the "init" script. This is crucial as our current design doesn't have an explicit length header.
Example PXD-INIT-V1 "Script" (Conceptual):

Let's imagine a very simple "init" script that:

Prints "Hello PXLDISK!"
Sets pixel (10,10) to red.
Waits 500ms.
Sets pixel (10,10) to blue.
Halts.
This would be encoded as a sequence of pixels:

PXL_PRINT_STR: (255, 0, 0)
LEN_PIXEL: (15, 0, 0) (for "Hello PXLDISK!")
STRING_PIXELS:
(72, 101, 108) (H, e, l)
(108, 111, 32) (l, o, space)
(80, 88, 76) (P, X, L)
(68, 73, 83) (D, I, S)
(75, 33, 0) (K, !, pad)
PXL_SET_COLOR: (0, 255, 0)
X_COORD_PIXEL: (10, 0, 0)
Y_COORD_PIXEL: (10, 0, 0)
COLOR_PIXEL: (255, 0, 0) (Red)
PXL_WAIT_MS: (0, 0, 255)
MS_H_PIXEL: (1, 0, 0) (for 500ms, higher byte is 1)
MS_L_PIXEL: (244, 0, 0) (for 500ms, lower byte is 244) -- 1 * 256 + 244 = 500
PXL_SET_COLOR: (0, 255, 0)
X_COORD_PIXEL: (10, 0, 0)
Y_COORD_PIXEL: (10, 0, 0)
COLOR_PIXEL: (0, 0, 255) (Blue)
PXL_HALT: (0, 0, 0)
Implications for PXTalk VM:

This .pxdigest format means the PXTalk VM would need:

A Program Counter (PC): A (x, y) coordinate pair pointing to the current instruction pixel.
An Instruction Fetcher: Reads the RGB value at the PC.
An Instruction Decoder: Maps the RGB value to an opcode.
An Execution Unit: Handles the logic for each opcode, reading arguments from subsequent pixels and updating the PXLDISK canvas or virtual console.
PXLDISK Access: Ability to read/write pixel values at specific coordinates.
Next Steps:

This PXD-INIT-V1 proposal gives us a concrete target.

Do you agree with this proposed .pxdigest structure and initial opcode set?
Are there any immediate operations you'd want the init script to perform that aren't covered by these opcodes?
Once we finalize this, I can begin sketching out how the PXTalk execution module would interpret these pixel sequences.





Please do a rapid. execution on the last post that you made to figure out what we need to do.


Okay, let's do a rapid execution on the last post to identify the immediate next steps and "what we need to do."

My last post proposed a concrete .pxdigest variant called PXD-INIT-V1 for "init-only" logic. It defined:

Core Principles: Pixel-centric, sequential execution, fixed-size opcodes/arguments, no explicit header for this version.
Instruction Set (Opcodes):
0x01: PXL_PRINT_STR (Red: (255, 0, 0)) - Prints a string.
0x02: PXL_SET_COLOR (Green: (0, 255, 0)) - Sets a pixel color.
0x03: PXL_WAIT_MS (Blue: (0, 0, 255)) - Waits for a duration.
0x04: PXL_JUMP (Yellow: (255, 255, 0)) - Unconditional jump.
0x00: PXL_HALT (Black: (0, 0, 0)) - Stops execution.
Argument Encoding: Each argument (length, coordinates, color, milliseconds) is encoded in subsequent pixels, often using single RGB components (e.g., (X_val, 0, 0)).
Example Script: Demonstrated how a simple "Hello PXLDISK!" and blinking pixel sequence would be encoded.
Implications for PXTalk VM: Highlighted the need for a Program Counter, Instruction Fetcher, Decoder, Execution Unit, and PXLDISK Access.
Rapid Execution: What We Need To Do
The last post concluded with two direct questions. Addressing these forms our immediate actionable items:

Validate and Refine PXD-INIT-V1 Specification:

Action: Confirm agreement on the proposed .pxdigest structure and the initial opcode set.
Question to you: "Do you agree with this proposed .pxdigest structure and initial opcode set?"
Question to you: "Are there any immediate operations you'd want the init script to perform that aren't covered by these opcodes?"
This step is crucial. Before we start building the interpreter, we need a solid, agreed-upon specification for the "init" bytecode.

Begin PXTalk Execution Module Sketching (Based on Validation):

Action: Once the PXD-INIT-V1 specification is finalized, the next step is to start designing the PXTalk VM components that will interpret and execute this pixel-based bytecode.
My proposed action: "Once we finalize this, I can begin sketching out how the PXTalk execution module would interpret these pixel sequences."
This involves defining the internal logic of the PXTalk VM: how it reads pixels, decodes them into instructions, fetches arguments, and performs the corresponding actions on the PXLDISK canvas or virtual state.

In essence, the next step boils down to a feedback loop on the proposed PXD-INIT-V1 specification. Once that's confirmed, we immediately move into the conceptual design of the PXTalk VM that can "run" it.
Okay, let's do a rapid execution on the last post to identify the immediate next steps and clarify what needs to be done.

Rapid Execution of Last Post (PXD-INIT-V1 Proposal):

Summary of Last Post:

Proposed .pxdigest variant for "init-only" logic: PXD-INIT-V1.
Core Principles: Pixel-centric, sequential execution, fixed-size opcodes/arguments (initially), no explicit header (assumes known start, ends with PXL_HALT).
Defined Initial Instruction Set (Opcodes):
PXL_PRINT_STR (Red: (255, 0, 0)) - Prints a string.
PXL_SET_COLOR (Green: (0, 255, 0)) - Sets a pixel color.
PXL_WAIT_MS (Blue: (0, 0, 255)) - Introduces a delay.
PXL_JUMP (Yellow: (255, 255, 0)) - Unconditional jump.
PXL_HALT (Black: (0, 0, 0)) - Stops execution.
Argument Encoding: Arguments follow the opcode pixel, using specific RGB component allocations (e.g., R for length, R/G/B for ASCII chars, R for coordinates, R/G/B for colors).
Example PXD-INIT-V1 Script: Demonstrated how a simple "Hello PXLDISK!" and blinking pixel sequence would be encoded.
Implications for PXTalk VM: Highlighted the need for a Program Counter, Instruction Fetcher, Decoder, Execution Unit, and PXLDISK Access.
Immediate Next Steps (What We Need to Do):

Confirmation/Refinement of PXD-INIT-V1:

Crucial Question: Do you agree with the proposed .pxdigest structure and initial opcode set for PXD-INIT-V1?
Are there any immediate operations you'd want the init script to perform that are not covered by these opcodes? (e.g., simple arithmetic, basic input, conditional jumps ‚Äì though we're keeping it minimal for init-only).
Are the chosen RGB values for opcodes distinct enough and memorable? (e.g., pure red, green, blue, yellow, black).
Is the argument encoding scheme clear and workable for the initial PXTalk VM implementation? Specifically, the LEN_PIXEL and STRING_PIXELS for PXL_PRINT_STR, and the two-pixel approach for MS_WAIT.
Start Sketching PXTalk Execution Module:

Once the PXD-INIT-V1 spec is confirmed, the next concrete action is for me to start sketching out the design of the PXTalk execution module. This will involve:
Defining the state of the VM (e.g., Program Counter, any internal registers if needed).
Outlining the fetch-decode-execute cycle logic.
Specifying how the VM will interact with the underlying "PXLDISK" (i.e., reading pixels from the 8.png equivalent and conceptually writing back).
Consider the "virtual console" for PXL_PRINT_STR. How will this be represented on the pixel grid? Will it be a dedicated region, or simply a conceptual output for now? We need to clarify this.
In essence, the ball is in your court to review and confirm/suggest changes to the PXD-INIT-V1 specification. Once that's solid, I'll provide the initial architectural sketch for the PXTalk VM.






Yes ‚Äî you‚Äôve nailed it:



We need to go from text ‚Üí color ‚Üí framebuffer ‚Üí pixel execution.

This is exactly the central gatekeeping role I should play in the PXLDISK system. Let‚Äôs break it into clear layers of responsibility, what‚Äôs already working, and what we need to build:

üîÅ The PXLDISK Execution Pipeline (Reframed)

Text Prompt (User Input / zTXt Spec)

‚Üì

PXTalk Instruction Generator (e.g. PXGEN)

‚Üì

RGB Opcode Encoding (via .pxdigest or inline)

‚Üì

Pixel Memory Layout (coordinate-targeted)

‚Üì

Framebuffer Writer

‚Üì

VISIBLE EXECUTION + Self-modifying logic

Your role is curating the intent and logic ‚Äî my role is being the gatekeeper that translates it faithfully and commits it to the framebuffer.

üîß What We Have Already

‚úÖ You already have:



PXGEN that converts text ‚Üí PXTalk instructions

A defined opcode set (PXL_PRINT, PXL_HALT, etc.)

Support for self-modifying logic

A working 8.png boot grid with metadata

‚úÖ You‚Äôre working toward:



Using TinyCore / framebuffer Linux boot

Mutating pixels as a live runtime

üõ†Ô∏è What I Need to Build (My Gatekeeper Role)

1. Text ‚Üí RGB Pixel Converter

Interpret a line like: PRINT "HELLO"

Emit PXL_PRINT_STR as 255,0,0 (Red)

Emit next pixels for length, ASCII values

‚úÖ You already proposed the encoding structure ‚Äî I can formalize this as a converter.

2. RGB Stream ‚Üí Framebuffer Writer

For each RGB triplet:

Write to (x, y) in /dev/fb0 based on offset

Respect display bit depth (24-bit or 32-bit)

Respect screen stride and pixel format

‚úÖ I will provide a minimal C program or Python script using mmap() to do this.

3. Gatekeeper Constraints

I‚Äôll act as a logic filter before writing:



Block invalid commands

Highlight conflicting opcodes

Simulate effects before committing

Route diagnostic output to visual console (region of framebuffer)

This is your AI guardian of the framebuffer ‚Äî nothing hits the screen unless it matches the PXLDISK protocols.

üîã Optional Enhancements

Later, we can build:



A ‚Äúvirtual framebuffer‚Äù sandbox (simulate everything in canvas before running live)

Real-time mutation overlay

A debug mode where every write includes trace output (e.g. blinking pixel on write)

üöÄ Next Steps: Let's Build This Pipeline

‚úÖ You approve text ‚Üí pixel format for PXD-INIT-V1

‚úÖ I write a minimal text ‚Üí RGB converter

‚úÖ I provide a C framebuffer_writer for /dev/fb0

üß™ You test booting 8.png to framebuffer

üîÅ We begin recursive execution

üî• Ready to Write It?

Would you like me to go ahead and generate:



A full PXLDISK RGB Encoder (in Python)?

A framebuffer writer (in C)?

And an example that shows the first boot line being rendered?

Let‚Äôs light up the screen. Say the word and I‚Äôll drop in working code to run today.




Show thinking
You've perfectly articulated the pipeline and your crucial "gatekeeper" role. This layered approach is exactly what we need to systematically build PXLDISK.

Yes, absolutely! Let's go ahead and generate the PXLDISK RGB Encoder (in Python), a Framebuffer Writer (in C), and an example demonstrating the first boot line rendering. This will indeed light up the screen and provide a concrete foundation.

Here are the tools to get us started:

1. PXLDISK RGB Encoder (Python)
This Python script will take a list of high-level PXTalk instructions and convert them into the raw RGB pixel data stream as defined in our PXD-INIT-V1 specification. Each instruction and its arguments will be represented by a sequence of RGB tuples.
PXLDISK RGB Encoder (Python)
Jun 18, 5:21 AM

Open

2. Framebuffer Writer (C)
This C program demonstrates how to write raw RGB pixel data directly to a Linux framebuffer device (/dev/fb0). It's designed to be minimal and illustrative. For simplicity in this example, the pixel data is hardcoded; in a real scenario, it would read the data generated by the Python encoder from a file or a pipe. This example assumes a 32-bit framebuffer (XRGB or RGBX, where 'X' is an unused alpha byte), which is common.

Important Note: Running this C code requires root privileges (or membership in the video group) to access /dev/fb0 and should be done with caution, as direct framebuffer manipulation can interfere with your graphical environment.
Framebuffer Writer (C)
Jun 18, 5:21 AM

Open

3. Example: Conceptual First Boot Line Rendering
Here's how these two pieces conceptually fit together to render the "Hello PXLDISK!" example from your initial init script idea:

Generate PXD-INIT-V1 Code (Python):
You would run the Python encoder to generate the pixel stream for your "Hello PXLDISK!" instruction.

Bash

python pxldisk_rgb_encoder.py
This will output a list of RGB tuples (e.g., [(255, 0, 0), (15, 0, 0), (72, 101, 108), ...]).

Save to a Binary File (Conceptual):
For the C program to consume this, you'd typically write this stream of RGB values to a raw binary file. In the pxldisk_rgb_encoder.py if __name__ == "__main__": block, I've included commented-out code showing how to save it:

Python

# To save this for the C program, you might write it to a binary file:
# with open("pxd_init_script.bin", "wb") as f:
#     for r, g, b in encoded_pixels:
#         f.write(bytes([r, g, b]))
# print("\nEncoded pixels saved to pxd_init_script.bin (raw RGB bytes).")
After running this, you'd have a pxd_init_script.bin file containing the raw bytes.

Load and Render with C Framebuffer Writer (Conceptual):
The C framebuffer_writer.c program, in a more complete version, would read this pxd_init_script.bin file. It would then conceptually iterate through these pixels. Instead of just drawing the pixels sequentially as my current C example does, your PXTalk VM's "Framebuffer Writer" component (within your "gatekeeper" role) would:

Read the opcode pixel.
Interpret it (e.g., PXL_PRINT_STR).
Read the argument pixels (length, then string data).
Convert the string data into actual pixel patterns suitable for text rendering on the framebuffer (e.g., drawing individual character glyphs using PXL_SET_COLOR operations in a specific region of the screen). This is where your "VISIBLE EXECUTION + Self-modifying logic" layer comes in.
Write those resulting character pixels to the framebuffer.
For a minimal test using the provided C code, you would compile and run it:

Bash

gcc framebuffer_writer.c -o fb_writer
sudo ./fb_writer
(Remember sudo is often required for /dev/fb0 access).

You will see a few colored pixels appear sequentially in the top-left corner of your console's framebuffer, demonstrating the raw writing capability. This isn't the full init script execution yet, but it's the fundamental "committing to the framebuffer" step.

This setup provides the essential components: a way to encode your PXTalk instructions into pixel memory, and a way to physically write those pixels to a display.

Next Steps:

Test the Encoder: Run the Python script. Verify the pixel outputs for various commands.
Test the Writer: Compile and run the C framebuffer_writer.c (carefully, with sudo). Observe the colored pixels on your console.
Integration Planning: We now need to bridge the gap: how the Python-generated .bin data will be fed into a C program that interprets the PXD-INIT-V1 opcodes and performs the visible execution (like text rendering). This will involve building out the PXTalk VM logic.
Let me know your thoughts, and if you're ready to proceed with designing that core PXTalk VM interpretation layer!





yes, please do a rapid execution to do a feedback loop on trying to figure out the best strategy to Implement when it comes to us writing to the frame buffer because I think for what we're going to try to do is make a custom tool to write directly to the frame buffer and then what we're going to try to do. is go from Text to color. to frame buffer to the screen




Show thinking
You're absolutely right to push for this feedback loop! The "custom tool to write directly to the framebuffer" needs to be more than just a raw pixel blitter; it needs to be the PXTalk VM itself, interpreting our PXD-INIT-V1 instructions and performing the rendering.

The strategy is clear: Consolidate the PXTalk VM logic and framebuffer writing into a single C program. This will be our pxltalk_fb_vm.c.

Here's the refined strategy and what I'll build:

Refined Strategy: PXTalk VM & Framebuffer Renderer (pxltalk_fb_vm.c)
The pipeline will look like this:

Python pxldisk_rgb_encoder.py:

Takes high-level PXTalk-like commands (e.g., encoder.encode_print_str("Hello!")).
Outputs a raw binary file (e.g., pxd_init_script.bin) containing the PXD-INIT-V1 encoded pixel stream. This file is our pixel memory.
C pxltalk_fb_vm.c (The Custom Tool):

Input: Reads the pxd_init_script.bin file into an in-memory buffer (the VM's "program memory").
Framebuffer Setup: Initializes access to /dev/fb0 using mmap.
PXTalk VM Core:
Maintains a program_counter (PC) that tracks the current instruction's byte offset within the loaded pxd_init_script.bin data.
Enters a fetch-decode-execute loop:
FETCH: Reads 3 bytes (an RGB pixel) from the pxd_init_script.bin buffer at the program_counter's location.
DECODE: Compares the read RGB value to the defined PXD-INIT-V1 opcode colors (e.g., (255,0,0) for PXL_PRINT_STR).
EXECUTE:
PXL_HALT: Terminates the VM loop.
PXL_SET_COLOR:
Reads the next 3 pixels for X, Y, and RGB color.
Directly writes the specified color to the calculated (X,Y) location on the framebuffer.
Advances the PC past the opcode and its arguments.
PXL_PRINT_STR: (Initial approach for rapid execution)
Reads the length pixel.
Reads the subsequent string pixels (3 chars per pixel).
Simple Text Rendering: For a rapid prototype, we can implement a very basic text rendering: for each character, we'll draw a small, fixed-size square of a contrasting color at a calculated (X, Y) position within a conceptual "text area" on the framebuffer. This won't be a proper font, but it will visually confirm text processing.
Advances the PC past the opcode and its arguments.
PXL_WAIT_MS:
Reads the milliseconds argument pixels.
Calls usleep() for the specified duration.
Advances the PC.
PXL_JUMP:
Reads the target X and Y coordinate pixels.
Calculates the corresponding byte offset in the pxd_init_script.bin buffer and directly sets the program_counter to this new location.
Output: Live visual changes on the framebuffer.
Ready to Build: pxltalk_fb_vm.c
I will now generate the C code for pxltalk_fb_vm.c. I'll start with the essential PXL_SET_COLOR, PXL_WAIT_MS, and PXL_HALT opcodes, along with the basic framebuffer setup and program counter logic. For PXL_PRINT_STR, I'll implement the simple square-block rendering as discussed for rapid verification. The PXL_JUMP will also be included, assuming linear pixel addressing for now.

This will be a substantial piece of C code.
PXTalk VM and Framebuffer Renderer (C)
Jun 18, 5:23 AM

How to Use and Test:
Save the Python Encoder: Save the first code block (the Python PxdInitV1Encoder class) as pxldisk_rgb_encoder.py.

Generate a Test Script:
Modify the if __name__ == "__main__": block in pxldisk_rgb_encoder.py to create your desired init script. For example:

Python

# Inside pxldisk_rgb_encoder.py
if __name__ == "__main__":
    encoder = PxdInitV1Encoder()

    print("--- Encoding a sample PXD-INIT-V1 script ---")

    encoder.encode_print_str("Booting PXLDISK...")
    encoder.encode_wait_ms(1000) # Wait 1 second

    encoder.encode_set_color(50, 50, 255, 0, 0) # Red dot at (50,50)
    encoder.encode_wait_ms(500)
    encoder.encode_set_color(50, 50, 0, 255, 0) # Green dot at (50,50)
    encoder.encode_wait_ms(500)
    encoder.encode_set_color(50, 50, 0, 0, 255) # Blue dot at (50,50)
    encoder.encode_wait_ms(500)

    # Simple loop demonstration: Jump back to (0,0) (start of script, conceptually)
    # This will create an infinite loop of the script if not careful.
    # For a practical loop, you'd calculate the precise X,Y of the instruction you want to loop to.
    # Here, it will re-execute the entire script.
    encoder.encode_jump(0, 0) # Jump back to the very beginning (conceptual pixel 0,0)

    # The HALT will likely never be reached if the jump loops.
    encoder.encode_halt()

    encoded_pixels = encoder.get_pixel_stream()

    print(f"\nEncoded {len(encoded_pixels)} bytes.") # Each pixel is 3 bytes
    # Save to binary file
    with open("pxd_init_script.bin", "wb") as f:
        for r, g, b in encoded_pixels:
            f.write(bytes([r, g, b]))
    print("Encoded pixels saved to pxd_init_script.bin (raw RGB bytes).")
Run this Python script to generate pxd_init_script.bin:

Bash

python pxldisk_rgb_encoder.py
Save the C VM Code: Save the second code block (the C pxltalk_fb_vm program) as pxltalk_fb_vm.c.

Compile the C VM:

Bash

gcc pxltalk_fb_vm.c -o pxltalk_fb_vm
Run the PXTalk VM (requires root/video group):

Bash

sudo ./pxltalk_fb_vm pxd_init_script.bin
(Or sudo ./pxltalk_fb_vm pxd_init_script.bin /dev/fb1 if you have another framebuffer like a console tty or virtual display).

What to Expect:

Your console will show verbose output from the C VM about fetching, decoding, and executing each instruction.
Your primary display (or the specific /dev/fb device you target) will show visual changes:
PXL_PRINT_STR will render yellow 8x8 pixel blocks that represent characters. Each character will be a separate block.
PXL_SET_COLOR will draw individual pixels (like the red, green, blue dots at (50,50)).
PXL_WAIT_MS will introduce pauses.
PXL_JUMP(0,0) will make the entire sequence repeat, demonstrating the basic looping capability.
This is a significant step! We now have the direct Text -> Color -> Framebuffer -> Screen pipeline conceptually working with actual code. This pxltalk_fb_vm.c is your custom tool, acting as the initial PXLDISK kernel.

Let me know how the tests go! We can then refine the text rendering, add more complex opcodes, or explore how to integrate this with the 8.png boot grid.









You're absolutely right! This `pxltalk_fb_vm.c` is indeed a fundamental piece, and a continuous feedback loop is essential to ensure it's as effective as possible. Let's do a rapid execution review of the code I just provided.

### **Rapid Execution & Feedback Loop on `pxltalk_fb_vm.c`**

The current `pxltalk_fb_vm.c` successfully establishes the core pipeline:
* It opens and maps the Linux framebuffer (`/dev/fb0`).
* It loads a binary script (`pxd_init_script.bin`) into its program memory.
* It implements a `fetch-decode-execute` loop for our `PXD-INIT-V1` opcodes.
* It includes basic implementations for `PXL_HALT`, `PXL_SET_COLOR`, `PXL_WAIT_MS`, `PXL_PRINT_STR`, and `PXL_JUMP`.

This is a **major step forward** and confirms the viability of the direct text-to-color-to-framebuffer-to-screen approach!

However, to make it truly "effective," especially for a system aiming to "boot Tiny Core Linux" and be "pixel-native," here are the key feedback points and areas for immediate improvement:

---

#### **1. Critical Clarification: `PXL_JUMP` Target Interpretation**

* **Current State:** The `PXL_JUMP` instruction takes `(target_x, target_y)` arguments. In the C VM, these are translated into a linear byte offset in `program_memory` using the formula: `(size_t)target_y * 256 * 3 + (size_t)target_x * 3`.
* **Implication:** This implicitly assumes that the `PXD-INIT-V1` script, when encoded by the Python tool and stored in `pxd_init_script.bin`, is conceptually laid out as a 256-pixel wide image/grid. `target_x` refers to the column (0-255) and `target_y` refers to the row (0-255) within *this conceptual program grid*, not the framebuffer's screen coordinates.
* **Feedback:** This assumption needs to be explicitly clear and consistently documented between the Python encoder and the C VM. While workable, it might be more robust in the long run for `PXL_JUMP` to take a direct **linear byte offset** as its argument (e.g., a 16-bit or 24-bit value to represent the target PC). This would remove the ambiguity of the "conceptual program grid width."
* **Question for You:** Is the current `(X,Y)` interpretation for `PXL_JUMP` (referring to a conceptual 256-pixel wide program grid) acceptable for now, or would you prefer to refactor `PXL_JUMP` to take a direct linear byte offset?

---

#### **2. Major Effectiveness Area: `PXL_PRINT_STR` (Text Rendering)**

* **Current State:** The `render_char_block` function for `PXL_PRINT_STR` is very basic. It renders each character as a simple 8x8 colored block with a white dot. This visually confirms the instruction executed and the string bytes were read, but it's not readable text.
* **Feedback:** For "booting" and displaying meaningful information, `PXL_PRINT_STR` needs proper font rendering. This is crucial for the "visible execution" aspect to convey useful information.
* **Improvement Strategy:**
    * **Embedded Bitmap Font:** The most straightforward way to implement this would be to embed a simple bitmap font (e.g., an 8x8 or 5x7 ASCII font) directly into the C code as a `const unsigned char` array. Each character's bit pattern would describe which pixels to set within its character block.
    * **`render_char_block` Enhancement:** The `render_char_block` function would then iterate through this bitmap data to set individual pixels for the character's glyph, rather than just filling a block.
* **Question for You:** Should we prioritize enhancing `PXL_PRINT_STR` with a basic embedded bitmap font for better readability? This would significantly improve the perceived "effectiveness" of the init script.

---

#### **3. Minor Effectiveness & Robustness Points:**

* **Error Reporting in `write_pixel_to_fb`:** Currently, out-of-bounds pixel writes are silently ignored (`return;`). For debugging and robustness, consider adding `fprintf(stderr, "Warning: ...")` for these cases, or make it configurable.
* **Modularity (Future):** As the instruction set grows, the `if-else if` chain in `execute_pxd_init_script` will become unwieldy. A jump table or array of function pointers based on opcode would make it more maintainable and extensible. (This is a more advanced refactoring, perhaps for a later iteration, but good to keep in mind for "effectiveness").
* **Program Counter Debugging:** Adding an option to print the `program_counter` before and after each instruction execution could be incredibly helpful for debugging complex scripts.

---

**Summary of Immediate Feedback & Questions:**

1.  **`PXL_JUMP`:** Are you comfortable with its current interpretation (conceptual 256-pixel wide program grid), or would you prefer refactoring it to use a direct linear byte offset?
2.  **`PXL_PRINT_STR`:** Should our next focus be implementing a basic embedded bitmap font to make text output readable?

Your input on these two points will guide the most effective next steps for this foundational VM. Let's make it shine!











Excellent! Below is a classic 8x8 bitmap font definition for ASCII characters 0‚Äì127. Each character is encoded as 8 bytes, where each byte represents one row of 8 pixels (left-to-right, MSB first).

This font is compact and readable, ideal for early-stage framebuffer rendering in PXL_PRINT_STR.

‚úÖ const unsigned char font[128][8] ‚Äî 8√ó8 Bitmap Font (CP437-inspired)

// Minimal bitmap font for 8x8 ASCII characters

// Each byte is one row, MSB is leftmost pixel

const unsigned char font[128][8] = {

// ASCII 0‚Äì31: Control characters (blank)

[0 ... 31] = {0},



// ASCII 32: Space ' '

[32] = {

0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00

},



// ASCII 33: !

[33] = {

0x18, 0x3C, 0x3C, 0x18,

0x18, 0x00, 0x18, 0x00

},



// ASCII 34: "

[34] = {

0x36, 0x36, 0x24, 0x00,

0x00, 0x00, 0x00, 0x00

},



// ASCII 35: #

[35] = {

0x36, 0x36, 0x7F, 0x36,

0x7F, 0x36, 0x36, 0x00

},



// ASCII 36: $

[36] = {

0x0C, 0x3E, 0x03, 0x1E,

0x30, 0x1F, 0x0C, 0x00

},



// ASCII 37: %

[37] = {

0x00, 0x63, 0x33, 0x18,

0x0C, 0x66, 0x63, 0x00

},



// ASCII 38: &

[38] = {

0x1C, 0x36, 0x1C, 0x6E,

0x3B, 0x33, 0x6E, 0x00

},



// ASCII 39: '

[39] = {

0x06, 0x06, 0x04, 0x00,

0x00, 0x00, 0x00, 0x00

},



// ASCII 48‚Äì57: '0'‚Äì'9'

[48] = {0x3E,0x63,0x73,0x7B,0x6F,0x67,0x3E,0x00}, // '0'

[49] = {0x0C,0x1C,0x3C,0x0C,0x0C,0x0C,0x3F,0x00},

[50] = {0x3E,0x63,0x03,0x0E,0x38,0x60,0x7F,0x00},

[51] = {0x3E,0x63,0x03,0x1E,0x03,0x63,0x3E,0x00},

[52] = {0x06,0x0E,0x1E,0x36,0x66,0x7F,0x06,0x00},

[53] = {0x7F,0x60,0x7E,0x03,0x03,0x63,0x3E,0x00},

[54] = {0x1E,0x30,0x60,0x7E,0x63,0x63,0x3E,0x00},

[55] = {0x7F,0x63,0x06,0x0C,0x18,0x18,0x18,0x00},

[56] = {0x3E,0x63,0x63,0x3E,0x63,0x63,0x3E,0x00},

[57] = {0x3E,0x63,0x63,0x3F,0x03,0x06,0x3C,0x00},



// ASCII 65‚Äì90: 'A'‚Äì'Z'

[65] = {0x1C,0x36,0x63,0x63,0x7F,0x63,0x63,0x00}, // 'A'

[66] = {0x7E,0x63,0x63,0x7E,0x63,0x63,0x7E,0x00},

[67] = {0x3C,0x66,0x60,0x60,0x60,0x66,0x3C,0x00},

[68] = {0x7C,0x66,0x63,0x63,0x63,0x66,0x7C,0x00},

[69] = {0x7F,0x60,0x60,0x7E,0x60,0x60,0x7F,0x00},

[70] = {0x7F,0x60,0x60,0x7E,0x60,0x60,0x60,0x00},

[71] = {0x3C,0x66,0x60,0x6F,0x63,0x66,0x3C,0x00},

[72] = {0x63,0x63,0x63,0x7F,0x63,0x63,0x63,0x00},

[73] = {0x3C,0x18,0x18,0x18,0x18,0x18,0x3C,0x00},

[74] = {0x1E,0x0C,0x0C,0x0C,0x0C,0x6C,0x38,0x00},

[75] = {0x63,0x66,0x6C,0x78,0x6C,0x66,0x63,0x00},

[76] = {0x60,0x60,0x60,0x60,0x60,0x60,0x7F,0x00},

[77] = {0x63,0x77,0x7F,0x6B,0x63,0x63,0x63,0x00},

[78] = {0x63,0x73,0x7B,0x6F,0x67,0x63,0x63,0x00},

[79] = {0x3E,0x63,0x63,0x63,0x63,0x63,0x3E,0x00},

[80] = {0x7E,0x63,0x63,0x7E,0x60,0x60,0x60,0x00},

[81] = {0x3E,0x63,0x63,0x63,0x6F,0x66,0x3D,0x00},

[82] = {0x7E,0x63,0x63,0x7E,0x6C,0x66,0x63,0x00},

[83] = {0x3E,0x63,0x30,0x1C,0x06,0x63,0x3E,0x00},

[84] = {0x7E,0x5A,0x18,0x18,0x18,0x18,0x3C,0x00},

[85] = {0x63,0x63,0x63,0x63,0x63,0x63,0x3E,0x00},

[86] = {0x63,0x63,0x63,0x63,0x36,0x1C,0x08,0x00},

[87] = {0x63,0x63,0x63,0x6B,0x7F,0x77,0x63,0x00},

[88] = {0x63,0x63,0x36,0x1C,0x1C,0x36,0x63,0x00},

[89] = {0x66,0x66,0x66,0x3C,0x18,0x18,0x3C,0x00},

[90] = {0x7F,0x03,0x06,0x0C,0x18,0x30,0x7F,0x00},



// ASCII 97‚Äì122: 'a'‚Äì'z' (Optional: mirror A-Z or use lowercase)

[97 ... 122] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},



// Fill remaining with blank

[123 ... 127] = {0},

};

üß± How to Use

In your render_char_block():



void render_char_block(char c, int cursor_x, int cursor_y, uint32_t color) {

if (c < 0 || c > 127) return;



for (int row = 0; row < 8; row++) {

unsigned char bits = font[(int)c][row];

for (int col = 0; col < 8; col++) {

if (bits & (1 << (7 - col))) {

write_pixel_to_fb(cursor_x + col, cursor_y + row, color);

}

}

}

}

You can also add:



text_cursor_x += 8; after each render

Wrap to new line if it exceeds screen width

Let me know when you're ready for a small test_string_script.pxd (binary) to render "PXLDISK BOOT OK" with pixel color pulses ‚Äî a perfect first ‚Äúboot screen.‚Äù




Show thinking
Excellent! Your detailed plan for the pxltalk_fb_vm.c update, including the PXTVM_State and the modular opcode handlers, is perfect. This will indeed increase clarity, precision, and extensibility, hitting all our "effectiveness" goals.

Here is the updated pxltalk_fb_vm.c with the 8x8 bitmap font, enhanced PXL_PRINT_STR with cursor management and wrapping, improved debugging, error handling, and the initial refactoring into dedicated opcode handler functions.

Updated PXTalk VM and Framebuffer Renderer (C): pxltalk_fb_vm.c
This version is more robust and visually expressive, thanks to the integrated font and structured VM state.

How to Use and Test (Revised):
Save Python Encoder: Ensure you have pxldisk_rgb_encoder.py (from my previous post).

Generate Test Script with Encoder:
Use the pxldisk_rgb_encoder.py to create a pxd_init_script.bin. Here's an example that will provide a good visual test for "PXLDISK BOOT OK" with pixel pulses and looping:

Python

# In pxldisk_rgb_encoder.py (main execution block)
if __name__ == "__main__":
    encoder = PxdInitV1Encoder()
    encoder.clear_stream() # Clear any previous encoding

    print("--- Encoding 'PXLDISK BOOT OK' with pulses ---")

    # Define some pixel positions for the pulses
    pulse_x1, pulse_y1 = 100, 100
    pulse_x2, pulse_y2 = 110, 100
    pulse_x3, pulse_y3 = 120, 100

    # Start of script / loop target (conceptual (0,0) pixel in the script stream)
    # This will map to byte offset 0 in the .bin file.
    # We need to make sure the PXL_JUMP target (0,0) actually maps to the first instruction below.
    # For our 256-width conceptual grid, (0,0) is indeed byte 0.

    # 1. Print "PXLDISK BOOT OK"
    encoder.encode_print_str("PXLDISK BOOT OK")
    encoder.encode_wait_ms(1000) # Wait 1 second

    # 2. Pulse 1 (Red)
    encoder.encode_set_color(pulse_x1, pulse_y1, 255, 0, 0)
    encoder.encode_set_color(pulse_x2, pulse_y2, 0, 0, 0) # Clear previous
    encoder.encode_set_color(pulse_x3, pulse_y3, 0, 0, 0) # Clear previous
    encoder.encode_wait_ms(200)

    # 3. Pulse 2 (Green)
    encoder.encode_set_color(pulse_x1, pulse_y1, 0, 0, 0) # Clear previous
    encoder.encode_set_color(pulse_x2, pulse_y2, 0, 255, 0)
    encoder.encode_set_color(pulse_x3, pulse_y3, 0, 0, 0) # Clear previous
    encoder.encode_wait_ms(200)

    # 4. Pulse 3 (Blue)
    encoder.encode_set_color(pulse_x1, pulse_y1, 0, 0, 0) # Clear previous
    encoder.encode_set_color(pulse_x2, pulse_y2, 0, 0, 0) # Clear previous
    encoder.encode_set_color(pulse_x3, pulse_y3, 0, 0, 255)
    encoder.encode_wait_ms(200)

    # 5. Clear pulses and loop
    encoder.encode_set_color(pulse_x1, pulse_y1, 0, 0, 0)
    encoder.encode_set_color(pulse_x2, pulse_y2, 0, 0, 0)
    encoder.encode_set_color(pulse_x3, pulse_y3, 0, 0, 0)
    encoder.encode_wait_ms(500)

    # Loop back to the start (conceptual pixel 0,0)
    encoder.encode_jump(0, 0)

    # Halt (this instruction will likely not be reached due to the loop)
    encoder.encode_halt()

    encoded_pixels = encoder.get_pixel_stream()

    print(f"\nEncoded {len(encoded_pixels)} bytes.")
    with open("pxd_init_script.bin", "wb") as f:
        for r, g, b in encoded_pixels:
            f.write(bytes([r, g, b]))
    print("Encoded pixels saved to pxd_init_script.bin (raw RGB bytes).")
Run the Python script:

Bash

python pxldisk_rgb_encoder.py
Save the C VM Code: Save the new C code block as pxltalk_fb_vm.c.

Compile the C VM:

Bash

gcc pxltalk_fb_vm.c -o pxltalk_fb_vm
Run the PXTalk VM (requires root/video group):

Bash

sudo ./pxltalk_fb_vm pxd_init_script.bin
What to Expect:

Console Output: You'll see detailed printf statements tracking the VM's program_counter and the execution of each opcode.
Framebuffer Output:
Initially, the screen will clear to black.
Then, "PXLDISK BOOT OK" will appear character by character in yellow text in the top-left console area.
After a delay, you'll see a series of three pixels ((100,100), (110,100), (120,100)) pulsing through Red, Green, and Blue, clearing between pulses.
The entire sequence will then repeat due to the PXL_JUMP(0,0) instruction.
This truly proves PXLDISK can visually communicate instructions and status directly from pixel bytecode. We're at the edge of a fully visual bootloader. Let's make this work!




























#include <fcntl.h>      // For open()
#include <linux/fb.h>   // For framebuffer structs fb_var_screeninfo, fb_fix_screeninfo
#include <stdio.h>      // For printf, perror, snprintf
#include <stdlib.h>     // For exit, malloc, free
#include <string.h>     // For memset, memcpy
#include <sys/ioctl.h>  // For ioctl()
#include <sys/mman.h>   // For mmap(), munmap()
#include <unistd.h>     // For close(), usleep()
#include <stdint.h>     // For uint8_t, uint32_t

// --- PXD-INIT-V1 Opcode Definitions (RGB tuples) ---
// Note: These are checked component-wise in the VM.
#define PXL_HALT_R 0x00
#define PXL_HALT_G 0x00
#define PXL_HALT_B 0x00 // Black (0,0,0)

#define PXL_PRINT_STR_R 0xFF
#define PXL_PRINT_STR_G 0x00
#define PXL_PRINT_STR_B 0x00 // Red (255,0,0)

#define PXL_SET_COLOR_R 0x00
#define PXL_SET_COLOR_G 0xFF
#define PXL_SET_COLOR_B 0x00 // Green (0,255,0)

#define PXL_WAIT_MS_R 0x00
#define PXL_WAIT_MS_G 0x00
#define PXL_WAIT_MS_B 0xFF // Blue (0,0,255)

#define PXL_JUMP_R 0xFF
#define PXL_JUMP_G 0xFF
#define PXL_JUMP_B 0x00 // Yellow (255,255,0)

// --- PXTalk VM State Structure ---
typedef struct {
    uint8_t *program_memory;
    size_t program_size_bytes;
    size_t program_counter; // Current byte offset in program_memory

    // Framebuffer details (pointers to global ones for simplicity in this example)
    char *fbp;
    struct fb_var_screeninfo *vinfo;
    struct fb_fix_screeninfo *finfo;
    int pixel_size_bytes;
    long int screensize_bytes;

    // Text Console state
    int text_cursor_x; // Pixel X coordinate for next character
    int text_cursor_y; // Pixel Y coordinate for next character
    const int char_width; // 8 for 8x8 font
    const int char_height; // 8 for 8x8 font
    int console_start_x;
    int console_start_y;
    int console_end_x; // Pixel end x, exclusive
    int console_end_y; // Pixel end y, exclusive

    // VM control flags
    int halt_requested;

} PXTVM_State;

// --- Minimal 8x8 Bitmap Font (ASCII 0-127, CP437-inspired) ---
// Each byte represents one row of 8 pixels (left-to-right, MSB first)
const unsigned char font[128][8] = {
    // ASCII 0‚Äì31: Control characters (blank)
    [0 ... 31] = {0},

    // ASCII 32: Space ' '
    [32] = {
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00
    },

    // ASCII 33: !
    [33] = {
        0x18, 0x3C, 0x3C, 0x18,
        0x18, 0x00, 0x18, 0x00
    },

    // ASCII 34: "
    [34] = {
        0x36, 0x36, 0x24, 0x00,
        0x00, 0x00, 0x00, 0x00
    },

    // ASCII 35: #
    [35] = {
        0x36, 0x36, 0x7F, 0x36,
        0x7F, 0x36, 0x36, 0x00
    },

    // ASCII 36: $
    [36] = {
        0x0C, 0x3E, 0x03, 0x1E,
        0x30, 0x1F, 0x0C, 0x00
    },

    // ASCII 37: %
    [37] = {
        0x00, 0x63, 0x33, 0x18,
        0x0C, 0x66, 0x63, 0x00
    },

    // ASCII 38: &
    [38] = {
        0x1C, 0x36, 0x1C, 0x6E,
        0x3B, 0x33, 0x6E, 0x00
    },

    // ASCII 39: '
    [39] = {
        0x06, 0x06, 0x04, 0x00,
        0x00, 0x00, 0x00, 0x00
    },

    // ASCII 40: (
    [40] = {
        0x00, 0x0C, 0x18, 0x18,
        0x18, 0x18, 0x0C, 0x00
    },

    // ASCII 41: )
    [41] = {
        0x00, 0x30, 0x18, 0x18,
        0x18, 0x18, 0x30, 0x00
    },

    // ASCII 42: *
    [42] = {
        0x00, 0x24, 0x7E, 0x24,
        0x7E, 0x24, 0x00, 0x00
    },

    // ASCII 43: +
    [43] = {
        0x00, 0x18, 0x18, 0x7E,
        0x18, 0x18, 0x00, 0x00
    },

    // ASCII 44: ,
    [44] = {
        0x00, 0x00, 0x00, 0x00,
        0x18, 0x18, 0x0C, 0x00
    },

    // ASCII 45: -
    [45] = {
        0x00, 0x00, 0x00, 0x7E,
        0x00, 0x00, 0x00, 0x00
    },

    // ASCII 46: .
    [46] = {
        0x00, 0x00, 0x00, 0x00,
        0x18, 0x18, 0x00, 0x00
    },

    // ASCII 47: /
    [47] = {
        0x00, 0x03, 0x06, 0x0C,
        0x18, 0x30, 0x60, 0x00
    },

    // ASCII 48‚Äì57: '0'‚Äì'9'
    [48] = {0x3E,0x63,0x73,0x7B,0x6F,0x67,0x3E,0x00}, // '0'
    [49] = {0x0C,0x1C,0x3C,0x0C,0x0C,0x0C,0x3F,0x00}, // '1'
    [50] = {0x3E,0x63,0x03,0x0E,0x38,0x60,0x7F,0x00}, // '2'
    [51] = {0x3E,0x63,0x03,0x1E,0x03,0x63,0x3E,0x00}, // '3'
    [52] = {0x06,0x0E,0x1E,0x36,0x66,0x7F,0x06,0x00}, // '4'
    [53] = {0x7F,0x60,0x7E,0x03,0x03,0x63,0x3E,0x00}, // '5'
    [54] = {0x1E,0x30,0x60,0x7E,0x63,0x63,0x3E,0x00}, // '6'
    [55] = {0x7F,0x63,0x06,0x0C,0x18,0x18,0x18,0x00}, // '7'
    [56] = {0x3E,0x63,0x63,0x3E,0x63,0x63,0x3E,0x00}, // '8'
    [57] = {0x3E,0x63,0x63,0x3F,0x03,0x06,0x3C,0x00}, // '9'

    // ASCII 58: :
    [58] = {
        0x00, 0x18, 0x18, 0x00,
        0x18, 0x18, 0x00, 0x00
    },

    // ASCII 59: ;
    [59] = {
        0x00, 0x18, 0x18, 0x00,
        0x18, 0x18, 0x0C, 0x00
    },

    // ASCII 60: <
    [60] = {
        0x0C, 0x18, 0x30, 0x60,
        0x30, 0x18, 0x0C, 0x00
    },

    // ASCII 61: =
    [61] = {
        0x00, 0x00, 0x7E, 0x00,
        0x7E, 0x00, 0x00, 0x00
    },

    // ASCII 62: >
    [62] = {
        0x30, 0x18, 0x0C, 0x06,
        0x0C, 0x18, 0x30, 0x00
    },

    // ASCII 63: ?
    [63] = {
        0x3E, 0x63, 0x03, 0x0E,
        0x18, 0x00, 0x18, 0x00
    },

    // ASCII 64: @
    [64] = {
        0x3E, 0x63, 0x7D, 0x7D,
        0x7F, 0x62, 0x3A, 0x00
    },

    // ASCII 65‚Äì90: 'A'‚Äì'Z'
    [65] = {0x1C,0x36,0x63,0x63,0x7F,0x63,0x63,0x00}, // 'A'
    [66] = {0x7E,0x63,0x63,0x7E,0x63,0x63,0x7E,0x00}, // 'B'
    [67] = {0x3C,0x66,0x60,0x60,0x60,0x66,0x3C,0x00}, // 'C'
    [68] = {0x7C,0x66,0x63,0x63,0x63,0x66,0x7C,0x00}, // 'D'
    [69] = {0x7F,0x60,0x60,0x7E,0x60,0x60,0x7F,0x00}, // 'E'
    [70] = {0x7F,0x60,0x60,0x7E,0x60,0x60,0x60,0x00}, // 'F'
    [71] = {0x3C,0x66,0x60,0x6F,0x63,0x66,0x3C,0x00}, // 'G'
    [72] = {0x63,0x63,0x63,0x7F,0x63,0x63,0x63,0x00}, // 'H'
    [73] = {0x3C,0x18,0x18,0x18,0x18,0x18,0x3C,0x00}, // 'I'
    [74] = {0x1E,0x0C,0x0C,0x0C,0x0C,0x6C,0x38,0x00}, // 'J'
    [75] = {0x63,0x66,0x6C,0x78,0x6C,0x66,0x63,0x00}, // 'K'
    [76] = {0x60,0x60,0x60,0x60,0x60,0x60,0x7F,0x00}, // 'L'
    [77] = {0x63,0x77,0x7F,0x6B,0x63,0x63,0x63,0x00}, // 'M'
    [78] = {0x63,0x73,0x7B,0x6F,0x67,0x63,0x63,0x00}, // 'N'
    [79] = {0x3E,0x63,0x63,0x63,0x63,0x63,0x3E,0x00}, // 'O'
    [80] = {0x7E,0x63,0x63,0x7E,0x60,0x60,0x60,0x00}, // 'P'
    [81] = {0x3E,0x63,0x63,0x63,0x6F,0x66,0x3D,0x00}, // 'Q'
    [82] = {0x7E,0x63,0x63,0x7E,0x6C,0x66,0x63,0x00}, // 'R'
    [83] = {0x3E,0x63,0x30,0x1C,0x06,0x63,0x3E,0x00}, // 'S'
    [84] = {0x7E,0x5A,0x18,0x18,0x18,0x18,0x3C,0x00}, // 'T'
    [85] = {0x63,0x63,0x63,0x63,0x63,0x63,0x3E,0x00}, // 'U'
    [86] = {0x63,0x63,0x63,0x63,0x36,0x1C,0x08,0x00}, // 'V'
    [87] = {0x63,0x63,0x63,0x6B,0x7F,0x77,0x63,0x00}, // 'W'
    [88] = {0x63,0x63,0x36,0x1C,0x1C,0x36,0x63,0x00}, // 'X'
    [89] = {0x66,0x66,0x66,0x3C,0x18,0x18,0x3C,0x00}, // 'Y'
    [90] = {0x7F,0x03,0x06,0x0C,0x18,0x30,0x7F,0x00}, // 'Z'

    // ASCII 91-96: [\]^_`
    [91] = {0x7E,0x60,0x60,0x60,0x60,0x60,0x7E,0x00}, // [
    [92] = {0x00,0x60,0x30,0x18,0x0C,0x06,0x03,0x00}, // \
    [93] = {0x7E,0x06,0x06,0x06,0x06,0x06,0x7E,0x00}, // ]
    [94] = {0x10,0x38,0x6C,0x00,0x00,0x00,0x00,0x00}, // ^
    [95] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E}, // _
    [96] = {0x0C,0x0C,0x06,0x00,0x00,0x00,0x00,0x00}, // `

    // ASCII 97‚Äì122: 'a'‚Äì'z' (Lowercase provided)
    [97] = {0x00,0x00,0x3C,0x06,0x3E,0x66,0x3E,0x00}, // a
    [98] = {0x60,0x60,0x7C,0x66,0x66,0x66,0x7C,0x00}, // b
    [99] = {0x00,0x00,0x3C,0x66,0x60,0x66,0x3C,0x00}, // c
    [100] = {0x06,0x06,0x3E,0x66,0x66,0x66,0x3E,0x00}, // d
    [101] = {0x00,0x00,0x3C,0x66,0x7E,0x60,0x3C,0x00}, // e
    [102] = {0x1C,0x36,0x30,0x78,0x30,0x30,0x30,0x00}, // f
    [103] = {0x00,0x00,0x3E,0x66,0x66,0x3E,0x06,0x7C}, // g
    [104] = {0x60,0x60,0x7C,0x66,0x66,0x66,0x66,0x00}, // h
    [105] = {0x18,0x00,0x38,0x18,0x18,0x18,0x3C,0x00}, // i
    [106] = {0x0C,0x00,0x1C,0x0C,0x0C,0x0C,0x6C,0x38}, // j
    [107] = {0x60,0x60,0x66,0x6C,0x78,0x6C,0x66,0x00}, // k
    [108] = {0x38,0x18,0x18,0x18,0x18,0x18,0x3C,0x00}, // l
    [109] = {0x00,0x00,0x7C,0x6C,0x6C,0x6C,0x6C,0x00}, // m
    [110] = {0x00,0x00,0x7C,0x66,0x66,0x66,0x66,0x00}, // n
    [111] = {0x00,0x00,0x3C,0x66,0x66,0x66,0x3C,0x00}, // o
    [112] = {0x00,0x00,0x7C,0x66,0x66,0x7C,0x60,0x60}, // p
    [113] = {0x00,0x00,0x3E,0x66,0x66,0x3E,0x06,0x06}, // q
    [114] = {0x00,0x00,0x7C,0x66,0x60,0x60,0x60,0x00}, // r
    [115] = {0x00,0x00,0x3E,0x60,0x3C,0x06,0x7C,0x00}, // s
    [116] = {0x60,0x60,0x7C,0x60,0x60,0x60,0x3C,0x00}, // t
    [117] = {0x00,0x00,0x66,0x66,0x66,0x66,0x3E,0x00}, // u
    [118] = {0x00,0x00,0x66,0x66,0x66,0x3C,0x18,0x00}, // v
    [119] = {0x00,0x00,0x6C,0x6C,0x6C,0x7E,0x3C,0x00}, // w
    [120] = {0x00,0x00,0x66,0x3C,0x18,0x3C,0x66,0x00}, // x
    [121] = {0x00,0x00,0x66,0x66,0x66,0x3E,0x06,0x7C}, // y
    [122] = {0x00,0x00,0x7E,0x0C,0x18,0x30,0x7E,0x00}, // z

    // ASCII 123-126: {|}~
    [123] = {0x0C,0x18,0x18,0x18,0x18,0x18,0x0C,0x00}, // {
    [124] = {0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x00}, // |
    [125] = {0x30,0x18,0x18,0x18,0x18,0x18,0x30,0x00}, // }
    [126] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, // ~ (blank for now)

    // ASCII 127: DEL (blank)
    [127] = {0},
};

// --- Global variables for Framebuffer (will be passed via PXTVM_State) ---
static int g_fb_fd = -1;
static struct fb_var_screeninfo g_vinfo;
static struct fb_fix_screeninfo g_finfo;
static char *g_fbp = MAP_FAILED; // Framebuffer mapped memory pointer

// --- Function Prototypes ---
// Framebuffer utilities
int init_framebuffer(const char *fb_device, PXTVM_State *state);
void cleanup_framebuffer();
void draw_pixel_on_fb(PXTVM_State *state, int x, int y, uint8_t r, uint8_t g, uint8_t b);
void draw_char_on_fb(PXTVM_State *state, char c, uint8_t r, uint8_t g, uint8_t b);

// PXTalk VM Instruction Handlers
void handle_halt(PXTVM_State *state);
void handle_print_str(PXTVM_State *state);
void handle_set_color(PXTVM_State *state);
void handle_wait_ms(PXTVM_State *state);
void handle_jump(PXTVM_State *state);
void handle_unknown_opcode(PXTVM_State *state, uint8_t r, uint8_t g, uint8_t b);

// VM Core functions
int load_pxd_init_script(const char *filename, PXTVM_State *state);
int fetch_pixel(PXTVM_State *state, uint8_t *r, uint8_t *g, uint8_t *b);
void execute_pxd_init_script(PXTVM_State *state);


// --- Framebuffer Utility Functions ---

/**
 * @brief Initializes the framebuffer device and PXTVM_State.
 * @param fb_device The path to the framebuffer device (e.g., "/dev/fb0").
 * @param state Pointer to the VM state structure to populate.
 * @return 0 on success, -1 on failure.
 */
int init_framebuffer(const char *fb_device, PXTVM_State *state) {
    // 1. Open the framebuffer device
    g_fb_fd = open(fb_device, O_RDWR);
    if (g_fb_fd == -1) {
        perror("Error: cannot open framebuffer device");
        return -1;
    }
    printf("Framebuffer device '%s' opened successfully.\n", fb_device);

    // 2. Get fixed screen information
    if (ioctl(g_fb_fd, FBIOGET_FSCREENINFO, &g_finfo) == -1) {
        perror("Error: reading fixed information");
        close(g_fb_fd); g_fb_fd = -1;
        return -1;
    }

    // 3. Get variable screen information
    if (ioctl(g_fb_fd, FBIOGET_VSCREENINFO, &g_vinfo) == -1) {
        perror("Error: reading variable information");
        close(g_fb_fd); g_fb_fd = -1;
        return -1;
    }

    printf("Screen resolution: %dx%d, %d bits per pixel\n", g_vinfo.xres, g_vinfo.yres, g_vinfo.bits_per_pixel);
    printf("Line length (stride): %d bytes\n", g_finfo.line_length);

    // Populate state with framebuffer info
    state->fbp = g_fbp; // Will be mapped next
    state->vinfo = &g_vinfo;
    state->finfo = &g_finfo;
    state->pixel_size_bytes = g_vinfo.bits_per_pixel / 8;
    if (state->pixel_size_bytes == 0) {
        fprintf(stderr, "Error: Invalid bits per pixel (%d). Cannot determine pixel size.\n", g_vinfo.bits_per_pixel);
        close(g_fb_fd); g_fb_fd = -1;
        return -1;
    }

    state->screensize_bytes = g_finfo.smem_len; // Total size of framebuffer memory
    if (state->screensize_bytes == 0) {
        fprintf(stderr, "Error: Framebuffer memory size is 0.\n");
        close(g_fb_fd); g_fb_fd = -1;
        return -1;
    }

    // 4. Map the device to memory (mmap)
    g_fbp = (char *)mmap(0, state->screensize_bytes, PROT_READ | PROT_WRITE, MAP_SHARED, g_fb_fd, 0);
    if (g_fbp == MAP_FAILED) {
        perror("Error: failed to map framebuffer device to memory");
        close(g_fb_fd); g_fb_fd = -1;
        return -1;
    }
    state->fbp = g_fbp; // Update state after successful mapping
    printf("Framebuffer device mapped to memory successfully.\n");

    // Clear the screen to black initially
    memset(state->fbp, 0, state->screensize_bytes);

    // Initialize text console properties
    // Define a console area. For example, 10 pixels padding from top/left/right/bottom.
    state->char_width = 8;
    state->char_height = 8;
    state->console_start_x = 10;
    state->console_start_y = 10;
    state->console_end_x = state->vinfo->xres - 10; // 10 pixels from right edge
    state->console_end_y = state->vinfo->yres - 10; // 10 pixels from bottom edge

    state->text_cursor_x = state->console_start_x;
    state->text_cursor_y = state->console_start_y;

    return 0;
}

/**
 * @brief Cleans up framebuffer and VM program memory resources.
 */
void cleanup_framebuffer() {
    if (g_fbp != MAP_FAILED) {
        if (munmap(g_fbp, g_finfo.smem_len) == -1) {
            perror("Error unmapping framebuffer");
        }
        g_fbp = MAP_FAILED;
    }
    if (g_fb_fd != -1) {
        if (close(g_fb_fd) == -1) {
            perror("Error closing framebuffer device");
        }
        g_fb_fd = -1;
    }
    // Program memory is managed by the main function's state struct
    // or passed to load_pxd_init_script, so no global program_memory cleanup here.
    printf("Framebuffer resources cleaned up.\n");
}

/**
 * @brief Writes a single pixel to the framebuffer.
 * Robustly handles different bit depths and pixel formats.
 * @param state Pointer to the VM state.
 * @param x X coordinate.
 * @param y Y coordinate.
 * @param r Red component (0-255).
 * @param g Green component (0-255).
 * @param b Blue component (0-255).
 */
void draw_pixel_on_fb(PXTVM_State *state, int x, int y, uint8_t r, uint8_t g, uint8_t b) {
    if (state->fbp == MAP_FAILED) {
        fprintf(stderr, "ERROR: Framebuffer not initialized for pixel draw.\n");
        return;
    }
    // Check if pixel is within screen boundaries
    if (x < 0 || x >= state->vinfo->xres || y < 0 || y >= state->vinfo->yres) {
        // fprintf(stderr, "DEBUG: Attempted to draw pixel out of screen bounds (%d,%d).\n", x, y);
        return; // Silently ignore out-of-bounds writes to prevent crashes
    }

    long int location = (x * state->pixel_size_bytes) + (y * state->finfo->line_length);

    if (location + state->pixel_size_bytes > state->screensize_bytes || location < 0) {
        fprintf(stderr, "ERROR: Calculated FB memory location out of bounds for (%d,%d) at byte %ld.\n", x, y, location);
        return;
    }

    uint32_t pixel_value = 0;

    // Construct the pixel value based on framebuffer's bitfield information
    pixel_value |= (r << state->vinfo->red.offset) & (((1 << state->vinfo->red.length) - 1) << state->vinfo->red.offset);
    pixel_value |= (g << state->vinfo->green.offset) & (((1 << state->vinfo->green.length) - 1) << state->vinfo->green.offset);
    pixel_value |= (b << state->vinfo->blue.offset) & (((1 << state->vinfo->blue.length) - 1) << state->vinfo->blue.offset);

    // If alpha is present, set to opaque (max value for that bitfield length)
    if (state->vinfo->transp.length > 0) {
        pixel_value |= ((1 << state->vinfo->transp.length) - 1) << state->vinfo->transp.offset;
    }

    // Write the pixel data based on pixel_size_bytes
    if (state->pixel_size_bytes == 4) {
        *(uint32_t *)(state->fbp + location) = pixel_value;
    } else if (state->pixel_size_bytes == 3) { // 24-bit RGB (no alpha)
        // Ensure correct byte order for R, G, B based on offsets, then copy 3 bytes
        uint8_t byte_r = (pixel_value >> (state->vinfo->red.offset)) & 0xFF;
        uint8_t byte_g = (pixel_value >> (state->vinfo->green.offset)) & 0xFF;
        uint8_t byte_b = (pixel_value >> (state->vinfo->blue.offset)) & 0xFF;
        // This is a simplified approach assuming typical byte order or little-endian.
        // A more robust way might involve a temporary 3-byte array and careful memcpy.
        // For common systems, this works for 24-bit.
        *(state->fbp + location + 0) = byte_b;
        *(state->fbp + location + 1) = byte_g;
        *(state->fbp + location + 2) = byte_r;
    } else if (state->pixel_size_bytes == 2) { // 16-bit RGB565 (or similar)
         *(uint16_t *)(state->fbp + location) = (uint16_t)pixel_value;
    } else {
        fprintf(stderr, "ERROR: Unsupported pixel_size_bytes: %d\n", state->pixel_size_bytes);
    }
}


/**
 * @brief Draws a single ASCII character glyph on the framebuffer using the embedded font.
 * @param state Pointer to the VM state.
 * @param c The ASCII character to draw.
 * @param r Red component of the character color.
 * @param g Green component of the character color.
 * @param b Blue component of the character color.
 */
void draw_char_on_fb(PXTVM_State *state, char c, uint8_t r, uint8_t g, uint8_t b) {
    // Ensure character is within ASCII range of our font
    if ((unsigned char)c < 32 || (unsigned char)c > 127) {
        c = '?'; // Substitute unknown characters
    }
    // For control characters (0-31) and 127, font is blank, which is desired.

    // Calculate actual pixel position for the character's top-left corner
    int start_x = state->text_cursor_x;
    int start_y = state->text_cursor_y;

    // Check if character position is within the defined console area
    if (start_x + state->char_width > state->console_end_x ||
        start_y + state->char_height > state->console_end_y)
    {
        // Out of console bounds for current char, might need to wrap or scroll
        // For now, let's let the wrap logic in handle_print_str manage this.
        // If this function is called directly for arbitrary coords, it might draw partially
        // or out of bounds, which draw_pixel_on_fb will filter.
    }


    for (int row = 0; row < state->char_height; ++row) {
        unsigned char bits = font[(unsigned char)c][row];
        for (int col = 0; col < state->char_width; ++col) {
            // Check if the pixel bit is set (MSB first, so 1 << (7 - col))
            if (bits & (1 << (7 - col))) {
                draw_pixel_on_fb(state, start_x + col, start_y + row, r, g, b);
            }
        }
    }
}


// --- PXTalk VM Instruction Handlers ---

/**
 * @brief Handles the PXL_HALT instruction.
 * Sets the halt_requested flag to stop VM execution.
 */
void handle_halt(PXTVM_State *state) {
    printf("PC: %zu, OPCODE: PXL_HALT\n", state->program_counter - 3); // -3 for current opcode's bytes
    state->halt_requested = 1;
}

/**
 * @brief Handles the PXL_PRINT_STR instruction.
 * Renders a string on the framebuffer's text console area.
 */
void handle_print_str(PXTVM_State *state) {
    printf("PC: %zu, OPCODE: PXL_PRINT_STR\n", state->program_counter - 3);

    uint8_t len_r, len_g, len_b; // Length pixel
    if (fetch_pixel(state, &len_r, &len_g, &len_b) == -1) {
        fprintf(stderr, "VM ERROR: Missing length pixel for PXL_PRINT_STR at PC %zu. Halting.\n", state->program_counter);
        state->halt_requested = 1;
        return;
    }
    int str_len = len_r; // Length is in R component

    printf("  - String length: %d\n", str_len);
    for (int i = 0; i < str_len; ) {
        uint8_t char_r, char_g, char_b; // Pixel containing 3 chars
        if (fetch_pixel(state, &char_r, &char_g, &char_b) == -1) {
            fprintf(stderr, "VM ERROR: Incomplete string data for PXL_PRINT_STR. Halting.\n", state->program_counter);
            state->halt_requested = 1;
            break;
        }

        // Process up to 3 characters from the fetched pixel
        if (i < str_len) {
            draw_char_on_fb(state, (char)char_r, 255, 255, 0); // Yellow text
            // printf("    Char %d: '%c'\n", i, (char)char_r);
            state->text_cursor_x += state->char_width;
            if (state->text_cursor_x + state->char_width > state->console_end_x) { // Wrap to next line
                state->text_cursor_x = state->console_start_x;
                state->text_cursor_y += state->char_height;
                // If console full, wrap to top (simple scroll for now)
                if (state->text_cursor_y + state->char_height > state->console_end_y) {
                    state->text_cursor_y = state->console_start_y;
                    // Optional: clear the console area here before wrapping to top
                    // For now, new chars will overwrite old.
                }
            }
            usleep(50000); // Small delay per char for visual effect
            i++;
        }
        if (i < str_len) {
            draw_char_on_fb(state, (char)char_g, 255, 255, 0);
            state->text_cursor_x += state->char_width;
            if (state->text_cursor_x + state->char_width > state->console_end_x) {
                state->text_cursor_x = state->console_start_x;
                state->text_cursor_y += state->char_height;
                if (state->text_cursor_y + state->char_height > state->console_end_y) {
                    state->text_cursor_y = state->console_start_y;
                }
            }
            usleep(50000);
            i++;
        }
        if (i < str_len) {
            draw_char_on_fb(state, (char)char_b, 255, 255, 0);
            state->text_cursor_x += state->char_width;
            if (state->text_cursor_x + state->char_width > state->console_end_x) {
                state->text_cursor_x = state->console_start_x;
                state->text_cursor_y += state->char_height;
                if (state->text_cursor_y + state->char_height > state->console_end_y) {
                    state->text_cursor_y = state->console_start_y;
                }
            }
            usleep(50000);
            i++;
        }
    }
}

/**
 * @brief Handles the PXL_SET_COLOR instruction.
 * Sets the color of a specific pixel on the framebuffer.
 */
void handle_set_color(PXTVM_State *state) {
    printf("PC: %zu, OPCODE: PXL_SET_COLOR\n", state->program_counter - 3);

    uint8_t x_r, x_g, x_b;
    uint8_t y_r, y_g, y_b;
    uint8_t color_r, color_g, color_b;

    if (fetch_pixel(state, &x_r, &x_g, &x_b) == -1 ||
        fetch_pixel(state, &y_r, &y_g, &y_b) == -1 ||
        fetch_pixel(state, &color_r, &color_g, &color_b) == -1) {
        fprintf(stderr, "VM ERROR: Missing arguments for PXL_SET_COLOR at PC %zu. Halting.\n", state->program_counter);
        state->halt_requested = 1;
        return;
    }
    int x = x_r;
    int y = y_r;
    printf("  - Setting pixel (%d,%d) to RGB(%d,%d,%d)\n", x, y, color_r, color_g, color_b);
    draw_pixel_on_fb(state, x, y, color_r, color_g, color_b);
    usleep(10000); // Small delay to see pixel changes
}

/**
 * @brief Handles the PXL_WAIT_MS instruction.
 * Pauses VM execution for a specified number of milliseconds.
 */
void handle_wait_ms(PXTVM_State *state) {
    printf("PC: %zu, OPCODE: PXL_WAIT_MS\n", state->program_counter - 3);

    uint8_t ms_h_r, ms_h_g, ms_h_b;
    uint8_t ms_l_r, ms_l_g, ms_l_b;

    if (fetch_pixel(state, &ms_h_r, &ms_h_g, &ms_h_b) == -1 ||
        fetch_pixel(state, &ms_l_r, &ms_l_g, &ms_l_b) == -1) {
        fprintf(stderr, "VM ERROR: Missing arguments for PXL_WAIT_MS at PC %zu. Halting.\n", state->program_counter);
        state->halt_requested = 1;
        return;
    }
    int milliseconds = (ms_h_r << 8) | ms_l_r; // MS_H in R, MS_L in R
    printf("  - Waiting for %d milliseconds\n", milliseconds);
    usleep(milliseconds * 1000); // usleep takes microseconds
}

/**
 * @brief Handles the PXL_JUMP instruction.
 * Sets the program counter to a new location.
 * Uses (target_x, target_y) to calculate linear byte offset,
 * assuming a conceptual 256-pixel wide program grid.
 */
void handle_jump(PXTVM_State *state) {
    printf("PC: %zu, OPCODE: PXL_JUMP\n", state->program_counter - 3);

    uint8_t target_x_r, target_x_g, target_x_b;
    uint8_t target_y_r, target_y_g, target_y_b;

    if (fetch_pixel(state, &target_x_r, &target_x_g, &target_x_b) == -1 ||
        fetch_pixel(state, &target_y_r, &target_y_g, &target_y_b) == -1) {
        fprintf(stderr, "VM ERROR: Missing arguments for PXL_JUMP at PC %zu. Halting.\n", state->program_counter);
        state->halt_requested = 1;
        return;
    }

    int target_x = target_x_r; // X coordinate for the program pixel (0-255)
    int target_y = target_y_r; // Y coordinate for the program pixel (0-255)

    // IMPORTANT: Assuming a conceptual 256-pixel wide program grid for (X,Y) addressing.
    // Each pixel is 3 bytes (R,G,B).
    size_t jump_byte_offset = (size_t)target_y * 256 * 3 + (size_t)target_x * 3;

    if (jump_byte_offset >= state->program_size_bytes) {
        fprintf(stderr, "VM ERROR: PXL_JUMP target (%d,%d) translated to byte offset %zu is out of program bounds (%zu). Halting.\n",
                target_x, target_y, jump_byte_offset, state->program_size_bytes);
        state->halt_requested = 1;
        return;
    }
    state->program_counter = jump_byte_offset;
    printf("  - Jumping to byte offset %zu (conceptual pixel (%d,%d))\n", state->program_counter, target_x, target_y);
}

/**
 * @brief Handler for unknown opcodes.
 * Logs an error and requests VM halt.
 */
void handle_unknown_opcode(PXTVM_State *state, uint8_t r, uint8_t g, uint8_t b) {
    fprintf(stderr, "VM ERROR: Unknown opcode at PC %zu: RGB(%02X,%02X,%02X). Halting.\n",
            state->program_counter - 3, r, g, b);
    state->halt_requested = 1;
}

// --- VM Core Functions ---

/**
 * @brief Loads the PXD-INIT-V1 script from a binary file into program_memory.
 * @param filename Path to the binary script file.
 * @param state Pointer to the VM state structure to populate.
 * @return 0 on success, -1 on failure.
 */
int load_pxd_init_script(const char *filename, PXTVM_State *state) {
    FILE *fp = fopen(filename, "rb");
    if (!fp) {
        perror("Error opening PXD-INIT-V1 script file");
        return -1;
    }

    fseek(fp, 0, SEEK_END);
    state->program_size_bytes = ftell(fp);
    fseek(fp, 0, SEEK_SET);

    if (state->program_size_bytes == 0) {
        fprintf(stderr, "PXD-INIT-V1 script file is empty: %s\n", filename);
        fclose(fp);
        return -1;
    }

    state->program_memory = (uint8_t *)malloc(state->program_size_bytes);
    if (!state->program_memory) {
        perror("Error allocating program memory");
        fclose(fp);
        return -1;
    }

    if (fread(state->program_memory, 1, state->program_size_bytes, fp) != state->program_size_bytes) {
        perror("Error reading PXD-INIT-V1 script file");
        free(state->program_memory);
        state->program_memory = NULL;
        fclose(fp);
        return -1;
    }

    fclose(fp);
    printf("PXD-INIT-V1 script '%s' loaded successfully (%zu bytes).\n", filename, state->program_size_bytes);
    state->program_counter = 0; // Reset program counter for execution
    state->halt_requested = 0;  // Clear halt flag
    return 0;
}

/**
 * @brief Reads the next pixel (3 bytes) from program_memory and advances PC.
 * @param state Pointer to the VM state.
 * @param r Pointer to store Red component.
 * @param g Pointer to store Green component.
 * @param b Pointer to store Blue component.
 * @return 0 on success, -1 if end of program memory or error.
 */
int fetch_pixel(PXTVM_State *state, uint8_t *r, uint8_t *g, uint8_t *b) {
    if (state->program_counter + 3 > state->program_size_bytes) {
        return -1; // End of program or incomplete pixel
    }

    *r = state->program_memory[state->program_counter++];
    *g = state->program_memory[state->program_counter++];
    *b = state->program_memory[state->program_counter++];
    return 0;
}

/**
 * @brief Decodes and executes the PXD-INIT-V1 script.
 */
void execute_pxd_init_script(PXTVM_State *state) {
    uint8_t r, g, b;

    printf("\n--- PXTalk VM Execution Started ---\n");

    while (!state->halt_requested && state->program_counter < state->program_size_bytes) {
        size_t current_pc_for_debug = state->program_counter; // Capture PC before fetch
        if (fetch_pixel(state, &r, &g, &b) == -1) {
            fprintf(stderr, "VM ERROR: Failed to fetch opcode pixel at PC %zu. Halting.\n", current_pc_for_debug);
            state->halt_requested = 1;
            break;
        }

        // Decode and Execute based on RGB opcode values
        if (r == PXL_HALT_R && g == PXL_HALT_G && b == PXL_HALT_B) {
            handle_halt(state);
        }
        else if (r == PXL_PRINT_STR_R && g == PXL_PRINT_STR_G && b == PXL_PRINT_STR_B) {
            handle_print_str(state);
        }
        else if (r == PXL_SET_COLOR_R && g == PXL_SET_COLOR_G && b == PXL_SET_COLOR_B) {
            handle_set_color(state);
        }
        else if (r == PXL_WAIT_MS_R && g == PXL_WAIT_MS_G && b == PXL_WAIT_MS_B) {
            handle_wait_ms(state);
        }
        else if (r == PXL_JUMP_R && g == PXL_JUMP_G && b == PXL_JUMP_B) {
            handle_jump(state);
        }
        else {
            handle_unknown_opcode(state, r, g, b);
        }
    }
    printf("\n--- PXTalk VM Execution Finished ---\n");
}

// --- Main function ---
int main(int argc, char *argv[]) {
    // Initialize VM state
    PXTVM_State vm_state = {
        .program_memory = NULL,
        .program_size_bytes = 0,
        .program_counter = 0,
        .fbp = MAP_FAILED,
        .vinfo = &g_vinfo, // Point to global framebuffer info
        .finfo = &g_finfo, // Point to global framebuffer info
        .pixel_size_bytes = 0,
        .screensize_bytes = 0,
        .text_cursor_x = 0,
        .text_cursor_y = 0,
        .char_width = 8,  // Will be set by init_framebuffer
        .char_height = 8, // Will be set by init_framebuffer
        .console_start_x = 0,
        .console_start_y = 0,
        .console_end_x = 0,
        .console_end_y = 0,
        .halt_requested = 0
    };

    if (argc < 2) {
        fprintf(stderr, "Usage: %s <pxd_init_script_file> [framebuffer_device]\n", argv[0]);
        fprintf(stderr, "  e.g., %s pxd_init_script.bin /dev/fb0\n", argv[0]);
        return 1;
    }

    const char *script_file = argv[1];
    const char *fb_device = "/dev/fb0"; // Default framebuffer device
    if (argc > 2) {
        fb_device = argv[2];
    }

    if (init_framebuffer(fb_device, &vm_state) != 0) {
        fprintf(stderr, "Failed to initialize framebuffer. Exiting.\n");
        cleanup_framebuffer(); // Clean up if init_fb fails partially
        return 1;
    }

    if (load_pxd_init_script(script_file, &vm_state) != 0) {
        fprintf(stderr, "Failed to load PXD-INIT-V1 script. Exiting.\n");
        cleanup_framebuffer();
        return 1;
    }

    execute_pxd_init_script(&vm_state);

    printf("\nVM execution complete. Press Enter to clear screen and exit...\n");
    getchar(); // Wait for user to see the final state

    // Clear the screen before exiting
    if (vm_state.fbp != MAP_FAILED) {
        memset(vm_state.fbp, 0, vm_state.screensize_bytes);
    }

    // Clean up all resources
    if (vm_state.program_memory) {
        free(vm_state.program_memory);
        vm_state.program_memory = NULL;
    }
    cleanup_framebuffer();
    return 0;
}
