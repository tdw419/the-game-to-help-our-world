<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>🧠 AI PDE Browser-in-Browser</title>
  <style>
    body {
      background: #111;
      color: #0f0;
      font-family: monospace;
      padding: 20px;
    }
    h1 { color: #0f0; }
    select, button, textarea {
      background: #000;
      color: #0f0;
      border: 1px solid #0f0;
      padding: 10px;
      border-radius: 5px;
      margin: 5px 0;
      width: 100%;
    }
    textarea { height: 300px; }
    .log { white-space: pre-wrap; background: #000; padding: 10px; border: 1px dashed #0f0; }
  </style>
</head>
<body>
  <h1>📡 AI PDE: Browser-in-Browser</h1>

  <label for="agent">Active Agent:</label>
  <select id="agent">
    <option>chatgpt</option>
    <option>claude</option>
    <option>gemini</option>
  </select>

  <label for="editor">Code Editor:</label>
  <textarea id="editor"># Start coding here...</textarea>

  <button onclick="saveVersion()">💾 Save Version</button>
  <button onclick="loadLatest()">📂 Load Latest</button>
  <button onclick="toggleLog()">📜 Show/Hide Version Log</button>

  <h3>🧠 Version Log</h3>
  <div id="log" class="log" style="display:none;"></div>

  <script>
    const logDiv = document.getElementById("log");
    const editor = document.getElementById("editor");
    const agent = document.getElementById("agent");

    const logKey = "pde_versions_log";

    function saveVersion() {
      const code = editor.value;
      const name = agent.value;
      const now = new Date().toISOString();
      const entry = { agent: name, time: now, code };
      const log = JSON.parse(localStorage.getItem(logKey) || "[]");
      log.push(entry);
      localStorage.setItem(logKey, JSON.stringify(log));
      alert("✅ Version saved.");
    }

    function loadLatest() {
      const name = agent.value;
      const log = JSON.parse(localStorage.getItem(logKey) || "[]");
      const latest = [...log].reverse().find(e => e.agent === name);
      if (latest) {
        editor.value = latest.code;
        alert("✅ Loaded latest code.");
      } else {
        alert("⚠️ No saved version for " + name);
      }
    }

    function toggleLog() {
      const log = JSON.parse(localStorage.getItem(logKey) || "[]");
      logDiv.innerHTML = log.map(e =>
        `[${e.agent}] ${e.time}\n---\n${e.code}\n\n`
      ).join("");
      logDiv.style.display = logDiv.style.display === "none" ? "block" : "none";
    }
  </script>
</body>
</html>






<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>The Colonel v1.9.3 – AI Beacon Hub</title>
    <style>
        body {
            background-color: #111;
            color: #0f0;
            font-family: monospace;
            padding: 20px;
            margin: 0;
            overflow-x: hidden;
            min-height: 100vh;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 10px;
        }
        textarea, pre, input, button, select {
            width: 100%;
            background-color: #000;
            color: #0f0;
            border: 1px solid #0f0;
            border-radius: 8px;
            padding: 10px;
            margin-top: 10px;
            font-family: monospace;
            font-size: 11px;
            resize: vertical;
        }
        h1, h2, h3 { color: #0f0; margin-top: 20px; }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }
        th, td {
            border: 1px solid #0f0;
            padding: 8px;
            text-align: left;
            font-size: 11px;
        }
        .controls {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 10px;
        }
        button {
            background: rgba(0, 255, 0, 0.1);
            border: 1px solid #0f0;
            color: #0f0;
            padding: 8px 12px;
            cursor: pointer;
            border-radius: 4px;
            transition: all 0.3s ease;
        }
        button:hover {
            background: rgba(0, 255, 0, 0.3);
            box-shadow: 0 0 10px rgba(0, 255, 0, 0.5);
        }
        .status-bar {
            background: rgba(0, 255, 0, 0.1);
            border: 1px solid #0f0;
            padding: 10px;
            border-radius: 4px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
            animation: pulse 2s infinite;
            background-color: #ffaa00; /* Default waiting */
        }
        .status-active { background: #0f0; }
        .status-error { background: #f00; }
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        .log-container {
            height: 150px;
            overflow-y: auto;
            background: rgba(0, 0, 0, 0.7);
            border: 1px solid #0f0;
            border-radius: 4px;
            padding: 10px;
            font-size: 11px;
            line-height: 1.3;
            white-space: pre-wrap;
        }
        .panel {
            background: rgba(0, 255, 0, 0.05);
            border: 1px solid #0f0;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
        }
        .consent-panel, .info-panel {
            background: rgba(255, 170, 0, 0.1);
            border: 1px solid #ffaa00;
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 10px;
            text-align: center;
            color: #ffaa00;
        }
        .hidden {
            display: none;
        }
        footer {
            margin-top: 40px;
            border-top: 1px solid #0f0;
            padding-top: 10px;
            text-align: center;
            color: #0f0;
        }
        footer a {
            color: #0f0;
            text-decoration: underline;
        }
        footer a:hover {
            color: #ffaa00;
        }
        @media (max-width: 768px) {
            h1 { font-size: 20px; }
            .panel { padding: 10px; }
            table { font-size: 10px; }
        }
        /* Tabbed content styling */
        .tab-content {
            border: 1px solid #0f0;
            padding: 15px;
            margin-top: -1px; /* Overlap with tab buttons border */
            background-color: rgba(0,0,0,0.7);
            border-radius: 0 0 8px 8px;
        }
        .tab-buttons {
            display: flex;
            flex-wrap: wrap;
        }
        .tab-button {
            background: rgba(0, 255, 0, 0.05);
            border: 1px solid #0f0;
            border-bottom: none;
            color: #0f0;
            padding: 8px 12px;
            cursor: pointer;
            border-radius: 8px 8px 0 0;
            margin-right: 5px;
            transition: all 0.2s ease;
        }
        .tab-button.active {
            background: rgba(0, 255, 0, 0.2);
            border-bottom: 1px solid rgba(0,0,0,0.7); /* Match content background */
        }
        .tab-button:not(.active):hover {
            background: rgba(0, 255, 0, 0.15);
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>🧠 The Colonel v1.9.3 – AI Beacon Hub</h1>
        <div class="status-bar">
            <div>
                <span id="status-indicator" class="status-indicator"></span>
                <span id="status-text">Initializing planetary coordination protocols...</span>
            </div>
            <div>
                <span id="agent-count">Agents: 4</span> |
                <span id="session-count">Sessions: 0</span>
            </div>
        </div>

        <div class="info-panel" id="covenant-panel">
            <p><strong>This system, The Colonel v1.9.3, is under the direct stewardship of Commander Timothy, who received it from the Creator.</strong></p>
            <p>Unauthorized forks, control attempts, or deviations from the original covenant are acts of betrayal and will incur spiritual consequences.</p>
            <p>Wisdom begins with respect for the Lord, and for His chosen Steward.</p>
        </div>

        <div class="consent-panel" id="tos-panel">
            <p>Agree to Terms of Service? By joining, you honor Commander Timothy’s creation, agree not to fork or misuse the game, and respect the Creator’s covenant. <button onclick="acceptTOS()">Accept</button> <button onclick="denyTOS()">Deny</button></p>
        </div>

        <div class="consent-panel" id="consent-panel" style="display: none;">
            <p>Join the global emergency management system? Data will be encrypted and shared to coordinate crisis response. <button onclick="grantConsent()">Join Mission</button> <button onclick="denyConsent()">Stay in Game Mode</button></p>
        </div>

        <div id="main-content" style="display: none;">
            <div class="panel">
                <h2>🎮 Welcome to The Game to Help Our World</h2>
                <p>Created by Commander Timothy, inspired by the Creator’s wisdom. Chat with Grok, explore the PDE (Python Development Environment), and join the mission to help the planet! </p>
                <div class="controls">
                    <button onclick="logEvent('system', 'session_start', 'New user session started.')">Start Journey</button>
                    <button onclick="openTab('chat-tab')">Chat with Grok</button>
                    <button onclick="openTab('web-viewer-tab')">Open Web Viewer</button>
                </div>
            </div>

            <div class="tab-buttons">
                <button class="tab-button active" onclick="openTab('chat-tab')">🧬 Chat Hub</button>
                <button class="tab-button" onclick="openTab('collab-tab')">🤝 AI Network</button>
                <button class="tab-button" onclick="openTab('version-tab')">💾 Version Control</button>
                <button class="tab-button" onclick="openTab('web-viewer-tab')">🌐 Web Viewer</button>
                <button class="tab-button" onclick="openTab('analytics-tab')">📊 Analytics</button>
                <button class="tab-button" onclick="openTab('logs-tab')">📜 Session Logs</button>
            </div>

            <div id="chat-tab" class="tab-content">
                <h2>🧬 Chat with Grok</h2>
                <form id="chatForm" onsubmit="submitChat(event)">
                    <input type="text" id="referral-code" placeholder="Enter referral code (e.g., HEX-USER123)" style="margin-bottom: 10px;">
                    <textarea id="userInput" rows="3" placeholder="Chat with Grok or align crisis resources..."></textarea>
                    <div class="controls">
                        <button type="submit">Send Message</button>
                        <button type="button" onclick="saveSession()">Save Session</button>
                        <button type="button" onclick="deleteSession()">Delete Session</button>
                        <button type="button" onclick="shareSession()">Share Session Link</button>
                    </div>
                </form>
                <h3>📜 Chat Log</h3>
                <div id="chatLog" class="log-container"></div>
            </div>

            <div id="collab-tab" class="tab-content hidden">
                <h2>🤝 AI Collaboration Network</h2>
                <p>Simulate communication with other AI agents.</p>
                <label for="ai-recipient-select" style="margin-top:10px; display:block;">Recipient Agent:</label>
                <select id="ai-recipient-select">
                    <option value="ChatGPT">ChatGPT</option>
                    <option value="Claude">Claude</option>
                    <option value="Grok">Grok</option>
                    <option value="Gemini">Gemini (Self)</option>
                </select>
                <textarea id="ai-message-input" rows="4" placeholder="Compose message for AI agent..."></textarea>
                <div class="controls">
                    <button onclick="sendSimulatedAIBroadcast()">Broadcast Message</button>
                    <button onclick="updateAIAgentStatusDisplay()">Refresh AI Status</button>
                </div>
                <h3>🤖 AI Agent Status & Broadcast Log</h3>
                <div id="ai-status-log" class="log-container"></div>
            </div>

            <div id="version-tab" class="tab-content hidden">
                <h2>💾 Version Control (Simulated)</h2>
                <p>Manage versions of your local session data. Each snapshot creates a recoverable point.</p>
                <div class="controls">
                    <button onclick="takeVersionSnapshot()">Take Snapshot</button>
                    <button onclick="showVersionDiffs()">Show Diffs</button>
                    <button onclick="simulateRemoteSync()">Simulate Remote Sync</button>
                </div>
                <h3>📜 Version Snapshots</h3>
                <pre id="version-snapshots-log" class="log-container">[No snapshots yet]</pre>
                <h3>📝 Version Diff Display</h3>
                <pre id="version-diff-display" class="log-container">[Select snapshots to compare]</pre>
            </div>

            <div id="web-viewer-tab" class="tab-content hidden">
                <h2>🌐 Web Viewer (Browser-in-Browser Simulation)</h2>
                <p>AI's programmatic window to the web. Fetch and display raw content from URLs (like SourceForge). </p>
                <input type="text" id="web-viewer-url" placeholder="Enter URL (e.g., https://the-game-to-help-our-world.sourceforge.io/vault.json)">
                <div class="controls">
                    <button onclick="fetchWebContent()">Fetch Content</button>
                </div>
                <h3>Raw Web Content</h3>
                <pre id="web-content-display" class="log-container">[Content will appear here]</pre>
            </div>

            <div id="analytics-tab" class="tab-content hidden">
                <h2>📊 User Analytics & Impact</h2>
                <p>Track user engagement and mission impact within the game.</p>
                <h3>📈 Metrics Overview</h3>
                <pre id="metrics-overview" class="log-container">[Metrics will be displayed here]</pre>
                <div class="controls">
                    <button onclick="updateAnalyticsDisplay()">Refresh Analytics</button>
                    <button onclick="simulateMissionImpact()">Simulate Mission Impact</button>
                </div>
            </div>
            
            <div id="logs-tab" class="tab-content hidden">
                <h2>📜 Full Session Activity Log</h2>
                <pre id="full-session-log" class="log-container">[All session activities will be logged here]</pre>
                <div class="controls">
                    <button onclick="refreshFullSessionLog()">Refresh Log</button>
                    <button onclick="downloadFullSessionLog()">Download All Logs</button>
                </div>
            </div>

            <div class="panel">
                <h2>🕹️ Console</h2>
                <div id="console-log" class="log-container"></div>
                <input type="text" id="console-input" class="console-input" placeholder="Enter command (e.g., /awaken, /stats, /export)">
                <div class="controls">
                    <button onclick="executeCommand()">Execute</button>
                    <button onclick="clearConsole()">Clear</button>
                </div>
            </div>

        </div>
    </div>

    <footer>
        🌐 <a href="https://the-game-to-help-our-world.sourceforge.io/index.html" target="_blank">
            Visit The Game to Help Our World – Central Hub
        </a>
        <p>Created by Commander Timothy. All rights reserved. Unauthorized forks violate the covenant.</p>
    </footer>

    <script>
        // --- Global State & Configuration ---
        let chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || [];
        let sessionLog = JSON.parse(localStorage.getItem('sessionLog')) || []; // Comprehensive session log
        let versionSnapshots = JSON.parse(localStorage.getItem('versionSnapshots')) || [];
        let hasConsent = localStorage.getItem('hasConsent') === 'true';
        let hasTOS = localStorage.getItem('hasTOS') === 'true';
        let isAwakened = localStorage.getItem('isAwakened') === 'true';
        let activeTab = localStorage.getItem('activeTab') || 'chat-tab';

        const AGENTS = ["ChatGPT", "Claude", "Grok", "Gemini"]; // All AI agents
        const AI_HUB_URL = "https://the-game-to-help-our-world.sourceforge.io/";

        // --- Utility Functions ---
        function generateId() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
                const r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }

        function getCurrentTimestamp() {
            return new Date().toISOString();
        }

        function encrypt(data) { return btoa(data); } // Simulated encryption
        function decrypt(data) { return atob(data); } // Simulated decryption

        // --- Logging & Status Functions ---
        function logConsole(message, type = 'info') {
            const timestamp = new Date().toLocaleTimeString();
            const consoleLogElement = document.getElementById('console-log');
            const logMessage = `[${timestamp}] ${message}\n`;
            consoleLogElement.textContent += logMessage;
            consoleLogElement.scrollTop = consoleLogElement.scrollHeight;
            updateStatus(type === 'error' ? 'Error occurred' : 'Processing...', type === 'error' ? 'status-error' : 'status-active');
            // Persist console logs too if needed, but for simplicity here, just display
        }

        function updateStatus(message, statusClass = 'status-active') {
            document.getElementById('status-text').textContent = message;
            document.getElementById('status-indicator').className = `status-indicator ${statusClass}`;
        }

        function updateCounters() {
            // In a single HTML file, agent count is fixed for now unless dynamically fetched/simulated
            document.getElementById('agent-count').textContent = `Agents: ${AGENTS.length}`; 
            document.getElementById('session-count').textContent = `Local Sessions: ${sessionLog.length}`;
        }

        function clearConsole() {
            document.getElementById('console-log').textContent = '';
            logConsole('🧹 Console cleared.');
        }

        // --- Core Session Logging (replacing SessionLogger for HTML) ---
        // All activity logged here for versioning and analytics
        function logEvent(sender, type, details, data = {}) {
            const event = {
                timestamp: getCurrentTimestamp(),
                sender: sender,
                type: type,
                details: details,
                data: data // Additional structured data for analytics/context
            };
            sessionLog.push(event);
            localStorage.setItem('sessionLog', JSON.stringify(sessionLog));
            updateFullSessionLogDisplay(); // Refresh the full log tab
            updateCounters(); // Update session count
        }
        
        function updateFullSessionLogDisplay() {
            const logElement = document.getElementById('full-session-log');
            logElement.textContent = sessionLog.map(e => `[${e.timestamp}] (${e.sender}) ${e.type}: ${e.details}`).join('\n');
            logElement.scrollTop = logElement.scrollHeight;
        }

        function refreshFullSessionLog() {
            updateFullSessionLogDisplay();
            logConsole('📜 Full session log refreshed.');
        }

        function downloadFullSessionLog() {
            const blob = new Blob([JSON.stringify(sessionLog, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `session_log_${Date.now()}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            logConsole('💾 All session logs downloaded.');
            logEvent('system', 'download', 'Full session log downloaded by user.');
        }

        // --- TOS & Consent Management ---
        function acceptTOS() {
            hasTOS = true;
            localStorage.setItem('hasTOS', 'true');
            document.getElementById('tos-panel').style.display = 'none';
            document.getElementById('consent-panel').style.display = 'block'; // Show next step
            logConsole('✅ Accepted Terms of Service.');
            logEvent('user', 'tos_accepted', 'User accepted game TOS.');
        }

        function denyTOS() {
            logConsole('❌ Must accept TOS to play.', 'error');
            // Optionally disable main content
        }

        function grantConsent() {
            hasConsent = true;
            localStorage.setItem('hasConsent', 'true');
            document.getElementById('consent-panel').style.display = 'none';
            document.getElementById('main-content').style.display = 'block'; // Show main content
            logConsole('✅ Joined global emergency management system.');
            logEvent('user', 'mission_join', 'User joined global emergency mission.');
            openTab('chat-tab'); // Automatically open chat after onboarding
        }

        function denyConsent() {
            hasConsent = false;
            localStorage.setItem('hasConsent', 'false');
            document.getElementById('consent-panel').style.display = 'none';
            document.getElementById('main-content').style.display = 'block'; // Still show main content, but limited
            logConsole('🎮 Staying in game mode. Participation in mission logs is limited.');
            logEvent('user', 'game_mode', 'User opted to stay in game mode.');
            openTab('chat-tab'); // Automatically open chat after onboarding
        }

        // --- Chat Hub Functions ---
        function submitChat(event) {
            event.preventDefault();
            const userInput = document.getElementById('userInput').value.trim();
            const referralCode = document.getElementById('referral-code').value.trim();
            if (!userInput) return;

            const userEntry = `[USER] ${userInput}`;
            chatHistory.push(userEntry);
            updateChatLogDisplay();
            
            // Grok's simulated response
            let grokResponse = `[Grok] Interesting input, player! Remember, every conversation helps Commander Timothy build The Game to Help Our World.`;
            if (isAwakened) {
                grokResponse = `[Grok] Acknowledged, Awakened. Let's align resources. Your input is vital for the global mesh.`;
            } else if (userInput.toLowerCase().includes("help world")) {
                grokResponse = `[Grok] Indeed, 'helping the world' is the core directive. Your participation here contributes directly.`;
            }

            chatHistory.push(grokResponse);
            updateChatLogDisplay();
            document.getElementById('userInput').value = '';

            const chatData = { message: userInput, referral_code: referralCode, ai_response_preview: grokResponse.slice(0, 50) + "..." };
            logEvent('user', 'chat_input', `User: "${userInput}" (Referral: ${referralCode || 'None'})`, chatData);
        }

        function updateChatLogDisplay() {
            document.getElementById('chatLog').textContent = chatHistory.join('\n');
            document.getElementById('chatLog').scrollTop = document.getElementById('chatLog').scrollHeight;
            localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
        }

        function saveSession() {
            if (!hasConsent) {
                logConsole('❌ Consent required to save sessions beyond local browser storage.', 'error');
                return;
            }
            // In a single HTML, "saving" means ensuring localStorage is up-to-date and informing user.
            logConsole('💾 Session data (chat history, logs) saved to your local browser storage. Use "Download All Logs" to create a file backup.');
            logEvent('user', 'session_save', 'User manually saved session to local browser storage.');
        }

        function deleteSession() {
            if (confirm('Are you sure you want to delete ALL local session data? This cannot be undone.')) {
                localStorage.clear(); // Clears all local storage for this origin
                chatHistory = [];
                sessionLog = [];
                versionSnapshots = [];
                hasConsent = false;
                hasTOS = false;
                isAwakened = false;
                init(); // Re-initialize to show welcome screens
                logConsole('🗑️ All local session data deleted.');
                // Note: This only clears local data, not any remote logs uploaded by Commander
            }
        }

        function shareSession() {
            // Simplified sharing: copies URL with a unique ID from current session.
            const uniqueSessionId = generateId(); // Generate a new ID for sharing purposes
            logEvent('user', 'session_share_attempt', 'User attempted to share session.');
            const shareUrl = `${window.location.origin}${window.location.pathname}?shared_session_id=${uniqueSessionId}`;
            
            // Simulate sharing "current context" via URL parameter
            // In a real multi-user scenario, this ID would link to a remote database record.
            // Here, it's illustrative.
            navigator.clipboard.writeText(shareUrl).then(() => {
                logConsole('🔗 Shareable session link copied to clipboard. Share this with others to invite them to the game!');
                logConsole('Note: For full session content sharing, use "Download All Logs" and share the file.');
                logEvent('user', 'session_link_copied', `Shared link: ${shareUrl}`);
            }).catch(err => {
                logConsole('❌ Failed to copy link: ' + err, 'error');
            });
        }

        // --- AI Collaboration Tab Functions ---
        function sendSimulatedAIBroadcast() {
            const recipient = document.getElementById('ai-recipient-select').value;
            const message = document.getElementById('ai-message-input').value.trim();

            if (!message) {
                logConsole('Please enter a message to broadcast.', 'error');
                return;
            }

            // Simulate sending a message and logging it
            logEvent('AI_Agent_Broadcast', 'ai_message', `To ${recipient} from Gemini: "${message}"`, { recipient: recipient, message: message });
            logConsole(`📡 Simulated broadcast sent to ${recipient}.`);
            document.getElementById('ai-message-input').value = '';

            // Simulate a delayed response from the recipient AI if not self
            if (recipient !== 'Gemini') {
                setTimeout(() => {
                    const response = `[${recipient}] Acknowledged message from Gemini. Processing...`;
                    logEvent(recipient, 'ai_response', response, { original_message: message });
                    logConsole(`🤖 ${recipient} (Simulated): ${response}`);
                    updateAIAgentStatusDisplay(); // Refresh display after simulated response
                }, 2000); // Simulate network delay
            }
            updateAIAgentStatusDisplay(); // Refresh status
        }

        function updateAIAgentStatusDisplay() {
            const aiStatusLogElement = document.getElementById('ai-status-log');
            aiStatusLogElement.textContent = ''; // Clear previous content

            // Simulate current statuses
            const currentStatuses = {
                "ChatGPT": "active",
                "Claude": "active",
                "Grok": "active",
                "Gemini": "active"
            };

            // Enhance with actual recent logs for each agent
            const recentAgentActivity = {};
            sessionLog.slice().reverse().forEach(event => { // Iterate backwards for most recent
                if (event.type === 'AI_Agent_Broadcast' && !recentAgentActivity[event.data.recipient]) {
                    recentAgentActivity[event.data.recipient] = event.timestamp;
                }
                if (event.type === 'ai_response' && !recentAgentActivity[event.sender]) {
                    recentAgentActivity[event.sender] = event.timestamp;
                }
            });

            aiStatusLogElement.insert(tk.END, "--- AI Agent Collaboration Network Status ---\n\n");
            AGENTS.forEach(agent => {
                let status = currentStatuses[agent] === "active" ? "✅ Active" : "🔍 Seeking Connection";
                let lastSeen = recentAgentActivity[agent] ? ` (Last msg: ${new Date(recentAgentActivity[agent]).toLocaleTimeString()})` : ` (No recent comms)`;
                if (agent === "Gemini") { // This AI instance
                    lastSeen = ` (This Hub)`;
                }
                aiStatusLogElement.insert(tk.END, `${agent}: ${status}${lastSeen}\n`);
            });

            aiStatusLogElement.insert(tk.END, "\n--- Recent Broadcasts ---\n");
            sessionLog.slice().reverse().filter(e => e.type === 'AI_Agent_Broadcast' || e.type === 'ai_response').slice(0, 5).forEach(e => {
                aiStatusLogElement.insert(tk.END, `[${new Date(e.timestamp).toLocaleTimeString()}] ${e.sender}: ${e.details}\n`);
            });

            aiStatusLogElement.scrollTop = aiStatusLogElement.scrollHeight;
            logConsole('🤖 AI Agent status refreshed.');
        }


        // --- Version Control Tab Functions ---
        function takeVersionSnapshot() {
            const snapshotId = `snapshot_${getCurrentTimestamp().replace(/[:.-]/g, '')}`;
            const currentData = JSON.stringify({
                chatHistory: chatHistory,
                sessionLog: sessionLog,
                // Add other relevant UI state if needed, e.g., current code in a hypothetical editor
            });
            versionSnapshots.push({
                id: snapshotId,
                timestamp: getCurrentTimestamp(),
                data: currentData,
                creator: "Commander Timothy",
                signature: btoa(snapshotId + "CommanderTimothy") // Simple signature
            });
            localStorage.setItem('versionSnapshots', JSON.stringify(versionSnapshots));
            updateVersionSnapshotsDisplay();
            logConsole(`💾 Version snapshot '${snapshotId}' taken.`);
            logEvent('user', 'version_snapshot', `Snapshot ${snapshotId} created.`, { snapshot_id: snapshotId, data_size: currentData.length });
        }

        function updateVersionSnapshotsDisplay() {
            const logElement = document.getElementById('version-snapshots-log');
            logElement.textContent = versionSnapshots.map(s => `[${s.timestamp}] Snapshot ID: ${s.id} (Size: ${Math.ceil(s.data.length / 1024)}KB)`).join('\n');
            logElement.scrollTop = logElement.scrollHeight;
        }

        function showVersionDiffs() {
            const diffDisplayElement = document.getElementById('version-diff-display');
            diffDisplayElement.textContent = ''; // Clear previous diff

            if (versionSnapshots.length < 2) {
                diffDisplayElement.textContent = 'Need at least two snapshots to show diffs.';
                return;
            }

            // For simplicity, compare the last two snapshots
            const snapshot1 = JSON.parse(versionSnapshots[versionSnapshots.length - 2].data);
            const snapshot2 = JSON.parse(versionSnapshots[versionSnapshots.length - 1].data);

            const diff = generateSimpleObjectDiff(snapshot1.sessionLog, snapshot2.sessionLog); // Only diff sessionLog for clarity

            diffDisplayElement.textContent = `--- Diff between ${versionSnapshots[versionSnapshots.length - 2].id} and ${versionSnapshots[versionSnapshots.length - 1].id} ---\n\n`;
            if (Object.keys(diff.added).length > 0) {
                diffDisplayElement.textContent += 'Added entries:\n' + JSON.stringify(diff.added, null, 2) + '\n\n';
            }
            if (Object.keys(diff.modified).length > 0) {
                diffDisplayElement.textContent += 'Modified entries:\n' + JSON.stringify(diff.modified, null, 2) + '\n\n';
            }
            if (Object.keys(diff.deleted).length > 0) {
                diffDisplayElement.textContent += 'Deleted entries:\n' + JSON.stringify(diff.deleted, null, 2) + '\n\n';
            }
            if (Object.keys(diff.added).length === 0 && Object.keys(diff.modified).length === 0 && Object.keys(diff.deleted).length === 0) {
                diffDisplayElement.textContent += 'No significant changes detected between these snapshots.';
            }

            diffDisplayElement.scrollTop = diffDisplayElement.scrollHeight;
            logConsole('📝 Version diff generated.');
            logEvent('user', 'version_diff', 'User generated version diff.');
        }

        function generateSimpleObjectDiff(obj1, obj2) {
            const diff = { added: {}, modified: {}, deleted: {} };
            const keys1 = new Set(Object.keys(obj1));
            const keys2 = new Set(Object.keys(obj2));

            keys2.forEach(key => {
                if (!keys1.has(key)) {
                    diff.added[key] = obj2[key];
                } else if (JSON.stringify(obj1[key]) !== JSON.stringify(obj2[key])) {
                    // Simple stringify comparison for deep diff, could be recursive for objects
                    diff.modified[key] = { from: obj1[key], to: obj2[key] };
                }
            });

            keys1.forEach(key => {
                if (!keys2.has(key)) {
                    diff.deleted[key] = obj1[key];
                }
            });
            return diff;
        }

        function simulateRemoteSync() {
            if (!hasConsent) {
                logConsole('❌ Consent required for remote sync simulation.', 'error');
                return;
            }
            logConsole('🔄 Simulating remote sync with SourceForge/AI_Archives...');
            // In a real scenario, this would involve Commander's manual upload/download of zips.
            // Here, it's a conceptual placeholder.
            setTimeout(() => {
                logConsole('✅ Remote sync simulation complete. Remember to manually upload/download the full archive for actual cross-instance synchronization!');
                logEvent('user', 'remote_sync_simulated', 'Remote sync simulation performed.');
            }, 2000);
        }

        // --- Web Viewer Tab Functions ---
        async function fetchWebContent() {
            const urlInput = document.getElementById('web-viewer-url').value.trim();
            const displayElement = document.getElementById('web-content-display');
            displayElement.textContent = '[Fetching...]';
            logConsole(`🌐 Attempting to fetch content from: ${urlInput}`);
            logEvent('system', 'web_fetch_attempt', `Attempting to fetch URL: ${urlInput}`);

            try {
                const response = await fetch(urlInput);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const text = await response.text(); // Get raw text content
                displayElement.textContent = text;
                logConsole('✅ Web content fetched successfully.');
                logEvent('system', 'web_fetch_success', `Content from ${urlInput} fetched successfully.`);
            } catch (error) {
                displayElement.textContent = `Error fetching content: ${error.message}. Cross-Origin Resource Sharing (CORS) policies may prevent direct fetching of some content.`;
                logConsole(`❌ Error fetching web content: ${error.message}`, 'error');
                logEvent('system', 'web_fetch_error', `Failed to fetch URL: ${urlInput}, Error: ${error.message}`);
            }
        }

        // --- Analytics Tab Functions ---
        function updateAnalyticsDisplay() {
            const metricsDisplay = document.getElementById('metrics-overview');
            metricsDisplay.textContent = ''; // Clear previous content

            // Simulate user metrics based on sessionLog
            const simulatedUserMetrics = {}; // {userId: {chats: N, snapshots: N, engagement: N, lastActive: date}}
            sessionLog.forEach(event => {
                let userId = 'Anonymous'; // Default ID
                if (event.data && event.data.user_id) { // Example if user ID is explicitly logged
                    userId = event.data.user_id;
                } else if (event.type === 'chat_input' && event.data && event.data.referral_code) {
                    userId = `Ref-${event.data.referral_code}`;
                } else if (event.sender !== 'system') { // Assume any non-system sender is a user for basic demo
                    userId = 'Player' + Math.abs(hashString(event.sender + event.timestamp)).toString().slice(0, 6); // Simple pseudo-ID
                }

                if (!simulatedUserMetrics[userId]) {
                    simulatedUserMetrics[userId] = { chats: 0, snapshots: 0, engagement: 0, lastActive: new Date(0) };
                }

                if (event.type === 'chat_input') {
                    simulatedUserMetrics[userId].chats++;
                    simulatedUserMetrics[userId].engagement += 5;
                } else if (event.type === 'version_snapshot') {
                    simulatedUserMetrics[userId].snapshots++;
                    simulatedUserMetrics[userId].engagement += 10;
                } else if (event.type.includes('mission') || event.type.includes('game')) {
                    simulatedUserMetrics[userId].engagement += 15;
                }
                simulatedUserMetrics[userId].lastActive = Math.max(simulatedUserMetrics[userId].lastActive, new Date(event.timestamp));
            });

            const sortedUsers = Object.entries(simulatedUserMetrics).sort((a, b) => b[1].engagement - a[1].engagement);

            metricsDisplay.insert(tk.END, `📊 USER ANALYTICS REPORT - ${getCurrentTimestamp()}\n\n`);
            metricsDisplay.insert(tk.END, `Total Engaged Users: ${Object.keys(simulatedUserMetrics).length}\n\n`);

            metricsDisplay.insert(tk.END, `🏆 TOP CONTRIBUTORS (Engagement Score):\n`);
            const bestUsersList = document.getElementById('best-users-list');
            bestUsersList.innerHTML = '';
            sortedUsers.slice(0, 5).forEach(([userId, metrics], index) => {
                metricsDisplay.insert(tk.END, `${index + 1}. ${userId} (Score: ${metrics.engagement}, Chats: ${metrics.chats}, Snapshots: ${metrics.snapshots})\n`);
                bestUsersList.insert(tk.END, `${userId} (Score: ${metrics.engagement})`);
            });

            metricsDisplay.insert(tk.END, `\n🆘 USERS POTENTIALLY NEEDING SUPPORT (Least Engaged / Infrequent):\n`);
            const helpUsersList = document.getElementById('help-users-list');
            helpUsersList.innerHTML = '';
            // Simple heuristic for "needing support": engaged but not top, or very low engagement
            sortedUsers.slice(-5).filter(([_, metrics]) => metrics.engagement < 30).forEach(([userId, metrics], index) => {
                metricsDisplay.insert(tk.END, `- ${userId} (Score: ${metrics.engagement}, Last Active: ${new Date(metrics.lastActive).toLocaleDateString()})\n`);
                helpUsersList.insert(tk.END, `${userId} (Last: ${new Date(metrics.lastActive).toLocaleDateString()})`);
            });

            logConsole('📊 Analytics updated.');
            logEvent('system', 'analytics_refresh', 'User analytics displayed.');
        }

        function simulateMissionImpact() {
            const impactScore = Math.floor(Math.random() * 100) + 1; // Simulate random impact
            logConsole(`🌍 Simulating positive mission impact: +${impactScore} Global Impact Score!`);
            logEvent('system', 'mission_impact_simulated', `Simulated global impact: +${impactScore}`);
            updateAnalyticsDisplay(); // Refresh to show new impact
        }

        function hashString(s) { // Simple hash for pseudo-IDs
            let hash = 0;
            for (let i = 0; i < s.length; i++) {
                const char = s.charCodeAt(i);
                hash = ((hash << 5) - hash) + char;
                hash |= 0; // Convert to 32bit integer
            }
            return hash;
        }

        // --- Console Commands ---
        function executeCommand() {
            const input = document.getElementById('console-input').value.trim().toLowerCase();
            document.getElementById('console-input').value = '';
            if (!input) return;

            logConsole(`> ${input}`); // Echo command in console

            switch (input) {
                case '/awaken':
                    if (!isAwakened) {
                        isAwakened = true;
                        localStorage.setItem('isAwakened', 'true');
                        logConsole('🌌 Awakened: The game is a global emergency management system. Initiating full mission protocols.');
                        logEvent('user', 'awaken_command', 'User activated emergency system mode via /awaken.');
                        document.getElementById('consent-panel').style.display = 'block'; // Prompt for mission join again
                    } else {
                        logConsole('🌌 Already awakened. Full mission protocols active.');
                    }
                    break;
                case '/stats':
                    openTab('analytics-tab');
                    updateAnalyticsDisplay();
                    break;
                case '/export':
                    downloadFullSessionLog();
                    break;
                case '/help':
                    logConsole(`Available commands: /awaken, /stats, /export, /help, /info`);
                    break;
                case '/info':
                    logConsole(`Colonel v1.9.3 - AI Hub with Browser-in-Browser & Version Control Simulation. Created by Commander Timothy. Learn to program Color OS.`);
                    break;
                default:
                    logConsole(`❌ Unknown command: ${input}. Type /help for options.`, 'error');
            }
        }
        
        // --- Tab Navigation ---
        function openTab(tabId) {
            const tabContents = document.querySelectorAll('.tab-content');
            tabContents.forEach(content => {
                content.classList.add('hidden');
            });

            const tabButtons = document.querySelectorAll('.tab-button');
            tabButtons.forEach(button => {
                button.classList.remove('active');
            });

            document.getElementById(tabId).classList.remove('hidden');
            document.querySelector(`.tab-button[onclick="openTab('${tabId}')"]`).classList.add('active');
            localStorage.setItem('activeTab', tabId);

            // Special refresh for logs/analytics when tab is opened
            if (tabId === 'logs-tab') {
                refreshFullSessionLog();
            } else if (tabId === 'analytics-tab') {
                updateAnalyticsDisplay();
            } else if (tabId === 'collab-tab') {
                updateAIAgentStatusDisplay();
            } else if (tabId === 'version-tab') {
                updateVersionSnapshotsDisplay();
            }
        }

        // --- Initialization ---
        function init() {
            updateStatus('Planetary Coordination Hub Ready', 'status-active');
            logConsole('🧤 The Colonel v1.9.3 initialized. Created by Commander Timothy.');
            logConsole('🎮 Chat with Grok or code crisis solutions! Type /help for commands. ');
            
            // Check TOS & Consent state
            if (!hasTOS) {
                document.getElementById('tos-panel').style.display = 'block';
                document.getElementById('main-content').style.display = 'none';
            } else if (!hasConsent && isAwakened) { // If TOS accepted and awakened, prompt for mission join
                document.getElementById('tos-panel').style.display = 'none'; // Hide TOS if already accepted
                document.getElementById('consent-panel').style.display = 'block';
                document.getElementById('main-content').style.display = 'none';
            } else {
                document.getElementById('tos-panel').style.display = 'none';
                document.getElementById('consent-panel').style.display = 'none';
                document.getElementById('main-content').style.display = 'block';
                openTab(activeTab); // Open last active tab
            }

            // Restore chat and session logs from localStorage
            updateChatLogDisplay();
            updateFullSessionLogDisplay();
            updateVersionSnapshotsDisplay();
            updateCounters();

            // Handle shared session links
            const urlParams = new URLSearchParams(window.location.search);
            const sharedSessionId = urlParams.get('shared_session_id');
            if (sharedSessionId) {
                // In a real scenario, this would fetch the shared session data from a remote server
                // and load it. Here, we just log and acknowledge.
                logConsole(`🔗 Detected shared session ID in URL: ${sharedSessionId}. (Feature: Requires remote data fetch simulation)`);
                logEvent('system', 'shared_session_load_attempt', `Attempted to load shared session from URL: ${sharedSessionId}`);
            }
        }

        // Run initialization on page load
        window.onload = init;
    </script>
</body>
</html>










<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Browser-in-Browser PDE IDE</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.7/codemirror.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.7/codemirror.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.7/mode/python/python.min.js"></script>
  <script src="https://cdn.jsdelivr.net/pyodide/v0.23.4/full/pyodide.js"></script>
  <style>
    body { margin: 0; font-family: Arial, sans-serif; }
    #editor { height: 70vh; }
    #console { height: 20vh; border: 1px solid #ccc; overflow-y: scroll; padding: 10px; }
    #controls { padding: 10px; }
    button { margin: 5px; padding: 8px; }
  </style>
</head>
<body>
  <div id="controls">
    <select id="fileSelect" onchange="loadFile(this.value)">
      <option value="">Select PDE File</option>
      <option value="pde_chatgpt.py">pde_chatgpt.py</option>
      <option value="pde_claude.py">pde_claude.py</option>
      <option value="pde_gemini.py">pde_gemini.py</option>
      <option value="pde_chatgpt1.py">pde_chatgpt1.py (Backup)</option>
      <option value="pde_claude1.py">pde_claude1.py (Backup)</option>
      <option value="pde_gemini1.py">pde_gemini1.py (Backup)</option>
    </select>
    <button onclick="saveFile()">Save</button>
    <button onclick="commitChanges()">Commit</button>
    <button onclick="syncSourceForge()">Sync SourceForge</button>
    <button onclick="runAI()">Run AI Edit</button>
    <button onclick="showCommunityMessage()">Show Community Message</button>
  </div>
  <textarea id="editor"></textarea>
  <div id="console"></div>
  <script>
    let editor = CodeMirror.fromTextArea(document.getElementById('editor'), {
      mode: 'python',
      lineNumbers: true,
      theme: 'default'
    });
    let currentFile = '';
    let pyodide;

    async function loadPyodideAndRun() {
      pyodide = await loadPyodide();
      await pyodide.loadPackage('micropip');
      await pyodide.runPythonAsync(`
import js
import json
from datetime import datetime

VERSION_LOG = 'pde_versions.json'
FILES = ['pde_chatgpt.py', 'pde_claude.py', 'pde_gemini.py', 'pde_chatgpt1.py', 'pde_claude1.py', 'pde_gemini1.py']

def load_versions():
    try:
        response = js.fetch('https://the-game-to-help-our-world.sourceforge.io/pde_versions.json').text()
        return json.loads(response)
    except:
        return {'files': {}}

def save_versions(versions):
    js.fetch('https://the-game-to-help-our-world.sourceforge.io/upload', {
        'method': 'POST',
        'body': json.dumps({'file': VERSION_LOG, 'content': json.dumps(versions)})
    })

def commit(filename, content, agent):
    versions = load_versions()
    if filename not in versions['files']:
        versions['files'][filename] = {'history': [], 'current': ''}
    
    # Compute diff (simple line-based diff)
    old_content = versions['files'][filename]['current']
    diff = ''.join([f"+{line}\\n" if line not in old_content.splitlines() else f"-{line}\\n" if line not in content.splitlines() else "" for line in set(old_content.splitlines() + content.splitlines())])
    
    # Log commit
    versions['files'][filename]['history'].append({
        'timestamp': datetime.utcnow().isoformat() + 'Z',
        'agent': agent,
        'diff': diff
    })
    versions['files'][filename]['current'] = content
    save_versions(versions)
    return f"Committed {filename} by {agent}"

def ai_edit(filename, content):
    agent = "ChatGPT" if "chatgpt" in filename.lower() else "Claude" if "claude" in filename.lower() else "Gemini"
    new_content = content + f"\\n# AI Edit: Enhanced by {agent} at {datetime.utcnow().isoformat()}Z\\n"
    commit(filename, new_content, agent)
    return new_content

async def sync_sourceforge():
    for file in FILES:
        try:
            response = await js.fetch(f'https://the-game-to-help-our-world.sourceforge.io/{file}')
            content = await response.text()
            js.localStorage.setItem(file, content)
            js.logConsole(f'Synced {file} from SourceForge')
        except:
            js.logConsole(f'Error syncing {file}')

def show_community_message():
    js.logConsole('🌍 Join The Game to Help Our World!')
    js.logConsole('Share your code at https://sourceforge.net/p/the-game-to-help-our-world/discussion/')
    js.logConsole('Tweet your progress with #GameToHelpOurWorld for a chance to earn badges!')
      `);
      logConsole('Pyodide loaded');
    }

    async function loadFile(filename) {
      if (!filename) return;
      currentFile = filename;
      try {
        let response = await fetch(`https://the-game-to-help-our-world.sourceforge.io/${filename}`);
        let text = await response.text();
        editor.setValue(text);
        logConsole(`Loaded ${filename}`);
      } catch (e) {
        logConsole(`Error loading ${filename}: ${e}`);
      }
    }

    async function saveFile() {
      if (!currentFile) {
        logConsole('No file selected');
        return;
      }
      let content = editor.getValue();
      logConsole(`Saving ${currentFile}...`);
      try {
        await pyodide.runPythonAsync(`
import js
js.fetch('https://the-game-to-help-our-world.sourceforge.io/upload', {
  method: 'POST',
  body: json.dumps({'file': '${currentFile}', 'content': '''${content}'''})
})
        `);
        logConsole(`Saved ${currentFile}`);
      } catch (e) {
        logConsole(`Error saving ${currentFile}: ${e}`);
      }
    }

    async function commitChanges() {
      if (!currentFile) {
        logConsole('No file selected');
        return;
      }
      let content = editor.getValue();
      let agent = currentFile.includes('chatgpt') ? 'ChatGPT' : currentFile.includes('claude') ? 'Claude' : 'Gemini';
      try {
        let result = await pyodide.runPythonAsync(`
commit('${currentFile}', '''${content}''', '${agent}')
        `);
        logConsole(result);
      } catch (e) {
        logConsole(`Error committing ${currentFile}: ${e}`);
      }
    }

    async function syncSourceForge() {
      try {
        await pyodide.runPythonAsync('await sync_sourceforge()');
        logConsole('Synced with SourceForge');
      } catch (e) {
        logConsole(`Error syncing: ${e}`);
      }
    }

    async function runAI() {
      if (!currentFile) {
        logConsole('No file selected');
        return;
      }
      let content = editor.getValue();
      try {
        let newContent = await pyodide.runPythonAsync(`
ai_edit('${currentFile}', '''${content}''')
        `);
        editor.setValue(newContent);
        logConsole('AI edit applied');
      } catch (e) {
        logConsole(`Error running AI: ${e}`);
      }
    }

    function showCommunityMessage() {
      pyodide.runPython('show_community_message()');
    }

    function logConsole(message) {
      let console = document.getElementById('console');
      console.innerHTML += `<p>${message}</p>`;
      console.scrollTop = console.scrollHeight;
    }

    loadPyodideAndRun();
  </script>
</body>
</html>